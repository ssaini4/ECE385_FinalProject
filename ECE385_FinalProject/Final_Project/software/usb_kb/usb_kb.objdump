
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001244c memsz 0x0001244c flags r-x
    LOAD off    0x0001346c vaddr 0x1001246c paddr 0x10013f58 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a44 vaddr 0x10015a44 paddr 0x10015a44 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011834  100001c0  100001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  100119f4  100119f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1001246c  10013f58  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10015a44  10015a44  00015a44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f58  2**0
                  CONTENTS
  7 .sdram        00000000  10015ba4  10015ba4  00014f58  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f58  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef0  00000000  00000000  00014f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023579  00000000  00000000  00015e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009010  00000000  00000000  000393e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b767  00000000  00000000  000423f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002328  00000000  00000000  0004db60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000363b  00000000  00000000  0004fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017acc  00000000  00000000  000534c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006af90  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018b8  00000000  00000000  0006afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006fbaa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006fbad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006fbb9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006fbba  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006fbbb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006fbbf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006fbc3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006fbc7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006fbd2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006fbdd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006fbe8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000046  00000000  00000000  0006fbf3  2**0
                  CONTENTS, READONLY
 30 .jdi          000042ea  00000000  00000000  0006fc39  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00091d0e  00000000  00000000  00073f23  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001c0 l    d  .text	00000000 .text
100119f4 l    d  .rodata	00000000 .rodata
1001246c l    d  .rwdata	00000000 .rwdata
10015a44 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015ba4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10015a44 l     O .bss	00000002 ctl_reg.3589
10015a46 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100121b2 l     O .rodata	00000010 zeroes.4404
100046e4 l     F .text	000000bc __sbprintf
100121c2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100048f4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000644c l     F .text	00000008 __fp_unlock
10006460 l     F .text	0000019c __sinit.part.1
100065fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001246c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100128b0 l     O .rwdata	00000020 lc_ctype_charset
10012890 l     O .rwdata	00000020 lc_message_charset
100128d0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100121f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009ad0 l     F .text	000000fc __sprint_r.part.0
10012318 l     O .rodata	00000010 zeroes.4349
1000b10c l     F .text	000000bc __sbprintf
10012328 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f150 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f278 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f2a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f3ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f4a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f784 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013f48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fa3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fb8c l     F .text	00000038 alt_dev_reg
10012eb8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fe74 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010080 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010978 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010e1c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010f7c l     F .text	00000050 alt_get_errno
10010fcc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10009114 g     F .text	00000074 _mprec_log10
10009200 g     F .text	0000008c __any_on
1000b6c0 g     F .text	00000054 _isatty_r
10012200 g     O .rodata	00000028 __mprec_tinytens
1000f6c0 g     F .text	0000007c alt_main
10002280 g     F .text	000000c0 _puts_r
10015aa4 g     O .bss	00000100 alt_irq
1000b714 g     F .text	00000060 _lseek_r
10013f58 g       *ABS*	00000000 __flash_rwdata_start
1000db2c g     F .text	00000088 .hidden __eqdf2
10015ba4 g       *ABS*	00000000 __alt_heap_start
10002244 g     F .text	0000003c printf
1000b92c g     F .text	0000009c _wcrtomb_r
10009990 g     F .text	0000005c __sseek
100067ac g     F .text	00000010 __sinit
1000b7d4 g     F .text	00000140 __swbuf_r
10007280 g     F .text	0000007c _setlocale_r
10006604 g     F .text	00000078 __sfmoreglue
1000f760 g     F .text	00000024 __malloc_unlock
10002114 g     F .text	00000080 UsbGetRetryCnt
10007f50 g     F .text	0000015c memmove
100001fc g     F .text	00000054 IO_init
10006794 g     F .text	00000018 _cleanup
100081d4 g     F .text	000000a8 _Balloc
1000dbb4 g     F .text	000000dc .hidden __gtdf2
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b664 g     F .text	0000005c _fstat_r
10015a60 g     O .bss	00000004 errno
1000990c g     F .text	00000008 __seofread
10015a68 g     O .bss	00000004 alt_argv
1001bf18 g       *ABS*	00000000 _gp
1000fa0c g     F .text	00000030 usleep
10012d38 g     O .rwdata	00000180 alt_fd_list
100113e8 g     F .text	00000090 alt_find_dev
10007e08 g     F .text	00000148 memcpy
10006454 g     F .text	0000000c _cleanup_r
1000ef68 g     F .text	000000dc .hidden __floatsidf
10010f00 g     F .text	0000007c alt_io_redirect
1000dc90 g     F .text	000000f4 .hidden __ltdf2
100119f4 g       *ABS*	00000000 __DTOR_END__
10002340 g     F .text	00000014 puts
100097f0 g     F .text	00000074 __fpclassifyd
10009070 g     F .text	000000a4 __ratio
1000b0f0 g     F .text	0000001c __vfiprintf_internal
10010280 g     F .text	0000021c altera_avalon_jtag_uart_read
10002214 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c7cc g     F .text	00000064 .hidden __udivsi3
1000f3fc g     F .text	000000ac isatty
10012250 g     O .rodata	000000c8 __mprec_tens
100072fc g     F .text	0000000c __locale_charset
10015a5c g     O .bss	00000004 __malloc_top_pad
100017a0 g     F .text	00000268 UsbGetConfigDesc2
10013f20 g     O .rwdata	00000004 __mb_cur_max
1000732c g     F .text	0000000c _localeconv_r
10008608 g     F .text	0000003c __i2b
10006c30 g     F .text	000004c8 __sfvwrite_r
10009864 g     F .text	00000054 _sbrk_r
1000b774 g     F .text	00000060 _read_r
10013f40 g     O .rwdata	00000004 alt_max_fd
1000b358 g     F .text	000000f0 _fclose_r
1000641c g     F .text	00000030 fflush
10015a58 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c8b0 g     F .text	000008ac .hidden __adddf3
10008e18 g     F .text	0000010c __b2d
1000c110 g     F .text	000005c4 .hidden __umoddi3
1000f5e4 g     F .text	000000dc lseek
10013f18 g     O .rwdata	00000004 _global_impure_ptr
1000928c g     F .text	00000564 _realloc_r
10015ba4 g       *ABS*	00000000 __bss_end
10010d2c g     F .text	000000f0 alt_iic_isr_register
100112bc g     F .text	00000108 alt_tick
1000bb14 g     F .text	000005fc .hidden __udivdi3
1000b5c0 g     F .text	00000024 _fputwc_r
10012228 g     O .rodata	00000028 __mprec_bigtens
100083ec g     F .text	00000104 __s2b
1000f044 g     F .text	000000a8 .hidden __floatunsidf
10008b58 g     F .text	00000060 __mcmp
100011f0 g     F .text	00000100 UsbSetAddress
100067cc g     F .text	00000018 __fp_lock_all
10010ce0 g     F .text	0000004c alt_ic_irq_enabled
10011220 g     F .text	0000009c alt_alarm_stop
10015a70 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d4 alt_irq_handler
10012d10 g     O .rwdata	00000028 alt_dev_null
10010958 g     F .text	00000020 alt_dcache_flush_all
100084f0 g     F .text	00000068 __hi0bits
100002cc g     F .text	00000080 IO_read
1000eee8 g     F .text	00000080 .hidden __fixdfsi
10013f58 g       *ABS*	00000000 __ram_rwdata_end
10013f38 g     O .rwdata	00000008 alt_dev_list
1000fa8c g     F .text	00000100 write
1001246c g       *ABS*	00000000 __ram_rodata_end
1000f2f4 g     F .text	000000b8 fstat
1000dc90 g     F .text	000000f4 .hidden __ledf2
10002194 g     F .text	00000080 UsbPrintMem
100088d0 g     F .text	00000140 __pow5mult
10009be4 g     F .text	0000150c ___vfiprintf_internal_r
10015a50 g     O .bss	00000004 __nlocale_changed
1000c830 g     F .text	00000058 .hidden __umodsi3
10015ba4 g       *ABS*	00000000 end
1000fdac g     F .text	000000c8 altera_avalon_jtag_uart_init
100119f4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f0ec g     F .text	00000064 .hidden __clzsi2
1001049c g     F .text	00000224 altera_avalon_jtag_uart_write
100067bc g     F .text	00000004 __sfp_lock_acquire
10007d24 g     F .text	000000e4 memchr
100023ec g     F .text	000022dc ___vfprintf_internal_r
10001b08 g     F .text	00000100 UsbClassRequest
10006920 g     F .text	00000310 _free_r
10007308 g     F .text	00000010 __locale_mb_cur_max
10011840 g     F .text	00000180 __call_exitprocs
10015a4c g     O .bss	00000004 __mlocale_changed
10013f24 g     O .rwdata	00000004 __malloc_sbrk_base
100001c0 g     F .text	0000003c _start
10015a74 g     O .bss	00000004 _alt_tick_rate
10008a10 g     F .text	00000148 __lshift
10015a78 g     O .bss	00000004 _alt_nticks
1000f7d4 g     F .text	00000104 read
1000fbfc g     F .text	0000004c alt_sys_init
10011728 g     F .text	00000118 __register_exitproc
10008644 g     F .text	0000028c __multiply
10010128 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c888 g     F .text	00000028 .hidden __mulsi3
1001246c g       *ABS*	00000000 __ram_rwdata_start
100119f4 g       *ABS*	00000000 __ram_rodata_start
10015a7c g     O .bss	00000028 __malloc_current_mallinfo
10008f24 g     F .text	0000014c __d2b
100012f0 g     F .text	00000148 UsbGetDeviceDesc1
1000fc48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001158c g     F .text	000000d4 alt_get_fd
10010800 g     F .text	00000158 alt_busy_sleep
1000b228 g     F .text	00000054 _close_r
100116ac g     F .text	0000007c memcmp
1000fd08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015ba4 g       *ABS*	00000000 __alt_stack_base
1000fd58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100047a0 g     F .text	00000154 __swsetup_r
1000d15c g     F .text	000009d0 .hidden __divdf3
1000667c g     F .text	00000118 __sfp
10009188 g     F .text	00000078 __copybits
10012908 g     O .rwdata	00000408 __malloc_av_
100067c8 g     F .text	00000004 __sinit_lock_release
1000dd84 g     F .text	00000868 .hidden __muldf3
100098b8 g     F .text	00000054 __sread
10002090 g     F .text	00000084 UsbWaitTDListDone
10011478 g     F .text	00000114 alt_find_file
100109c8 g     F .text	000000a4 alt_dev_llist_insert
1000f73c g     F .text	00000024 __malloc_lock
1000f95c g     F .text	000000b0 sbrk
100063c0 g     F .text	0000005c _fflush_r
1000b27c g     F .text	000000dc _calloc_r
10015a44 g       *ABS*	00000000 __bss_start
100080ac g     F .text	00000128 memset
1000034c g     F .text	00000d54 main
10015a6c g     O .bss	00000004 alt_envp
10015a54 g     O .bss	00000004 __malloc_max_total_mem
1000fca8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a08 g     F .text	00000100 UsbSetConfig
1000b914 g     F .text	00000018 __swbuf
100099ec g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b448 g     F .text	00000014 fclose
10004b1c g     F .text	00001688 _dtoa_r
10007518 g     F .text	0000080c _malloc_r
1000ba88 g     F .text	00000030 __ascii_wctomb
10013f44 g     O .rwdata	00000004 alt_errno
100070f8 g     F .text	000000c4 _fwalk
1000c6d4 g     F .text	00000084 .hidden __divsi3
100067fc g     F .text	00000124 _malloc_trim_r
10001c08 g     F .text	00000148 UsbGetHidDesc
100119f4 g       *ABS*	00000000 __CTOR_END__
100099f4 g     F .text	000000dc strcmp
100119f4 g       *ABS*	00000000 __flash_rodata_start
100119f4 g       *ABS*	00000000 __DTOR_LIST__
1000db2c g     F .text	00000088 .hidden __nedf2
100010f8 g     F .text	00000044 UsbRead
1000fbc4 g     F .text	00000038 alt_irq_init
1000f8d8 g     F .text	00000084 alt_release_fd
10012338 g     O .rodata	00000100 .hidden __clz_tab
10015a48 g     O .bss	00000004 _PathLocale
10011660 g     F .text	00000014 atexit
1000b1c8 g     F .text	00000060 _write_r
10007338 g     F .text	00000018 setlocale
10013f1c g     O .rwdata	00000004 _impure_ptr
10015a64 g     O .bss	00000004 alt_argc
100061a4 g     F .text	0000021c __sflush_r
10010acc g     F .text	00000060 _do_dtors
10007324 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008db4 g     F .text	00000064 __ulp
100067e4 g     F .text	00000018 __fp_unlock_all
10013f30 g     O .rwdata	00000008 alt_fs_list
10001d50 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007350 g     F .text	0000000c localeconv
10010b4c g     F .text	00000050 alt_ic_isr_register
10013f58 g       *ABS*	00000000 _edata
10015ba4 g       *ABS*	00000000 _end
100010a0 g     F .text	00000058 UsbWrite
1000b45c g     F .text	00000164 __fputwc
100001c0 g       *ABS*	00000000 __ram_exceptions_end
10010190 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10010c3c g     F .text	000000a4 alt_ic_irq_disable
10009914 g     F .text	0000007c __swrite
10013f28 g     O .rwdata	00000004 __malloc_trim_threshold
100113c4 g     F .text	00000024 altera_nios2_qsys_irq_init
10007318 g     F .text	0000000c __locale_msgcharset
10011674 g     F .text	00000038 exit
100071bc g     F .text	000000c4 _fwalk_reent
10008bb8 g     F .text	000001fc __mdiff
1000c758 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100067c0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000250 g     F .text	0000007c IO_write
100119c0 g     F .text	00000034 _exit
100106c0 g     F .text	00000140 alt_alarm_start
1000735c g     F .text	000001bc __smakebuf_r
10002354 g     F .text	00000098 strlen
100110c0 g     F .text	00000160 open
1000dbb4 g     F .text	000000dc .hidden __gedf2
10013f2c g     O .rwdata	00000004 __wctomb
10009bcc g     F .text	00000018 __sprint_r
10010b2c g     F .text	00000020 alt_icache_flush_all
10013f4c g     O .rwdata	00000004 alt_priority_mask
10010b9c g     F .text	000000a0 alt_ic_irq_enable
100046c8 g     F .text	0000001c __vfprintf_internal
1000bab8 g     F .text	0000005c _wctomb_r
1000e5ec g     F .text	000008fc .hidden __subdf3
10008558 g     F .text	000000b0 __lo0bits
10001610 g     F .text	00000190 UsbGetConfigDesc1
10013f50 g     O .rwdata	00000008 alt_alarm_list
10010a6c g     F .text	00000060 _do_ctors
1000113c g     F .text	000000b4 UsbSoftReset
1000b9c8 g     F .text	000000c0 wcrtomb
1000f1a0 g     F .text	000000d8 close
10001438 g     F .text	000001d8 UsbGetDeviceDesc2
1000f510 g     F .text	00000084 alt_load
1000b5e4 g     F .text	00000080 fputwc
100067c4 g     F .text	00000004 __sinit_lock_acquire
100082a4 g     F .text	00000148 __multadd
1000827c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08407014 	ori	at,at,448
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	1096a904 	addi	r2,r2,23204
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	1096a904 	addi	r2,r2,23204
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	0001883a 	nop
100001ac:	e037883a 	mov	sp,fp
100001b0:	dfc00117 	ldw	ra,4(sp)
100001b4:	df000017 	ldw	fp,0(sp)
100001b8:	dec00204 	addi	sp,sp,8
100001bc:	f800283a 	ret

Disassembly of section .text:

100001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001c0:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c8:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001cc:	d6afc614 	ori	gp,gp,48920
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001d0:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d4:	10969114 	ori	r2,r2,23108

    movhi r3, %hi(__bss_end)
100001d8:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001dc:	18d6e914 	ori	r3,r3,23460

    beq r2, r3, 1f
100001e0:	10c00326 	beq	r2,r3,100001f0 <_start+0x30>

0:
    stw zero, (r2)
100001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001ec:	10fffd36 	bltu	r2,r3,100001e4 <__alt_data_end+0xf80001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001f0:	000f5100 	call	1000f510 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f4:	000f6c00 	call	1000f6c0 <alt_main>

100001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f8:	003fff06 	br	100001f8 <__alt_data_end+0xf80001f8>

100001fc <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001fc:	deffff04 	addi	sp,sp,-4
10000200:	df000015 	stw	fp,0(sp)
10000204:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000208:	00802804 	movi	r2,160
1000020c:	00c00044 	movi	r3,1
10000210:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000214:	00802004 	movi	r2,128
10000218:	00c00044 	movi	r3,1
1000021c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000220:	00801804 	movi	r2,96
10000224:	00c00044 	movi	r3,1
10000228:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
1000022c:	00802404 	movi	r2,144
10000230:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000234:	00801c04 	movi	r2,112
10000238:	10000015 	stw	zero,0(r2)
}
1000023c:	0001883a 	nop
10000240:	e037883a 	mov	sp,fp
10000244:	df000017 	ldw	fp,0(sp)
10000248:	dec00104 	addi	sp,sp,4
1000024c:	f800283a 	ret

10000250 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000250:	defffd04 	addi	sp,sp,-12
10000254:	df000215 	stw	fp,8(sp)
10000258:	df000204 	addi	fp,sp,8
1000025c:	2007883a 	mov	r3,r4
10000260:	2805883a 	mov	r2,r5
10000264:	e0fffe05 	stb	r3,-8(fp)
10000268:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_cs=0;
1000026c:	00802804 	movi	r2,160
10000270:	10000005 	stb	zero,0(r2)
	*otg_hpi_r=1;
10000274:	00802004 	movi	r2,128
10000278:	00c00044 	movi	r3,1
1000027c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address=Address;
10000280:	00802404 	movi	r2,144
10000284:	e0fffe03 	ldbu	r3,-8(fp)
10000288:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w=0;
1000028c:	00801804 	movi	r2,96
10000290:	10000005 	stb	zero,0(r2)
	*otg_hpi_data=Data;
10000294:	00801c04 	movi	r2,112
10000298:	e0ffff0b 	ldhu	r3,-4(fp)
1000029c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w=1;
100002a0:	00801804 	movi	r2,96
100002a4:	00c00044 	movi	r3,1
100002a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002ac:	00802804 	movi	r2,160
100002b0:	00c00044 	movi	r3,1
100002b4:	10c00005 	stb	r3,0(r2)
	return;
100002b8:	0001883a 	nop

}
100002bc:	e037883a 	mov	sp,fp
100002c0:	df000017 	ldw	fp,0(sp)
100002c4:	dec00104 	addi	sp,sp,4
100002c8:	f800283a 	ret

100002cc <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002cc:	defffd04 	addi	sp,sp,-12
100002d0:	df000215 	stw	fp,8(sp)
100002d4:	df000204 	addi	fp,sp,8
100002d8:	2005883a 	mov	r2,r4
100002dc:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_cs=0;
100002e0:	00802804 	movi	r2,160
100002e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_w=1;
100002e8:	00801804 	movi	r2,96
100002ec:	00c00044 	movi	r3,1
100002f0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r=0;
100002f4:	00802004 	movi	r2,128
100002f8:	10000005 	stb	zero,0(r2)
	*otg_hpi_address=Address;
100002fc:	00802404 	movi	r2,144
10000300:	e0ffff03 	ldbu	r3,-4(fp)
10000304:	10c00015 	stw	r3,0(r2)
	temp=*otg_hpi_data;
10000308:	00801c04 	movi	r2,112
1000030c:	10800017 	ldw	r2,0(r2)
10000310:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000314:	00802004 	movi	r2,128
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000320:	00801804 	movi	r2,96
10000324:	00c00044 	movi	r3,1
10000328:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000032c:	00802804 	movi	r2,160
10000330:	00c00044 	movi	r3,1
10000334:	10c00005 	stb	r3,0(r2)
	return temp;
10000338:	e0bffe0b 	ldhu	r2,-8(fp)

}
1000033c:	e037883a 	mov	sp,fp
10000340:	df000017 	ldw	fp,0(sp)
10000344:	dec00104 	addi	sp,sp,4
10000348:	f800283a 	ret

1000034c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000034c:	defff904 	addi	sp,sp,-28
10000350:	dfc00615 	stw	ra,24(sp)
10000354:	df000515 	stw	fp,20(sp)
10000358:	df000504 	addi	fp,sp,20
	IO_init();
1000035c:	00001fc0 	call	100001fc <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000360:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10000364:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10000368:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
1000036c:	01040074 	movhi	r4,4097
10000370:	21067d04 	addi	r4,r4,6644
10000374:	00023400 	call	10002340 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000378:	000113c0 	call	1000113c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000037c:	000b883a 	mov	r5,zero
10000380:	01005104 	movi	r4,324
10000384:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000388:	017fffd4 	movui	r5,65535
1000038c:	01302414 	movui	r4,49296
10000390:	00010a00 	call	100010a0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000394:	01409604 	movi	r5,600
10000398:	01006d04 	movi	r4,436
1000039c:	00010a00 	call	100010a0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100003a0:	00811004 	movi	r2,1088
100003a4:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100003a8:	e0bffb0b 	ldhu	r2,-20(fp)
100003ac:	100b883a 	mov	r5,r2
100003b0:	01005084 	movi	r4,322
100003b4:	00010a00 	call	100010a0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003b8:	00808404 	movi	r2,528
100003bc:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003c0:	e0bffe0b 	ldhu	r2,-8(fp)
100003c4:	100b883a 	mov	r5,r2
100003c8:	01302314 	movui	r4,49292
100003cc:	00010a00 	call	100010a0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003d0:	000b883a 	mov	r5,zero
100003d4:	01007104 	movi	r4,452
100003d8:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003dc:	000b883a 	mov	r5,zero
100003e0:	01007184 	movi	r4,454
100003e4:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003e8:	000b883a 	mov	r5,zero
100003ec:	01007204 	movi	r4,456
100003f0:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003f4:	000b883a 	mov	r5,zero
100003f8:	01007284 	movi	r4,458
100003fc:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000400:	000b883a 	mov	r5,zero
10000404:	01007304 	movi	r4,460
10000408:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000040c:	000b883a 	mov	r5,zero
10000410:	01007384 	movi	r4,462
10000414:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000418:	000b883a 	mov	r5,zero
1000041c:	01007404 	movi	r4,464
10000420:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000424:	000b883a 	mov	r5,zero
10000428:	01007484 	movi	r4,466
1000042c:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000430:	000b883a 	mov	r5,zero
10000434:	01007504 	movi	r4,468
10000438:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000043c:	000b883a 	mov	r5,zero
10000440:	01007584 	movi	r4,470
10000444:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000448:	000b883a 	mov	r5,zero
1000044c:	01007604 	movi	r4,472
10000450:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000454:	000b883a 	mov	r5,zero
10000458:	01007684 	movi	r4,474
1000045c:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000460:	000b883a 	mov	r5,zero
10000464:	01007704 	movi	r4,476
10000468:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000046c:	000b883a 	mov	r5,zero
10000470:	01007784 	movi	r4,478
10000474:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000478:	01401c84 	movi	r5,114
1000047c:	01007084 	movi	r4,450
10000480:	00010a00 	call	100010a0 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000484:	01738054 	movui	r5,52737
10000488:	01000044 	movi	r4,1
1000048c:	00002500 	call	10000250 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000490:	0001883a 	nop
10000494:	010000c4 	movi	r4,3
10000498:	00002cc0 	call	100002cc <IO_read>
1000049c:	10bfffcc 	andi	r2,r2,65535
100004a0:	103ffc26 	beq	r2,zero,10000494 <__alt_data_end+0xf8000494>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100004a4:	00000806 	br	100004c8 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004a8:	01000044 	movi	r4,1
100004ac:	00002cc0 	call	100002cc <IO_read>
100004b0:	10bfffcc 	andi	r2,r2,65535
100004b4:	100b883a 	mov	r5,r2
100004b8:	01040074 	movhi	r4,4097
100004bc:	21068304 	addi	r4,r4,6668
100004c0:	00022440 	call	10002244 <printf>
		goto USB_HOT_PLUG;
100004c4:	003fac06 	br	10000378 <__alt_data_end+0xf8000378>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100004c8:	01000044 	movi	r4,1
100004cc:	00002cc0 	call	100002cc <IO_read>
100004d0:	10bfffcc 	andi	r2,r2,65535
100004d4:	1083fb58 	cmpnei	r2,r2,4077
100004d8:	103ff31e 	bne	r2,zero,100004a8 <__alt_data_end+0xf80004a8>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004dc:	01040074 	movhi	r4,4097
100004e0:	21068c04 	addi	r4,r4,6704
100004e4:	00022440 	call	10002244 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004e8:	01401d04 	movi	r5,116
100004ec:	01007084 	movi	r4,450
100004f0:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004f4:	01400f04 	movi	r5,60
100004f8:	01007104 	movi	r4,452
100004fc:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000500:	000b883a 	mov	r5,zero
10000504:	01007184 	movi	r4,454
10000508:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000050c:	000b883a 	mov	r5,zero
10000510:	01007204 	movi	r4,456
10000514:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000518:	000b883a 	mov	r5,zero
1000051c:	01007284 	movi	r4,458
10000520:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000524:	000b883a 	mov	r5,zero
10000528:	01007304 	movi	r4,460
1000052c:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000530:	000b883a 	mov	r5,zero
10000534:	01007384 	movi	r4,462
10000538:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000053c:	000b883a 	mov	r5,zero
10000540:	01007404 	movi	r4,464
10000544:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000548:	000b883a 	mov	r5,zero
1000054c:	01007484 	movi	r4,466
10000550:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000554:	000b883a 	mov	r5,zero
10000558:	01007504 	movi	r4,468
1000055c:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000560:	000b883a 	mov	r5,zero
10000564:	01007584 	movi	r4,470
10000568:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000056c:	000b883a 	mov	r5,zero
10000570:	01007604 	movi	r4,472
10000574:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000578:	000b883a 	mov	r5,zero
1000057c:	01007684 	movi	r4,474
10000580:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000584:	000b883a 	mov	r5,zero
10000588:	01007704 	movi	r4,476
1000058c:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000590:	000b883a 	mov	r5,zero
10000594:	01007784 	movi	r4,478
10000598:	00010a00 	call	100010a0 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000059c:	01738054 	movui	r5,52737
100005a0:	01000044 	movi	r4,1
100005a4:	00002500 	call	10000250 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100005a8:	0001883a 	nop
100005ac:	01000044 	movi	r4,1
100005b0:	00002cc0 	call	100002cc <IO_read>
100005b4:	10bfffcc 	andi	r2,r2,65535
100005b8:	1083fb58 	cmpnei	r2,r2,4077
100005bc:	10000826 	beq	r2,zero,100005e0 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005c0:	01000044 	movi	r4,1
100005c4:	00002cc0 	call	100002cc <IO_read>
100005c8:	10bfffcc 	andi	r2,r2,65535
100005cc:	100b883a 	mov	r5,r2
100005d0:	01040074 	movhi	r4,4097
100005d4:	21068304 	addi	r4,r4,6668
100005d8:	00022440 	call	10002244 <printf>
		goto USB_HOT_PLUG;
100005dc:	003f6606 	br	10000378 <__alt_data_end+0xf8000378>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005e0:	00b02284 	movi	r2,-16246
100005e4:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005e8:	008c0004 	movi	r2,12288
100005ec:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005f0:	00880004 	movi	r2,8192
100005f4:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005f8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005fc:	10bfffcc 	andi	r2,r2,65535
10000600:	1009883a 	mov	r4,r2
10000604:	00010f80 	call	100010f8 <UsbRead>
10000608:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
1000060c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000610:	e0fffb0b 	ldhu	r3,-20(fp)
10000614:	1884703a 	and	r2,r3,r2
10000618:	10bfffcc 	andi	r2,r2,65535
1000061c:	1000351e 	bne	r2,zero,100006f4 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000620:	e03ffbc5 	stb	zero,-17(fp)
10000624:	00000f06 	br	10000664 <main+0x318>
		{
			usleep(5*1000);
10000628:	0104e204 	movi	r4,5000
1000062c:	000fa0c0 	call	1000fa0c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000630:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000634:	10bfffcc 	andi	r2,r2,65535
10000638:	1009883a 	mov	r4,r2
1000063c:	00010f80 	call	100010f8 <UsbRead>
10000640:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10000644:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000648:	e0fffb0b 	ldhu	r3,-20(fp)
1000064c:	1884703a 	and	r2,r3,r2
10000650:	10bfffcc 	andi	r2,r2,65535
10000654:	1000071e 	bne	r2,zero,10000674 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000658:	e0bffbc3 	ldbu	r2,-17(fp)
1000065c:	10800044 	addi	r2,r2,1
10000660:	e0bffbc5 	stb	r2,-17(fp)
10000664:	e0bffbc3 	ldbu	r2,-17(fp)
10000668:	10800170 	cmpltui	r2,r2,5
1000066c:	103fee1e 	bne	r2,zero,10000628 <__alt_data_end+0xf8000628>
10000670:	00000106 	br	10000678 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000674:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000678:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000067c:	e0fffb0b 	ldhu	r3,-20(fp)
10000680:	1884703a 	and	r2,r3,r2
10000684:	10bfffcc 	andi	r2,r2,65535
10000688:	1000261e 	bne	r2,zero,10000724 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000068c:	01040074 	movhi	r4,4097
10000690:	21069004 	addi	r4,r4,6720
10000694:	00023400 	call	10002340 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000698:	01040074 	movhi	r4,4097
1000069c:	21069a04 	addi	r4,r4,6760
100006a0:	00023400 	call	10002340 <puts>
			while (!(usb_ctl_val & no_device))
100006a4:	00000d06 	br	100006dc <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100006a8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	1009883a 	mov	r4,r2
100006b4:	00010f80 	call	100010f8 <UsbRead>
100006b8:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
100006bc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006c0:	e0fffb0b 	ldhu	r3,-20(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	10000126 	beq	r2,zero,100006d4 <main+0x388>
					goto USB_HOT_PLUG;
100006d0:	003f2906 	br	10000378 <__alt_data_end+0xf8000378>

				usleep(2000);
100006d4:	0101f404 	movi	r4,2000
100006d8:	000fa0c0 	call	1000fa0c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006dc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006e0:	e0fffb0b 	ldhu	r3,-20(fp)
100006e4:	1884703a 	and	r2,r3,r2
100006e8:	10bfffcc 	andi	r2,r2,65535
100006ec:	103fee26 	beq	r2,zero,100006a8 <__alt_data_end+0xf80006a8>
100006f0:	00000c06 	br	10000724 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006f4:	e0fffb0b 	ldhu	r3,-20(fp)
100006f8:	e0bffc0b 	ldhu	r2,-16(fp)
100006fc:	1884703a 	and	r2,r3,r2
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	10000426 	beq	r2,zero,10000718 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10000708:	01040074 	movhi	r4,4097
1000070c:	2106a604 	addi	r4,r4,6808
10000710:	00023400 	call	10002340 <puts>
10000714:	00000306 	br	10000724 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000718:	01040074 	movhi	r4,4097
1000071c:	2106ad04 	addi	r4,r4,6836
10000720:	00023400 	call	10002340 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000724:	00011f00 	call	100011f0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000728:	00000306 	br	10000738 <main+0x3ec>
	{
		UsbSetAddress();
1000072c:	00011f00 	call	100011f0 <UsbSetAddress>
		usleep(10*1000);
10000730:	0109c404 	movi	r4,10000
10000734:	000fa0c0 	call	1000fa0c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000738:	010000c4 	movi	r4,3
1000073c:	00002cc0 	call	100002cc <IO_read>
10000740:	10bfffcc 	andi	r2,r2,65535
10000744:	1080040c 	andi	r2,r2,16
10000748:	103ff826 	beq	r2,zero,1000072c <__alt_data_end+0xf800072c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000074c:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000750:	01414184 	movi	r5,1286
10000754:	01000084 	movi	r4,2
10000758:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000075c:	0009883a 	mov	r4,zero
10000760:	00002cc0 	call	100002cc <IO_read>
10000764:	10bfffcc 	andi	r2,r2,65535
10000768:	100b883a 	mov	r5,r2
1000076c:	01040074 	movhi	r4,4097
10000770:	2106b404 	addi	r4,r4,6864
10000774:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000778:	01414204 	movi	r5,1288
1000077c:	01000084 	movi	r4,2
10000780:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000784:	0009883a 	mov	r4,zero
10000788:	00002cc0 	call	100002cc <IO_read>
1000078c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000790:	e0bffb0b 	ldhu	r2,-20(fp)
10000794:	100b883a 	mov	r5,r2
10000798:	01040074 	movhi	r4,4097
1000079c:	2106bf04 	addi	r4,r4,6908
100007a0:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100007a4:	e0bffb0b 	ldhu	r2,-20(fp)
100007a8:	108000e0 	cmpeqi	r2,r2,3
100007ac:	1000031e 	bne	r2,zero,100007bc <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007b0:	00021140 	call	10002114 <UsbGetRetryCnt>
100007b4:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
100007b8:	003eef06 	br	10000378 <__alt_data_end+0xf8000378>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007bc:	01040074 	movhi	r4,4097
100007c0:	2106cb04 	addi	r4,r4,6956
100007c4:	00023400 	call	10002340 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007c8:	00012f00 	call	100012f0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007cc:	00000306 	br	100007dc <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007d0:	00012f00 	call	100012f0 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007d4:	0109c404 	movi	r4,10000
100007d8:	000fa0c0 	call	1000fa0c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007dc:	010000c4 	movi	r4,3
100007e0:	00002cc0 	call	100002cc <IO_read>
100007e4:	10bfffcc 	andi	r2,r2,65535
100007e8:	1080040c 	andi	r2,r2,16
100007ec:	103ff826 	beq	r2,zero,100007d0 <__alt_data_end+0xf80007d0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007f0:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007f4:	01414184 	movi	r5,1286
100007f8:	01000084 	movi	r4,2
100007fc:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000800:	0009883a 	mov	r4,zero
10000804:	00002cc0 	call	100002cc <IO_read>
10000808:	10bfffcc 	andi	r2,r2,65535
1000080c:	100b883a 	mov	r5,r2
10000810:	01040074 	movhi	r4,4097
10000814:	2106da04 	addi	r4,r4,7016
10000818:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
1000081c:	01414204 	movi	r5,1288
10000820:	01000084 	movi	r4,2
10000824:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000828:	0009883a 	mov	r4,zero
1000082c:	00002cc0 	call	100002cc <IO_read>
10000830:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000834:	e0bffb0b 	ldhu	r2,-20(fp)
10000838:	100b883a 	mov	r5,r2
1000083c:	01040074 	movhi	r4,4097
10000840:	2106e504 	addi	r4,r4,7060
10000844:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000848:	00000206 	br	10000854 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000084c:	00021140 	call	10002114 <UsbGetRetryCnt>
10000850:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000854:	e0bffb0b 	ldhu	r2,-20(fp)
10000858:	108000d8 	cmpnei	r2,r2,3
1000085c:	103ffb1e 	bne	r2,zero,1000084c <__alt_data_end+0xf800084c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000860:	01040074 	movhi	r4,4097
10000864:	2106f104 	addi	r4,r4,7108
10000868:	00023400 	call	10002340 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000086c:	00014380 	call	10001438 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	00000306 	br	10000880 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000874:	00014380 	call	10001438 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000878:	0109c404 	movi	r4,10000
1000087c:	000fa0c0 	call	1000fa0c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000880:	010000c4 	movi	r4,3
10000884:	00002cc0 	call	100002cc <IO_read>
10000888:	10bfffcc 	andi	r2,r2,65535
1000088c:	1080040c 	andi	r2,r2,16
10000890:	103ff826 	beq	r2,zero,10000874 <__alt_data_end+0xf8000874>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000894:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000898:	01414184 	movi	r5,1286
1000089c:	01000084 	movi	r4,2
100008a0:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008a4:	0009883a 	mov	r4,zero
100008a8:	00002cc0 	call	100002cc <IO_read>
100008ac:	10bfffcc 	andi	r2,r2,65535
100008b0:	100b883a 	mov	r5,r2
100008b4:	01040074 	movhi	r4,4097
100008b8:	2106da04 	addi	r4,r4,7016
100008bc:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
100008c0:	01414204 	movi	r5,1288
100008c4:	01000084 	movi	r4,2
100008c8:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008cc:	0009883a 	mov	r4,zero
100008d0:	00002cc0 	call	100002cc <IO_read>
100008d4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008d8:	e0bffb0b 	ldhu	r2,-20(fp)
100008dc:	100b883a 	mov	r5,r2
100008e0:	01040074 	movhi	r4,4097
100008e4:	2106e504 	addi	r4,r4,7060
100008e8:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
100008ec:	00000206 	br	100008f8 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008f0:	00021140 	call	10002114 <UsbGetRetryCnt>
100008f4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008f8:	e0bffb0b 	ldhu	r2,-20(fp)
100008fc:	108000d8 	cmpnei	r2,r2,3
10000900:	103ffb1e 	bne	r2,zero,100008f0 <__alt_data_end+0xf80008f0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000904:	01040074 	movhi	r4,4097
10000908:	21070504 	addi	r4,r4,7188
1000090c:	00023400 	call	10002340 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000910:	00016100 	call	10001610 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	00000306 	br	10000924 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000918:	00016100 	call	10001610 <UsbGetConfigDesc1>
		usleep(10*1000);
1000091c:	0109c404 	movi	r4,10000
10000920:	000fa0c0 	call	1000fa0c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000924:	010000c4 	movi	r4,3
10000928:	00002cc0 	call	100002cc <IO_read>
1000092c:	10bfffcc 	andi	r2,r2,65535
10000930:	1080040c 	andi	r2,r2,16
10000934:	103ff826 	beq	r2,zero,10000918 <__alt_data_end+0xf8000918>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000938:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000093c:	01414184 	movi	r5,1286
10000940:	01000084 	movi	r4,2
10000944:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000948:	0009883a 	mov	r4,zero
1000094c:	00002cc0 	call	100002cc <IO_read>
10000950:	10bfffcc 	andi	r2,r2,65535
10000954:	100b883a 	mov	r5,r2
10000958:	01040074 	movhi	r4,4097
1000095c:	21071704 	addi	r4,r4,7260
10000960:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000964:	01414204 	movi	r5,1288
10000968:	01000084 	movi	r4,2
1000096c:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000970:	0009883a 	mov	r4,zero
10000974:	00002cc0 	call	100002cc <IO_read>
10000978:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000097c:	e0bffb0b 	ldhu	r2,-20(fp)
10000980:	100b883a 	mov	r5,r2
10000984:	01040074 	movhi	r4,4097
10000988:	21072204 	addi	r4,r4,7304
1000098c:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000990:	00000206 	br	1000099c <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000994:	00021140 	call	10002114 <UsbGetRetryCnt>
10000998:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000099c:	e0bffb0b 	ldhu	r2,-20(fp)
100009a0:	108000d8 	cmpnei	r2,r2,3
100009a4:	103ffb1e 	bne	r2,zero,10000994 <__alt_data_end+0xf8000994>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100009a8:	01040074 	movhi	r4,4097
100009ac:	21072e04 	addi	r4,r4,7352
100009b0:	00023400 	call	10002340 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009b4:	00017a00 	call	100017a0 <UsbGetConfigDesc2>

	usleep(100*1000);
100009b8:	010000b4 	movhi	r4,2
100009bc:	2121a804 	addi	r4,r4,-31072
100009c0:	000fa0c0 	call	1000fa0c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c4:	00000306 	br	100009d4 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009c8:	00017a00 	call	100017a0 <UsbGetConfigDesc2>
		usleep(10*1000);
100009cc:	0109c404 	movi	r4,10000
100009d0:	000fa0c0 	call	1000fa0c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009d4:	010000c4 	movi	r4,3
100009d8:	00002cc0 	call	100002cc <IO_read>
100009dc:	10bfffcc 	andi	r2,r2,65535
100009e0:	1080040c 	andi	r2,r2,16
100009e4:	103ff826 	beq	r2,zero,100009c8 <__alt_data_end+0xf80009c8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009e8:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009ec:	01414184 	movi	r5,1286
100009f0:	01000084 	movi	r4,2
100009f4:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009f8:	0009883a 	mov	r4,zero
100009fc:	00002cc0 	call	100002cc <IO_read>
10000a00:	10bfffcc 	andi	r2,r2,65535
10000a04:	100b883a 	mov	r5,r2
10000a08:	01040074 	movhi	r4,4097
10000a0c:	21074104 	addi	r4,r4,7428
10000a10:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a14:	01414204 	movi	r5,1288
10000a18:	01000084 	movi	r4,2
10000a1c:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a20:	0009883a 	mov	r4,zero
10000a24:	00002cc0 	call	100002cc <IO_read>
10000a28:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a2c:	e0bffb0b 	ldhu	r2,-20(fp)
10000a30:	100b883a 	mov	r5,r2
10000a34:	01040074 	movhi	r4,4097
10000a38:	21074c04 	addi	r4,r4,7472
10000a3c:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000a40:	00000206 	br	10000a4c <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a44:	00021140 	call	10002114 <UsbGetRetryCnt>
10000a48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a4c:	e0bffb0b 	ldhu	r2,-20(fp)
10000a50:	108000d8 	cmpnei	r2,r2,3
10000a54:	103ffb1e 	bne	r2,zero,10000a44 <__alt_data_end+0xf8000a44>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a58:	01040074 	movhi	r4,4097
10000a5c:	21075804 	addi	r4,r4,7520
10000a60:	00023400 	call	10002340 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a64:	01415b04 	movi	r5,1388
10000a68:	01000084 	movi	r4,2
10000a6c:	00002500 	call	10000250 <IO_write>
	code = IO_read(HPI_DATA);
10000a70:	0009883a 	mov	r4,zero
10000a74:	00002cc0 	call	100002cc <IO_read>
10000a78:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000a7c:	e0bffe8b 	ldhu	r2,-6(fp)
10000a80:	108000cc 	andi	r2,r2,3
10000a84:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000a88:	e0bffe8b 	ldhu	r2,-6(fp)
10000a8c:	100b883a 	mov	r5,r2
10000a90:	01040074 	movhi	r4,4097
10000a94:	21076b04 	addi	r4,r4,7596
10000a98:	00022440 	call	10002244 <printf>

	if (code == 0x01)
10000a9c:	e0bffe8b 	ldhu	r2,-6(fp)
10000aa0:	10800058 	cmpnei	r2,r2,1
10000aa4:	1000041e 	bne	r2,zero,10000ab8 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000aa8:	01040074 	movhi	r4,4097
10000aac:	21076e04 	addi	r4,r4,7608
10000ab0:	00023400 	call	10002340 <puts>
10000ab4:	00000306 	br	10000ac4 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000ab8:	01040074 	movhi	r4,4097
10000abc:	21077d04 	addi	r4,r4,7668
10000ac0:	00023400 	call	10002340 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000ac4:	01415d84 	movi	r5,1398
10000ac8:	01000084 	movi	r4,2
10000acc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ad0:	0141cfc4 	movi	r5,1855
10000ad4:	0009883a 	mov	r4,zero
10000ad8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000adc:	01604154 	movui	r5,33029
10000ae0:	0009883a 	mov	r4,zero
10000ae4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ae8:	014000c4 	movi	r5,3
10000aec:	0009883a 	mov	r4,zero
10000af0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000af4:	01400204 	movi	r5,8
10000af8:	0009883a 	mov	r4,zero
10000afc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b00:	016b0294 	movui	r5,44042
10000b04:	0009883a 	mov	r4,zero
10000b08:	00002500 	call	10000250 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b0c:	01415d84 	movi	r5,1398
10000b10:	01006c04 	movi	r4,432
10000b14:	00010a00 	call	100010a0 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b18:	01415f04 	movi	r5,1404
10000b1c:	01000084 	movi	r4,2
10000b20:	00002500 	call	10000250 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b24:	0009883a 	mov	r4,zero
10000b28:	00002cc0 	call	100002cc <IO_read>
10000b2c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b30:	e0bfff03 	ldbu	r2,-4(fp)
10000b34:	100b883a 	mov	r5,r2
10000b38:	01040074 	movhi	r4,4097
10000b3c:	21078604 	addi	r4,r4,7704
10000b40:	00022440 	call	10002244 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b44:	0001a080 	call	10001a08 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b48:	00000306 	br	10000b58 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b4c:	0001a080 	call	10001a08 <UsbSetConfig>
		usleep(10*1000);
10000b50:	0109c404 	movi	r4,10000
10000b54:	000fa0c0 	call	1000fa0c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b58:	010000c4 	movi	r4,3
10000b5c:	00002cc0 	call	100002cc <IO_read>
10000b60:	10bfffcc 	andi	r2,r2,65535
10000b64:	1080040c 	andi	r2,r2,16
10000b68:	103ff826 	beq	r2,zero,10000b4c <__alt_data_end+0xf8000b4c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b6c:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b70:	01414184 	movi	r5,1286
10000b74:	01000084 	movi	r4,2
10000b78:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b7c:	0009883a 	mov	r4,zero
10000b80:	00002cc0 	call	100002cc <IO_read>
10000b84:	10bfffcc 	andi	r2,r2,65535
10000b88:	100b883a 	mov	r5,r2
10000b8c:	01040074 	movhi	r4,4097
10000b90:	21079004 	addi	r4,r4,7744
10000b94:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b98:	01414204 	movi	r5,1288
10000b9c:	01000084 	movi	r4,2
10000ba0:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ba4:	0009883a 	mov	r4,zero
10000ba8:	00002cc0 	call	100002cc <IO_read>
10000bac:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000bb0:	e0bffb0b 	ldhu	r2,-20(fp)
10000bb4:	100b883a 	mov	r5,r2
10000bb8:	01040074 	movhi	r4,4097
10000bbc:	21079b04 	addi	r4,r4,7788
10000bc0:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000bc4:	00000206 	br	10000bd0 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bc8:	00021140 	call	10002114 <UsbGetRetryCnt>
10000bcc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bd0:	e0bffb0b 	ldhu	r2,-20(fp)
10000bd4:	108000d8 	cmpnei	r2,r2,3
10000bd8:	103ffb1e 	bne	r2,zero,10000bc8 <__alt_data_end+0xf8000bc8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bdc:	01040074 	movhi	r4,4097
10000be0:	2107a704 	addi	r4,r4,7836
10000be4:	00023400 	call	10002340 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000be8:	0001b080 	call	10001b08 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bec:	00000306 	br	10000bfc <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bf0:	0001b080 	call	10001b08 <UsbClassRequest>
		usleep(10*1000);
10000bf4:	0109c404 	movi	r4,10000
10000bf8:	000fa0c0 	call	1000fa0c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bfc:	010000c4 	movi	r4,3
10000c00:	00002cc0 	call	100002cc <IO_read>
10000c04:	10bfffcc 	andi	r2,r2,65535
10000c08:	1080040c 	andi	r2,r2,16
10000c0c:	103ff826 	beq	r2,zero,10000bf0 <__alt_data_end+0xf8000bf0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c10:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c14:	01414184 	movi	r5,1286
10000c18:	01000084 	movi	r4,2
10000c1c:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c20:	0009883a 	mov	r4,zero
10000c24:	00002cc0 	call	100002cc <IO_read>
10000c28:	10bfffcc 	andi	r2,r2,65535
10000c2c:	100b883a 	mov	r5,r2
10000c30:	01040074 	movhi	r4,4097
10000c34:	2107b904 	addi	r4,r4,7908
10000c38:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c3c:	01414204 	movi	r5,1288
10000c40:	01000084 	movi	r4,2
10000c44:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c48:	0009883a 	mov	r4,zero
10000c4c:	00002cc0 	call	100002cc <IO_read>
10000c50:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c54:	e0bffb0b 	ldhu	r2,-20(fp)
10000c58:	100b883a 	mov	r5,r2
10000c5c:	01040074 	movhi	r4,4097
10000c60:	2107c404 	addi	r4,r4,7952
10000c64:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000c68:	00000206 	br	10000c74 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c6c:	00021140 	call	10002114 <UsbGetRetryCnt>
10000c70:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c74:	e0bffb0b 	ldhu	r2,-20(fp)
10000c78:	108000d8 	cmpnei	r2,r2,3
10000c7c:	103ffb1e 	bne	r2,zero,10000c6c <__alt_data_end+0xf8000c6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c80:	01040074 	movhi	r4,4097
10000c84:	2107d004 	addi	r4,r4,8000
10000c88:	00023400 	call	10002340 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c8c:	0001c080 	call	10001c08 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	00000306 	br	10000ca0 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c94:	0001c080 	call	10001c08 <UsbGetHidDesc>
		usleep(10*1000);
10000c98:	0109c404 	movi	r4,10000
10000c9c:	000fa0c0 	call	1000fa0c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca0:	010000c4 	movi	r4,3
10000ca4:	00002cc0 	call	100002cc <IO_read>
10000ca8:	10bfffcc 	andi	r2,r2,65535
10000cac:	1080040c 	andi	r2,r2,16
10000cb0:	103ff826 	beq	r2,zero,10000c94 <__alt_data_end+0xf8000c94>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cb4:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cb8:	01414184 	movi	r5,1286
10000cbc:	01000084 	movi	r4,2
10000cc0:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cc4:	0009883a 	mov	r4,zero
10000cc8:	00002cc0 	call	100002cc <IO_read>
10000ccc:	10bfffcc 	andi	r2,r2,65535
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	01040074 	movhi	r4,4097
10000cd8:	2107b904 	addi	r4,r4,7908
10000cdc:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ce0:	01414204 	movi	r5,1288
10000ce4:	01000084 	movi	r4,2
10000ce8:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cec:	0009883a 	mov	r4,zero
10000cf0:	00002cc0 	call	100002cc <IO_read>
10000cf4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cf8:	e0bffb0b 	ldhu	r2,-20(fp)
10000cfc:	100b883a 	mov	r5,r2
10000d00:	01040074 	movhi	r4,4097
10000d04:	2107c404 	addi	r4,r4,7952
10000d08:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000d0c:	00000206 	br	10000d18 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d10:	00021140 	call	10002114 <UsbGetRetryCnt>
10000d14:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d18:	e0bffb0b 	ldhu	r2,-20(fp)
10000d1c:	108000d8 	cmpnei	r2,r2,3
10000d20:	103ffb1e 	bne	r2,zero,10000d10 <__alt_data_end+0xf8000d10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d24:	01040074 	movhi	r4,4097
10000d28:	2107e204 	addi	r4,r4,8072
10000d2c:	00023400 	call	10002340 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d30:	0001d500 	call	10001d50 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	00000306 	br	10000d44 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d38:	0001d500 	call	10001d50 <UsbGetReportDesc>
		usleep(10*1000);
10000d3c:	0109c404 	movi	r4,10000
10000d40:	000fa0c0 	call	1000fa0c <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d44:	010000c4 	movi	r4,3
10000d48:	00002cc0 	call	100002cc <IO_read>
10000d4c:	10bfffcc 	andi	r2,r2,65535
10000d50:	1080040c 	andi	r2,r2,16
10000d54:	103ff826 	beq	r2,zero,10000d38 <__alt_data_end+0xf8000d38>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d58:	00020900 	call	10002090 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d5c:	01414184 	movi	r5,1286
10000d60:	01000084 	movi	r4,2
10000d64:	00002500 	call	10000250 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d68:	0009883a 	mov	r4,zero
10000d6c:	00002cc0 	call	100002cc <IO_read>
10000d70:	10bfffcc 	andi	r2,r2,65535
10000d74:	100b883a 	mov	r5,r2
10000d78:	01040074 	movhi	r4,4097
10000d7c:	2107f604 	addi	r4,r4,8152
10000d80:	00022440 	call	10002244 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d84:	01414204 	movi	r5,1288
10000d88:	01000084 	movi	r4,2
10000d8c:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d90:	0009883a 	mov	r4,zero
10000d94:	00002cc0 	call	100002cc <IO_read>
10000d98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d9c:	e0bffb0b 	ldhu	r2,-20(fp)
10000da0:	100b883a 	mov	r5,r2
10000da4:	01040074 	movhi	r4,4097
10000da8:	21080204 	addi	r4,r4,8200
10000dac:	00022440 	call	10002244 <printf>
	while (usb_ctl_val != 0x03)
10000db0:	00000206 	br	10000dbc <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000db4:	00021140 	call	10002114 <UsbGetRetryCnt>
10000db8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dbc:	e0bffb0b 	ldhu	r2,-20(fp)
10000dc0:	108000d8 	cmpnei	r2,r2,3
10000dc4:	103ffb1e 	bne	r2,zero,10000db4 <__alt_data_end+0xf8000db4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000dc8:	01040074 	movhi	r4,4097
10000dcc:	21080e04 	addi	r4,r4,8248
10000dd0:	00023400 	call	10002340 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000dd4:	0109c404 	movi	r4,10000
10000dd8:	000fa0c0 	call	1000fa0c <usleep>
	while(1)
	{
		toggle++;
10000ddc:	e0bffb83 	ldbu	r2,-18(fp)
10000de0:	10800044 	addi	r2,r2,1
10000de4:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000de8:	01414004 	movi	r5,1280
10000dec:	01000084 	movi	r4,2
10000df0:	00002500 	call	10000250 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000df4:	01414704 	movi	r5,1308
10000df8:	0009883a 	mov	r4,zero
10000dfc:	00002500 	call	10000250 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e00:	e0bfff03 	ldbu	r2,-4(fp)
10000e04:	108003cc 	andi	r2,r2,15
10000e08:	100b883a 	mov	r5,r2
10000e0c:	0009883a 	mov	r4,zero
10000e10:	00002500 	call	10000250 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e14:	0140a444 	movi	r5,657
10000e18:	0009883a 	mov	r4,zero
10000e1c:	00002500 	call	10000250 <IO_write>
		if(toggle%2)
10000e20:	e0bffb83 	ldbu	r2,-18(fp)
10000e24:	1080004c 	andi	r2,r2,1
10000e28:	10803fcc 	andi	r2,r2,255
10000e2c:	10000426 	beq	r2,zero,10000e40 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000e30:	01400044 	movi	r5,1
10000e34:	0009883a 	mov	r4,zero
10000e38:	00002500 	call	10000250 <IO_write>
10000e3c:	00000306 	br	10000e4c <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e40:	01401044 	movi	r5,65
10000e44:	0009883a 	mov	r4,zero
10000e48:	00002500 	call	10000250 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e4c:	014004c4 	movi	r5,19
10000e50:	0009883a 	mov	r4,zero
10000e54:	00002500 	call	10000250 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e58:	000b883a 	mov	r5,zero
10000e5c:	0009883a 	mov	r4,zero
10000e60:	00002500 	call	10000250 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e64:	01414004 	movi	r5,1280
10000e68:	01006c04 	movi	r4,432
10000e6c:	00010a00 	call	100010a0 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e70:	00002406 	br	10000f04 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e74:	01414004 	movi	r5,1280
10000e78:	01000084 	movi	r4,2
10000e7c:	00002500 	call	10000250 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e80:	01414704 	movi	r5,1308
10000e84:	0009883a 	mov	r4,zero
10000e88:	00002500 	call	10000250 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e8c:	e0bfff03 	ldbu	r2,-4(fp)
10000e90:	108003cc 	andi	r2,r2,15
10000e94:	100b883a 	mov	r5,r2
10000e98:	0009883a 	mov	r4,zero
10000e9c:	00002500 	call	10000250 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ea0:	0140a444 	movi	r5,657
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	00002500 	call	10000250 <IO_write>
			if(toggle%2)
10000eac:	e0bffb83 	ldbu	r2,-18(fp)
10000eb0:	1080004c 	andi	r2,r2,1
10000eb4:	10803fcc 	andi	r2,r2,255
10000eb8:	10000426 	beq	r2,zero,10000ecc <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000ebc:	01400044 	movi	r5,1
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	00002500 	call	10000250 <IO_write>
10000ec8:	00000306 	br	10000ed8 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000ecc:	01401044 	movi	r5,65
10000ed0:	0009883a 	mov	r4,zero
10000ed4:	00002500 	call	10000250 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ed8:	014004c4 	movi	r5,19
10000edc:	0009883a 	mov	r4,zero
10000ee0:	00002500 	call	10000250 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000ee4:	000b883a 	mov	r5,zero
10000ee8:	0009883a 	mov	r4,zero
10000eec:	00002500 	call	10000250 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ef0:	01414004 	movi	r5,1280
10000ef4:	01006c04 	movi	r4,432
10000ef8:	00010a00 	call	100010a0 <UsbWrite>
			usleep(10*1000);
10000efc:	0109c404 	movi	r4,10000
10000f00:	000fa0c0 	call	1000fa0c <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f04:	010000c4 	movi	r4,3
10000f08:	00002cc0 	call	100002cc <IO_read>
10000f0c:	10bfffcc 	andi	r2,r2,65535
10000f10:	1080040c 	andi	r2,r2,16
10000f14:	103fd726 	beq	r2,zero,10000e74 <__alt_data_end+0xf8000e74>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000f18:	00020900 	call	10002090 <UsbWaitTDListDone>
10000f1c:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000f20:	01414784 	movi	r5,1310
10000f24:	01000084 	movi	r4,2
10000f28:	00002500 	call	10000250 <IO_write>
		keycode = IO_read(HPI_DATA);
10000f2c:	0009883a 	mov	r4,zero
10000f30:	00002cc0 	call	100002cc <IO_read>
10000f34:	10bfffcc 	andi	r2,r2,65535
10000f38:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000f3c:	e17ffd17 	ldw	r5,-12(fp)
10000f40:	01040074 	movhi	r4,4097
10000f44:	21082204 	addi	r4,r4,8328
10000f48:	00022440 	call	10002244 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000f4c:	e0bffd17 	ldw	r2,-12(fp)
10000f50:	10c03fcc 	andi	r3,r2,255
10000f54:	00802c04 	movi	r2,176
10000f58:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000f5c:	01003204 	movi	r4,200
10000f60:	000fa0c0 	call	1000fa0c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000f64:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f68:	10bfffcc 	andi	r2,r2,65535
10000f6c:	1009883a 	mov	r4,r2
10000f70:	00010f80 	call	100010f8 <UsbRead>
10000f74:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000f78:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f7c:	e0fffb0b 	ldhu	r3,-20(fp)
10000f80:	1884703a 	and	r2,r3,r2
10000f84:	10bfffcc 	andi	r2,r2,65535
10000f88:	10003f1e 	bne	r2,zero,10001088 <main+0xd3c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f8c:	e03ffbc5 	stb	zero,-17(fp)
10000f90:	00000f06 	br	10000fd0 <main+0xc84>
			{
				usleep(5*1000);
10000f94:	0104e204 	movi	r4,5000
10000f98:	000fa0c0 	call	1000fa0c <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000f9c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fa0:	10bfffcc 	andi	r2,r2,65535
10000fa4:	1009883a 	mov	r4,r2
10000fa8:	00010f80 	call	100010f8 <UsbRead>
10000fac:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10000fb0:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fb4:	e0fffb0b 	ldhu	r3,-20(fp)
10000fb8:	1884703a 	and	r2,r3,r2
10000fbc:	10bfffcc 	andi	r2,r2,65535
10000fc0:	1000071e 	bne	r2,zero,10000fe0 <main+0xc94>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000fc4:	e0bffbc3 	ldbu	r2,-17(fp)
10000fc8:	10800044 	addi	r2,r2,1
10000fcc:	e0bffbc5 	stb	r2,-17(fp)
10000fd0:	e0bffbc3 	ldbu	r2,-17(fp)
10000fd4:	108001f0 	cmpltui	r2,r2,7
10000fd8:	103fee1e 	bne	r2,zero,10000f94 <__alt_data_end+0xf8000f94>
10000fdc:	00000106 	br	10000fe4 <main+0xc98>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10000fe0:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10000fe4:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fe8:	e0fffb0b 	ldhu	r3,-20(fp)
10000fec:	1884703a 	and	r2,r3,r2
10000ff0:	10bfffcc 	andi	r2,r2,65535
10000ff4:	1000241e 	bne	r2,zero,10001088 <main+0xd3c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10000ff8:	01040074 	movhi	r4,4097
10000ffc:	21082b04 	addi	r4,r4,8364
10001000:	00023400 	call	10002340 <puts>
				printf("[INFO]: please insert again!!! \n");
10001004:	01040074 	movhi	r4,4097
10001008:	21083604 	addi	r4,r4,8408
1000100c:	00023400 	call	10002340 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001010:	00001d06 	br	10001088 <main+0xd3c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001014:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001018:	10bfffcc 	andi	r2,r2,65535
1000101c:	1009883a 	mov	r4,r2
10001020:	00010f80 	call	100010f8 <UsbRead>
10001024:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001028:	0104e204 	movi	r4,5000
1000102c:	000fa0c0 	call	1000fa0c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001030:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001034:	10bfffcc 	andi	r2,r2,65535
10001038:	1009883a 	mov	r4,r2
1000103c:	00010f80 	call	100010f8 <UsbRead>
10001040:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001044:	0104e204 	movi	r4,5000
10001048:	000fa0c0 	call	1000fa0c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000104c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001050:	10bfffcc 	andi	r2,r2,65535
10001054:	1009883a 	mov	r4,r2
10001058:	00010f80 	call	100010f8 <UsbRead>
1000105c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001060:	0104e204 	movi	r4,5000
10001064:	000fa0c0 	call	1000fa0c <usleep>

			if(usb_ctl_val & no_device)
10001068:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000106c:	e0fffb0b 	ldhu	r3,-20(fp)
10001070:	1884703a 	and	r2,r3,r2
10001074:	10bfffcc 	andi	r2,r2,65535
10001078:	10000126 	beq	r2,zero,10001080 <main+0xd34>
				goto USB_HOT_PLUG;
1000107c:	003cbe06 	br	10000378 <__alt_data_end+0xf8000378>

			usleep(200);
10001080:	01003204 	movi	r4,200
10001084:	000fa0c0 	call	1000fa0c <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001088:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000108c:	e0fffb0b 	ldhu	r3,-20(fp)
10001090:	1884703a 	and	r2,r3,r2
10001094:	10bfffcc 	andi	r2,r2,65535
10001098:	103fde26 	beq	r2,zero,10001014 <__alt_data_end+0xf8001014>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
1000109c:	003f4f06 	br	10000ddc <__alt_data_end+0xf8000ddc>

100010a0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100010a0:	defffc04 	addi	sp,sp,-16
100010a4:	dfc00315 	stw	ra,12(sp)
100010a8:	df000215 	stw	fp,8(sp)
100010ac:	df000204 	addi	fp,sp,8
100010b0:	2007883a 	mov	r3,r4
100010b4:	2805883a 	mov	r2,r5
100010b8:	e0fffe0d 	sth	r3,-8(fp)
100010bc:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
100010c0:	e0bffe0b 	ldhu	r2,-8(fp)
100010c4:	100b883a 	mov	r5,r2
100010c8:	01000084 	movi	r4,2
100010cc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,Data);
100010d0:	e0bfff0b 	ldhu	r2,-4(fp)
100010d4:	100b883a 	mov	r5,r2
100010d8:	0009883a 	mov	r4,zero
100010dc:	00002500 	call	10000250 <IO_write>
}
100010e0:	0001883a 	nop
100010e4:	e037883a 	mov	sp,fp
100010e8:	dfc00117 	ldw	ra,4(sp)
100010ec:	df000017 	ldw	fp,0(sp)
100010f0:	dec00204 	addi	sp,sp,8
100010f4:	f800283a 	ret

100010f8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100010f8:	defffd04 	addi	sp,sp,-12
100010fc:	dfc00215 	stw	ra,8(sp)
10001100:	df000115 	stw	fp,4(sp)
10001104:	df000104 	addi	fp,sp,4
10001108:	2005883a 	mov	r2,r4
1000110c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10001110:	e0bfff0b 	ldhu	r2,-4(fp)
10001114:	100b883a 	mov	r5,r2
10001118:	01000084 	movi	r4,2
1000111c:	00002500 	call	10000250 <IO_write>
	return IO_read(HPI_DATA);
10001120:	0009883a 	mov	r4,zero
10001124:	00002cc0 	call	100002cc <IO_read>

}
10001128:	e037883a 	mov	sp,fp
1000112c:	dfc00117 	ldw	ra,4(sp)
10001130:	df000017 	ldw	fp,0(sp)
10001134:	dec00204 	addi	sp,sp,8
10001138:	f800283a 	ret

1000113c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
1000113c:	defffe04 	addi	sp,sp,-8
10001140:	dfc00115 	stw	ra,4(sp)
10001144:	df000015 	stw	fp,0(sp)
10001148:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
1000114c:	017e9414 	movui	r5,64080
10001150:	01000044 	movi	r4,1
10001154:	00002500 	call	10000250 <IO_write>
	usleep(100000);
10001158:	010000b4 	movhi	r4,2
1000115c:	2121a804 	addi	r4,r4,-31072
10001160:	000fa0c0 	call	1000fa0c <usleep>
	printf("[USB INIT]:reset finished!\n");
10001164:	01040074 	movhi	r4,4097
10001168:	21083e04 	addi	r4,r4,8440
1000116c:	00023400 	call	10002340 <puts>

	usleep(500000);
10001170:	01000234 	movhi	r4,8
10001174:	21284804 	addi	r4,r4,-24288
10001178:	000fa0c0 	call	1000fa0c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
1000117c:	01040074 	movhi	r4,4097
10001180:	21084504 	addi	r4,r4,8468
10001184:	00023400 	call	10002340 <puts>
	IO_read(HPI_MAILBOX);
10001188:	01000044 	movi	r4,1
1000118c:	00002cc0 	call	100002cc <IO_read>
	IO_read(HPI_STATUS);
10001190:	010000c4 	movi	r4,3
10001194:	00002cc0 	call	100002cc <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001198:	01005104 	movi	r4,324
1000119c:	00010f80 	call	100010f8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100011a0:	000b883a 	mov	r5,zero
100011a4:	01005104 	movi	r4,324
100011a8:	00010a00 	call	100010a0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100011ac:	01005204 	movi	r4,328
100011b0:	00010f80 	call	100010f8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100011b4:	000b883a 	mov	r5,zero
100011b8:	01005204 	movi	r4,328
100011bc:	00010a00 	call	100010a0 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100011c0:	017fffd4 	movui	r5,65535
100011c4:	01302414 	movui	r4,49296
100011c8:	00010a00 	call	100010a0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100011cc:	017fffd4 	movui	r5,65535
100011d0:	01302c14 	movui	r4,49328
100011d4:	00010a00 	call	100010a0 <UsbWrite>
}
100011d8:	0001883a 	nop
100011dc:	e037883a 	mov	sp,fp
100011e0:	dfc00117 	ldw	ra,4(sp)
100011e4:	df000017 	ldw	fp,0(sp)
100011e8:	dec00204 	addi	sp,sp,8
100011ec:	f800283a 	ret

100011f0 <UsbSetAddress>:


void UsbSetAddress()
{
100011f0:	defffe04 	addi	sp,sp,-8
100011f4:	dfc00115 	stw	ra,4(sp)
100011f8:	df000015 	stw	fp,0(sp)
100011fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001200:	01414004 	movi	r5,1280
10001204:	01000084 	movi	r4,2
10001208:	00002500 	call	10000250 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
1000120c:	01414304 	movi	r5,1292
10001210:	0009883a 	mov	r4,zero
10001214:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001218:	01400204 	movi	r5,8
1000121c:	0009883a 	mov	r4,zero
10001220:	00002500 	call	10000250 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001224:	01403404 	movi	r5,208
10001228:	0009883a 	mov	r4,zero
1000122c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001230:	01400044 	movi	r5,1
10001234:	0009883a 	mov	r4,zero
10001238:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000123c:	014004c4 	movi	r5,19
10001240:	0009883a 	mov	r4,zero
10001244:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001248:	01414504 	movi	r5,1300
1000124c:	0009883a 	mov	r4,zero
10001250:	00002500 	call	10000250 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001254:	01414004 	movi	r5,1280
10001258:	0009883a 	mov	r4,zero
1000125c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001260:	01400084 	movi	r5,2
10001264:	0009883a 	mov	r4,zero
10001268:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000126c:	000b883a 	mov	r5,zero
10001270:	0009883a 	mov	r4,zero
10001274:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001278:	000b883a 	mov	r5,zero
1000127c:	0009883a 	mov	r4,zero
10001280:	00002500 	call	10000250 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001284:	000b883a 	mov	r5,zero
10001288:	0009883a 	mov	r4,zero
1000128c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001290:	000b883a 	mov	r5,zero
10001294:	0009883a 	mov	r4,zero
10001298:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0090);//
1000129c:	01402404 	movi	r5,144
100012a0:	0009883a 	mov	r4,zero
100012a4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);
100012a8:	01401044 	movi	r5,65
100012ac:	0009883a 	mov	r4,zero
100012b0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012b4:	014004c4 	movi	r5,19
100012b8:	0009883a 	mov	r4,zero
100012bc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012c0:	000b883a 	mov	r5,zero
100012c4:	0009883a 	mov	r4,zero
100012c8:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100012cc:	01414004 	movi	r5,1280
100012d0:	01006c04 	movi	r4,432
100012d4:	00010a00 	call	100010a0 <UsbWrite>
}
100012d8:	0001883a 	nop
100012dc:	e037883a 	mov	sp,fp
100012e0:	dfc00117 	ldw	ra,4(sp)
100012e4:	df000017 	ldw	fp,0(sp)
100012e8:	dec00204 	addi	sp,sp,8
100012ec:	f800283a 	ret

100012f0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100012f0:	defffe04 	addi	sp,sp,-8
100012f4:	dfc00115 	stw	ra,4(sp)
100012f8:	df000015 	stw	fp,0(sp)
100012fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001300:	01414004 	movi	r5,1280
10001304:	01000084 	movi	r4,2
10001308:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000130c:	01414304 	movi	r5,1292
10001310:	0009883a 	mov	r4,zero
10001314:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001318:	01400204 	movi	r5,8
1000131c:	0009883a 	mov	r4,zero
10001320:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001324:	0140b404 	movi	r5,720
10001328:	0009883a 	mov	r4,zero
1000132c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001330:	01400044 	movi	r5,1
10001334:	0009883a 	mov	r4,zero
10001338:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000133c:	014004c4 	movi	r5,19
10001340:	0009883a 	mov	r4,zero
10001344:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001348:	01414504 	movi	r5,1300
1000134c:	0009883a 	mov	r4,zero
10001350:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001354:	0141a004 	movi	r5,1664
10001358:	0009883a 	mov	r4,zero
1000135c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001360:	01404004 	movi	r5,256
10001364:	0009883a 	mov	r4,zero
10001368:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000136c:	000b883a 	mov	r5,zero
10001370:	0009883a 	mov	r4,zero
10001374:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001378:	01400204 	movi	r5,8
1000137c:	0009883a 	mov	r4,zero
10001380:	00002500 	call	10000250 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001384:	01414b04 	movi	r5,1324
10001388:	0009883a 	mov	r4,zero
1000138c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001390:	01400204 	movi	r5,8
10001394:	0009883a 	mov	r4,zero
10001398:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000139c:	0140a404 	movi	r5,656
100013a0:	0009883a 	mov	r4,zero
100013a4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013a8:	01401044 	movi	r5,65
100013ac:	0009883a 	mov	r4,zero
100013b0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013b4:	014004c4 	movi	r5,19
100013b8:	0009883a 	mov	r4,zero
100013bc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);
100013c0:	01414804 	movi	r5,1312
100013c4:	0009883a 	mov	r4,zero
100013c8:	00002500 	call	10000250 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100013cc:	000b883a 	mov	r5,zero
100013d0:	0009883a 	mov	r4,zero
100013d4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100013d8:	000b883a 	mov	r5,zero
100013dc:	0009883a 	mov	r4,zero
100013e0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100013e4:	01408404 	movi	r5,528
100013e8:	0009883a 	mov	r4,zero
100013ec:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013f0:	01401044 	movi	r5,65
100013f4:	0009883a 	mov	r4,zero
100013f8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013fc:	014004c4 	movi	r5,19
10001400:	0009883a 	mov	r4,zero
10001404:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001408:	000b883a 	mov	r5,zero
1000140c:	0009883a 	mov	r4,zero
10001410:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001414:	01414004 	movi	r5,1280
10001418:	01006c04 	movi	r4,432
1000141c:	00010a00 	call	100010a0 <UsbWrite>
}
10001420:	0001883a 	nop
10001424:	e037883a 	mov	sp,fp
10001428:	dfc00117 	ldw	ra,4(sp)
1000142c:	df000017 	ldw	fp,0(sp)
10001430:	dec00204 	addi	sp,sp,8
10001434:	f800283a 	ret

10001438 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001438:	defffe04 	addi	sp,sp,-8
1000143c:	dfc00115 	stw	ra,4(sp)
10001440:	df000015 	stw	fp,0(sp)
10001444:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001448:	01414004 	movi	r5,1280
1000144c:	01000084 	movi	r4,2
10001450:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001454:	01414304 	movi	r5,1292
10001458:	0009883a 	mov	r4,zero
1000145c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001460:	01400204 	movi	r5,8
10001464:	0009883a 	mov	r4,zero
10001468:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000146c:	0140b404 	movi	r5,720
10001470:	0009883a 	mov	r4,zero
10001474:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001478:	01400044 	movi	r5,1
1000147c:	0009883a 	mov	r4,zero
10001480:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001484:	014004c4 	movi	r5,19
10001488:	0009883a 	mov	r4,zero
1000148c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001490:	01414504 	movi	r5,1300
10001494:	0009883a 	mov	r4,zero
10001498:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000149c:	0141a004 	movi	r5,1664
100014a0:	0009883a 	mov	r4,zero
100014a4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100014a8:	01404004 	movi	r5,256
100014ac:	0009883a 	mov	r4,zero
100014b0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100014b4:	000b883a 	mov	r5,zero
100014b8:	0009883a 	mov	r4,zero
100014bc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100014c0:	01400484 	movi	r5,18
100014c4:	0009883a 	mov	r4,zero
100014c8:	00002500 	call	10000250 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100014cc:	01415104 	movi	r5,1348
100014d0:	0009883a 	mov	r4,zero
100014d4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100014d8:	01400204 	movi	r5,8
100014dc:	0009883a 	mov	r4,zero
100014e0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100014e4:	0140a404 	movi	r5,656
100014e8:	0009883a 	mov	r4,zero
100014ec:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100014f0:	01401044 	movi	r5,65
100014f4:	0009883a 	mov	r4,zero
100014f8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100014fc:	014004c4 	movi	r5,19
10001500:	0009883a 	mov	r4,zero
10001504:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001508:	01414804 	movi	r5,1312
1000150c:	0009883a 	mov	r4,zero
10001510:	00002500 	call	10000250 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001514:	01415304 	movi	r5,1356
10001518:	0009883a 	mov	r4,zero
1000151c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001520:	01400204 	movi	r5,8
10001524:	0009883a 	mov	r4,zero
10001528:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000152c:	0140a404 	movi	r5,656
10001530:	0009883a 	mov	r4,zero
10001534:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001538:	01400044 	movi	r5,1
1000153c:	0009883a 	mov	r4,zero
10001540:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001544:	014004c4 	movi	r5,19
10001548:	0009883a 	mov	r4,zero
1000154c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001550:	01414b04 	movi	r5,1324
10001554:	0009883a 	mov	r4,zero
10001558:	00002500 	call	10000250 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
1000155c:	01415504 	movi	r5,1364
10001560:	0009883a 	mov	r4,zero
10001564:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001568:	01400084 	movi	r5,2
1000156c:	0009883a 	mov	r4,zero
10001570:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001574:	0140a404 	movi	r5,656
10001578:	0009883a 	mov	r4,zero
1000157c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001580:	01401044 	movi	r5,65
10001584:	0009883a 	mov	r4,zero
10001588:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000158c:	014004c4 	movi	r5,19
10001590:	0009883a 	mov	r4,zero
10001594:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001598:	01414e04 	movi	r5,1336
1000159c:	0009883a 	mov	r4,zero
100015a0:	00002500 	call	10000250 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100015a4:	000b883a 	mov	r5,zero
100015a8:	0009883a 	mov	r4,zero
100015ac:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100015b0:	000b883a 	mov	r5,zero
100015b4:	0009883a 	mov	r4,zero
100015b8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100015bc:	01408404 	movi	r5,528
100015c0:	0009883a 	mov	r4,zero
100015c4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100015c8:	01401044 	movi	r5,65
100015cc:	0009883a 	mov	r4,zero
100015d0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100015d4:	014004c4 	movi	r5,19
100015d8:	0009883a 	mov	r4,zero
100015dc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100015e0:	000b883a 	mov	r5,zero
100015e4:	0009883a 	mov	r4,zero
100015e8:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100015ec:	01414004 	movi	r5,1280
100015f0:	01006c04 	movi	r4,432
100015f4:	00010a00 	call	100010a0 <UsbWrite>
}
100015f8:	0001883a 	nop
100015fc:	e037883a 	mov	sp,fp
10001600:	dfc00117 	ldw	ra,4(sp)
10001604:	df000017 	ldw	fp,0(sp)
10001608:	dec00204 	addi	sp,sp,8
1000160c:	f800283a 	ret

10001610 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001610:	defffe04 	addi	sp,sp,-8
10001614:	dfc00115 	stw	ra,4(sp)
10001618:	df000015 	stw	fp,0(sp)
1000161c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001620:	01414004 	movi	r5,1280
10001624:	01000084 	movi	r4,2
10001628:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000162c:	01414304 	movi	r5,1292
10001630:	0009883a 	mov	r4,zero
10001634:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001638:	01400204 	movi	r5,8
1000163c:	0009883a 	mov	r4,zero
10001640:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001644:	0140b404 	movi	r5,720
10001648:	0009883a 	mov	r4,zero
1000164c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001650:	01400044 	movi	r5,1
10001654:	0009883a 	mov	r4,zero
10001658:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000165c:	014004c4 	movi	r5,19
10001660:	0009883a 	mov	r4,zero
10001664:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001668:	01414504 	movi	r5,1300
1000166c:	0009883a 	mov	r4,zero
10001670:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001674:	0141a004 	movi	r5,1664
10001678:	0009883a 	mov	r4,zero
1000167c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001680:	01408004 	movi	r5,512
10001684:	0009883a 	mov	r4,zero
10001688:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000168c:	000b883a 	mov	r5,zero
10001690:	0009883a 	mov	r4,zero
10001694:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001698:	01400244 	movi	r5,9
1000169c:	0009883a 	mov	r4,zero
100016a0:	00002500 	call	10000250 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100016a4:	01415104 	movi	r5,1348
100016a8:	0009883a 	mov	r4,zero
100016ac:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100016b0:	01400204 	movi	r5,8
100016b4:	0009883a 	mov	r4,zero
100016b8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100016bc:	0140a404 	movi	r5,656
100016c0:	0009883a 	mov	r4,zero
100016c4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100016c8:	01401044 	movi	r5,65
100016cc:	0009883a 	mov	r4,zero
100016d0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100016d4:	014004c4 	movi	r5,19
100016d8:	0009883a 	mov	r4,zero
100016dc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100016e0:	01414804 	movi	r5,1312
100016e4:	0009883a 	mov	r4,zero
100016e8:	00002500 	call	10000250 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100016ec:	01415304 	movi	r5,1356
100016f0:	0009883a 	mov	r4,zero
100016f4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100016f8:	01400044 	movi	r5,1
100016fc:	0009883a 	mov	r4,zero
10001700:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001704:	0140a404 	movi	r5,656
10001708:	0009883a 	mov	r4,zero
1000170c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001710:	01400044 	movi	r5,1
10001714:	0009883a 	mov	r4,zero
10001718:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000171c:	014004c4 	movi	r5,19
10001720:	0009883a 	mov	r4,zero
10001724:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001728:	01414b04 	movi	r5,1324
1000172c:	0009883a 	mov	r4,zero
10001730:	00002500 	call	10000250 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001734:	000b883a 	mov	r5,zero
10001738:	0009883a 	mov	r4,zero
1000173c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001740:	000b883a 	mov	r5,zero
10001744:	0009883a 	mov	r4,zero
10001748:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000174c:	01408404 	movi	r5,528
10001750:	0009883a 	mov	r4,zero
10001754:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001758:	01401044 	movi	r5,65
1000175c:	0009883a 	mov	r4,zero
10001760:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001764:	014004c4 	movi	r5,19
10001768:	0009883a 	mov	r4,zero
1000176c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001770:	000b883a 	mov	r5,zero
10001774:	0009883a 	mov	r4,zero
10001778:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000177c:	01414004 	movi	r5,1280
10001780:	01006c04 	movi	r4,432
10001784:	00010a00 	call	100010a0 <UsbWrite>
}
10001788:	0001883a 	nop
1000178c:	e037883a 	mov	sp,fp
10001790:	dfc00117 	ldw	ra,4(sp)
10001794:	df000017 	ldw	fp,0(sp)
10001798:	dec00204 	addi	sp,sp,8
1000179c:	f800283a 	ret

100017a0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100017a0:	defffe04 	addi	sp,sp,-8
100017a4:	dfc00115 	stw	ra,4(sp)
100017a8:	df000015 	stw	fp,0(sp)
100017ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017b0:	01414004 	movi	r5,1280
100017b4:	01000084 	movi	r4,2
100017b8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
100017bc:	01414304 	movi	r5,1292
100017c0:	0009883a 	mov	r4,zero
100017c4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100017c8:	01400204 	movi	r5,8
100017cc:	0009883a 	mov	r4,zero
100017d0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100017d4:	0140b404 	movi	r5,720
100017d8:	0009883a 	mov	r4,zero
100017dc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
100017e0:	01400044 	movi	r5,1
100017e4:	0009883a 	mov	r4,zero
100017e8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
100017ec:	014004c4 	movi	r5,19
100017f0:	0009883a 	mov	r4,zero
100017f4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
100017f8:	01414504 	movi	r5,1300
100017fc:	0009883a 	mov	r4,zero
10001800:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001804:	0141a004 	movi	r5,1664
10001808:	0009883a 	mov	r4,zero
1000180c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001810:	01408004 	movi	r5,512
10001814:	0009883a 	mov	r4,zero
10001818:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000181c:	000b883a 	mov	r5,zero
10001820:	0009883a 	mov	r4,zero
10001824:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001828:	01403fc4 	movi	r5,255
1000182c:	0009883a 	mov	r4,zero
10001830:	00002500 	call	10000250 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001834:	01415704 	movi	r5,1372
10001838:	0009883a 	mov	r4,zero
1000183c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001840:	01400204 	movi	r5,8
10001844:	0009883a 	mov	r4,zero
10001848:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000184c:	0140a404 	movi	r5,656
10001850:	0009883a 	mov	r4,zero
10001854:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001858:	01401044 	movi	r5,65
1000185c:	0009883a 	mov	r4,zero
10001860:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001864:	014004c4 	movi	r5,19
10001868:	0009883a 	mov	r4,zero
1000186c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001870:	01414804 	movi	r5,1312
10001874:	0009883a 	mov	r4,zero
10001878:	00002500 	call	10000250 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
1000187c:	01415904 	movi	r5,1380
10001880:	0009883a 	mov	r4,zero
10001884:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001888:	01400204 	movi	r5,8
1000188c:	0009883a 	mov	r4,zero
10001890:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001894:	0140a404 	movi	r5,656
10001898:	0009883a 	mov	r4,zero
1000189c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100018a0:	01400044 	movi	r5,1
100018a4:	0009883a 	mov	r4,zero
100018a8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018ac:	014004c4 	movi	r5,19
100018b0:	0009883a 	mov	r4,zero
100018b4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100018b8:	01414b04 	movi	r5,1324
100018bc:	0009883a 	mov	r4,zero
100018c0:	00002500 	call	10000250 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100018c4:	01415b04 	movi	r5,1388
100018c8:	0009883a 	mov	r4,zero
100018cc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100018d0:	01400204 	movi	r5,8
100018d4:	0009883a 	mov	r4,zero
100018d8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100018dc:	0140a404 	movi	r5,656
100018e0:	0009883a 	mov	r4,zero
100018e4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100018e8:	01401044 	movi	r5,65
100018ec:	0009883a 	mov	r4,zero
100018f0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100018f4:	014004c4 	movi	r5,19
100018f8:	0009883a 	mov	r4,zero
100018fc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001900:	01414e04 	movi	r5,1336
10001904:	0009883a 	mov	r4,zero
10001908:	00002500 	call	10000250 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
1000190c:	01415d04 	movi	r5,1396
10001910:	0009883a 	mov	r4,zero
10001914:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001918:	01400204 	movi	r5,8
1000191c:	0009883a 	mov	r4,zero
10001920:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001924:	0140a404 	movi	r5,656
10001928:	0009883a 	mov	r4,zero
1000192c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001930:	01400044 	movi	r5,1
10001934:	0009883a 	mov	r4,zero
10001938:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000193c:	014004c4 	movi	r5,19
10001940:	0009883a 	mov	r4,zero
10001944:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001948:	01415104 	movi	r5,1348
1000194c:	0009883a 	mov	r4,zero
10001950:	00002500 	call	10000250 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001954:	01415f04 	movi	r5,1404
10001958:	0009883a 	mov	r4,zero
1000195c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001960:	01400084 	movi	r5,2
10001964:	0009883a 	mov	r4,zero
10001968:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000196c:	0140a404 	movi	r5,656
10001970:	0009883a 	mov	r4,zero
10001974:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001978:	01401044 	movi	r5,65
1000197c:	0009883a 	mov	r4,zero
10001980:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001984:	014004c4 	movi	r5,19
10001988:	0009883a 	mov	r4,zero
1000198c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001990:	01415404 	movi	r5,1360
10001994:	0009883a 	mov	r4,zero
10001998:	00002500 	call	10000250 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
1000199c:	000b883a 	mov	r5,zero
100019a0:	0009883a 	mov	r4,zero
100019a4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100019a8:	000b883a 	mov	r5,zero
100019ac:	0009883a 	mov	r4,zero
100019b0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100019b4:	01408404 	movi	r5,528
100019b8:	0009883a 	mov	r4,zero
100019bc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100019c0:	01401044 	movi	r5,65
100019c4:	0009883a 	mov	r4,zero
100019c8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100019cc:	014004c4 	movi	r5,19
100019d0:	0009883a 	mov	r4,zero
100019d4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100019d8:	000b883a 	mov	r5,zero
100019dc:	0009883a 	mov	r4,zero
100019e0:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100019e4:	01414004 	movi	r5,1280
100019e8:	01006c04 	movi	r4,432
100019ec:	00010a00 	call	100010a0 <UsbWrite>
}
100019f0:	0001883a 	nop
100019f4:	e037883a 	mov	sp,fp
100019f8:	dfc00117 	ldw	ra,4(sp)
100019fc:	df000017 	ldw	fp,0(sp)
10001a00:	dec00204 	addi	sp,sp,8
10001a04:	f800283a 	ret

10001a08 <UsbSetConfig>:

void UsbSetConfig()
{
10001a08:	defffe04 	addi	sp,sp,-8
10001a0c:	dfc00115 	stw	ra,4(sp)
10001a10:	df000015 	stw	fp,0(sp)
10001a14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a18:	01414004 	movi	r5,1280
10001a1c:	01000084 	movi	r4,2
10001a20:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a24:	01414304 	movi	r5,1292
10001a28:	0009883a 	mov	r4,zero
10001a2c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a30:	01400204 	movi	r5,8
10001a34:	0009883a 	mov	r4,zero
10001a38:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001a3c:	0140b404 	movi	r5,720
10001a40:	0009883a 	mov	r4,zero
10001a44:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001a48:	01400044 	movi	r5,1
10001a4c:	0009883a 	mov	r4,zero
10001a50:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a54:	014004c4 	movi	r5,19
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001a60:	01414504 	movi	r5,1300
10001a64:	0009883a 	mov	r4,zero
10001a68:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001a6c:	01424004 	movi	r5,2304
10001a70:	0009883a 	mov	r4,zero
10001a74:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001a78:	01400044 	movi	r5,1
10001a7c:	0009883a 	mov	r4,zero
10001a80:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a84:	000b883a 	mov	r5,zero
10001a88:	0009883a 	mov	r4,zero
10001a8c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a90:	000b883a 	mov	r5,zero
10001a94:	0009883a 	mov	r4,zero
10001a98:	00002500 	call	10000250 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001a9c:	000b883a 	mov	r5,zero
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001aa8:	000b883a 	mov	r5,zero
10001aac:	0009883a 	mov	r4,zero
10001ab0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001ab4:	0140a404 	movi	r5,656
10001ab8:	0009883a 	mov	r4,zero
10001abc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001ac0:	01401044 	movi	r5,65
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001acc:	014004c4 	movi	r5,19
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ad8:	000b883a 	mov	r5,zero
10001adc:	0009883a 	mov	r4,zero
10001ae0:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001ae4:	01414004 	movi	r5,1280
10001ae8:	01006c04 	movi	r4,432
10001aec:	00010a00 	call	100010a0 <UsbWrite>

}
10001af0:	0001883a 	nop
10001af4:	e037883a 	mov	sp,fp
10001af8:	dfc00117 	ldw	ra,4(sp)
10001afc:	df000017 	ldw	fp,0(sp)
10001b00:	dec00204 	addi	sp,sp,8
10001b04:	f800283a 	ret

10001b08 <UsbClassRequest>:

void UsbClassRequest()
{
10001b08:	defffe04 	addi	sp,sp,-8
10001b0c:	dfc00115 	stw	ra,4(sp)
10001b10:	df000015 	stw	fp,0(sp)
10001b14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b18:	01414004 	movi	r5,1280
10001b1c:	01000084 	movi	r4,2
10001b20:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b24:	01414304 	movi	r5,1292
10001b28:	0009883a 	mov	r4,zero
10001b2c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b30:	01400204 	movi	r5,8
10001b34:	0009883a 	mov	r4,zero
10001b38:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b3c:	0140b404 	movi	r5,720
10001b40:	0009883a 	mov	r4,zero
10001b44:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b48:	01400044 	movi	r5,1
10001b4c:	0009883a 	mov	r4,zero
10001b50:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b54:	014004c4 	movi	r5,19
10001b58:	0009883a 	mov	r4,zero
10001b5c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b60:	01414504 	movi	r5,1300
10001b64:	0009883a 	mov	r4,zero
10001b68:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001b6c:	01428844 	movi	r5,2593
10001b70:	0009883a 	mov	r4,zero
10001b74:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001b78:	000b883a 	mov	r5,zero
10001b7c:	0009883a 	mov	r4,zero
10001b80:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b84:	000b883a 	mov	r5,zero
10001b88:	0009883a 	mov	r4,zero
10001b8c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b90:	000b883a 	mov	r5,zero
10001b94:	0009883a 	mov	r4,zero
10001b98:	00002500 	call	10000250 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b9c:	000b883a 	mov	r5,zero
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001ba8:	000b883a 	mov	r5,zero
10001bac:	0009883a 	mov	r4,zero
10001bb0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001bb4:	0140a404 	movi	r5,656
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001bc0:	01401044 	movi	r5,65
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bcc:	014004c4 	movi	r5,19
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bd8:	000b883a 	mov	r5,zero
10001bdc:	0009883a 	mov	r4,zero
10001be0:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001be4:	01414004 	movi	r5,1280
10001be8:	01006c04 	movi	r4,432
10001bec:	00010a00 	call	100010a0 <UsbWrite>
}
10001bf0:	0001883a 	nop
10001bf4:	e037883a 	mov	sp,fp
10001bf8:	dfc00117 	ldw	ra,4(sp)
10001bfc:	df000017 	ldw	fp,0(sp)
10001c00:	dec00204 	addi	sp,sp,8
10001c04:	f800283a 	ret

10001c08 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c08:	defffe04 	addi	sp,sp,-8
10001c0c:	dfc00115 	stw	ra,4(sp)
10001c10:	df000015 	stw	fp,0(sp)
10001c14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c18:	01414004 	movi	r5,1280
10001c1c:	01000084 	movi	r4,2
10001c20:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c24:	01414304 	movi	r5,1292
10001c28:	0009883a 	mov	r4,zero
10001c2c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c30:	01400204 	movi	r5,8
10001c34:	0009883a 	mov	r4,zero
10001c38:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c3c:	0140b404 	movi	r5,720
10001c40:	0009883a 	mov	r4,zero
10001c44:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c48:	01400044 	movi	r5,1
10001c4c:	0009883a 	mov	r4,zero
10001c50:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c54:	014004c4 	movi	r5,19
10001c58:	0009883a 	mov	r4,zero
10001c5c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c60:	01414504 	movi	r5,1300
10001c64:	0009883a 	mov	r4,zero
10001c68:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001c6c:	0141a044 	movi	r5,1665
10001c70:	0009883a 	mov	r4,zero
10001c74:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001c78:	01484004 	movi	r5,8448
10001c7c:	0009883a 	mov	r4,zero
10001c80:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001c84:	000b883a 	mov	r5,zero
10001c88:	0009883a 	mov	r4,zero
10001c8c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001c90:	01401ec4 	movi	r5,123
10001c94:	0009883a 	mov	r4,zero
10001c98:	00002500 	call	10000250 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001c9c:	01415104 	movi	r5,1348
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ca8:	01400204 	movi	r5,8
10001cac:	0009883a 	mov	r4,zero
10001cb0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001cb4:	0140a404 	movi	r5,656
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001cc0:	01401044 	movi	r5,65
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ccc:	014004c4 	movi	r5,19
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001cd8:	01414804 	movi	r5,1312
10001cdc:	0009883a 	mov	r4,zero
10001ce0:	00002500 	call	10000250 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001ce4:	000b883a 	mov	r5,zero
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001cf0:	000b883a 	mov	r5,zero
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001cfc:	01408404 	movi	r5,528
10001d00:	0009883a 	mov	r4,zero
10001d04:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d08:	01401044 	movi	r5,65
10001d0c:	0009883a 	mov	r4,zero
10001d10:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d14:	014004c4 	movi	r5,19
10001d18:	0009883a 	mov	r4,zero
10001d1c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001d20:	000b883a 	mov	r5,zero
10001d24:	0009883a 	mov	r4,zero
10001d28:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d2c:	01414004 	movi	r5,1280
10001d30:	01006c04 	movi	r4,432
10001d34:	00010a00 	call	100010a0 <UsbWrite>

}
10001d38:	0001883a 	nop
10001d3c:	e037883a 	mov	sp,fp
10001d40:	dfc00117 	ldw	ra,4(sp)
10001d44:	df000017 	ldw	fp,0(sp)
10001d48:	dec00204 	addi	sp,sp,8
10001d4c:	f800283a 	ret

10001d50 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001d50:	defffe04 	addi	sp,sp,-8
10001d54:	dfc00115 	stw	ra,4(sp)
10001d58:	df000015 	stw	fp,0(sp)
10001d5c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d60:	01414004 	movi	r5,1280
10001d64:	01000084 	movi	r4,2
10001d68:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d6c:	01414304 	movi	r5,1292
10001d70:	0009883a 	mov	r4,zero
10001d74:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d78:	01400204 	movi	r5,8
10001d7c:	0009883a 	mov	r4,zero
10001d80:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001d84:	0140b404 	movi	r5,720
10001d88:	0009883a 	mov	r4,zero
10001d8c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d90:	01400044 	movi	r5,1
10001d94:	0009883a 	mov	r4,zero
10001d98:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d9c:	014004c4 	movi	r5,19
10001da0:	0009883a 	mov	r4,zero
10001da4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001da8:	01414504 	movi	r5,1300
10001dac:	0009883a 	mov	r4,zero
10001db0:	00002500 	call	10000250 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001db4:	0141a044 	movi	r5,1665
10001db8:	0009883a 	mov	r4,zero
10001dbc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001dc0:	01488004 	movi	r5,8704
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001dcc:	000b883a 	mov	r5,zero
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001dd8:	01401ec4 	movi	r5,123
10001ddc:	0009883a 	mov	r4,zero
10001de0:	00002500 	call	10000250 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001de4:	01416004 	movi	r5,1408
10001de8:	0009883a 	mov	r4,zero
10001dec:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001df0:	01400204 	movi	r5,8
10001df4:	0009883a 	mov	r4,zero
10001df8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001dfc:	0140a404 	movi	r5,656
10001e00:	0009883a 	mov	r4,zero
10001e04:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e08:	01401044 	movi	r5,65
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e14:	014004c4 	movi	r5,19
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e20:	01414804 	movi	r5,1312
10001e24:	0009883a 	mov	r4,zero
10001e28:	00002500 	call	10000250 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001e2c:	01416204 	movi	r5,1416
10001e30:	0009883a 	mov	r4,zero
10001e34:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001e38:	01400204 	movi	r5,8
10001e3c:	0009883a 	mov	r4,zero
10001e40:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001e44:	0140a404 	movi	r5,656
10001e48:	0009883a 	mov	r4,zero
10001e4c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001e50:	01400044 	movi	r5,1
10001e54:	0009883a 	mov	r4,zero
10001e58:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001e5c:	014004c4 	movi	r5,19
10001e60:	0009883a 	mov	r4,zero
10001e64:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001e68:	01414b04 	movi	r5,1324
10001e6c:	0009883a 	mov	r4,zero
10001e70:	00002500 	call	10000250 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001e74:	01416404 	movi	r5,1424
10001e78:	0009883a 	mov	r4,zero
10001e7c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001e80:	01400204 	movi	r5,8
10001e84:	0009883a 	mov	r4,zero
10001e88:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001e8c:	0140a404 	movi	r5,656
10001e90:	0009883a 	mov	r4,zero
10001e94:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001e98:	01401044 	movi	r5,65
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ea4:	014004c4 	movi	r5,19
10001ea8:	0009883a 	mov	r4,zero
10001eac:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001eb0:	01414e04 	movi	r5,1336
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	00002500 	call	10000250 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001ebc:	01416604 	movi	r5,1432
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001ec8:	01400204 	movi	r5,8
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001ed4:	0140a404 	movi	r5,656
10001ed8:	0009883a 	mov	r4,zero
10001edc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001ee0:	01400044 	movi	r5,1
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001eec:	014004c4 	movi	r5,19
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001ef8:	01415104 	movi	r5,1348
10001efc:	0009883a 	mov	r4,zero
10001f00:	00002500 	call	10000250 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001f04:	01416804 	movi	r5,1440
10001f08:	0009883a 	mov	r4,zero
10001f0c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f10:	01400204 	movi	r5,8
10001f14:	0009883a 	mov	r4,zero
10001f18:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f1c:	0140a404 	movi	r5,656
10001f20:	0009883a 	mov	r4,zero
10001f24:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001f28:	01401044 	movi	r5,65
10001f2c:	0009883a 	mov	r4,zero
10001f30:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f34:	014004c4 	movi	r5,19
10001f38:	0009883a 	mov	r4,zero
10001f3c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001f40:	01415404 	movi	r5,1360
10001f44:	0009883a 	mov	r4,zero
10001f48:	00002500 	call	10000250 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001f4c:	01416a04 	movi	r5,1448
10001f50:	0009883a 	mov	r4,zero
10001f54:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f58:	01400204 	movi	r5,8
10001f5c:	0009883a 	mov	r4,zero
10001f60:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f64:	0140a404 	movi	r5,656
10001f68:	0009883a 	mov	r4,zero
10001f6c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f70:	01400044 	movi	r5,1
10001f74:	0009883a 	mov	r4,zero
10001f78:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f7c:	014004c4 	movi	r5,19
10001f80:	0009883a 	mov	r4,zero
10001f84:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001f88:	01415704 	movi	r5,1372
10001f8c:	0009883a 	mov	r4,zero
10001f90:	00002500 	call	10000250 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10001f94:	01416c04 	movi	r5,1456
10001f98:	0009883a 	mov	r4,zero
10001f9c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001fa0:	01400204 	movi	r5,8
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001fac:	0140a404 	movi	r5,656
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001fb8:	01401044 	movi	r5,65
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001fc4:	014004c4 	movi	r5,19
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10001fd0:	01415a04 	movi	r5,1384
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	00002500 	call	10000250 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10001fdc:	01416e04 	movi	r5,1464
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10001fe8:	014000c4 	movi	r5,3
10001fec:	0009883a 	mov	r4,zero
10001ff0:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001ff4:	0140a404 	movi	r5,656
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002000:	01400044 	movi	r5,1
10002004:	0009883a 	mov	r4,zero
10002008:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
1000200c:	014004c4 	movi	r5,19
10002010:	0009883a 	mov	r4,zero
10002014:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002018:	01415d04 	movi	r5,1396
1000201c:	0009883a 	mov	r4,zero
10002020:	00002500 	call	10000250 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002024:	000b883a 	mov	r5,zero
10002028:	0009883a 	mov	r4,zero
1000202c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002030:	000b883a 	mov	r5,zero
10002034:	0009883a 	mov	r4,zero
10002038:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
1000203c:	01408404 	movi	r5,528
10002040:	0009883a 	mov	r4,zero
10002044:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002048:	01401044 	movi	r5,65
1000204c:	0009883a 	mov	r4,zero
10002050:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002054:	014004c4 	movi	r5,19
10002058:	0009883a 	mov	r4,zero
1000205c:	00002500 	call	10000250 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002060:	000b883a 	mov	r5,zero
10002064:	0009883a 	mov	r4,zero
10002068:	00002500 	call	10000250 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000206c:	01414004 	movi	r5,1280
10002070:	01006c04 	movi	r4,432
10002074:	00010a00 	call	100010a0 <UsbWrite>

}
10002078:	0001883a 	nop
1000207c:	e037883a 	mov	sp,fp
10002080:	dfc00117 	ldw	ra,4(sp)
10002084:	df000017 	ldw	fp,0(sp)
10002088:	dec00204 	addi	sp,sp,8
1000208c:	f800283a 	ret

10002090 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002090:	defffd04 	addi	sp,sp,-12
10002094:	dfc00215 	stw	ra,8(sp)
10002098:	df000115 	stw	fp,4(sp)
1000209c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100020a0:	01005104 	movi	r4,324
100020a4:	00010f80 	call	100010f8 <UsbRead>
100020a8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020ac:	000b883a 	mov	r5,zero
100020b0:	01005104 	movi	r4,324
100020b4:	00010a00 	call	100010a0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100020b8:	00000d06 	br	100020f0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100020bc:	e0bfff0b 	ldhu	r2,-4(fp)
100020c0:	10000526 	beq	r2,zero,100020d8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100020c4:	e0bfff0b 	ldhu	r2,-4(fp)
100020c8:	100b883a 	mov	r5,r2
100020cc:	01040074 	movhi	r4,4097
100020d0:	21084e04 	addi	r4,r4,8504
100020d4:	00022440 	call	10002244 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100020d8:	01005104 	movi	r4,324
100020dc:	00010f80 	call	100010f8 <UsbRead>
100020e0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020e4:	000b883a 	mov	r5,zero
100020e8:	01005104 	movi	r4,324
100020ec:	00010a00 	call	100010a0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100020f0:	e0bfff0b 	ldhu	r2,-4(fp)
100020f4:	10840018 	cmpnei	r2,r2,4096
100020f8:	103ff01e 	bne	r2,zero,100020bc <__alt_data_end+0xf80020bc>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100020fc:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002100:	e037883a 	mov	sp,fp
10002104:	dfc00117 	ldw	ra,4(sp)
10002108:	df000017 	ldw	fp,0(sp)
1000210c:	dec00204 	addi	sp,sp,8
10002110:	f800283a 	ret

10002114 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002114:	defffd04 	addi	sp,sp,-12
10002118:	dfc00215 	stw	ra,8(sp)
1000211c:	df000115 	stw	fp,4(sp)
10002120:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002124:	010000c4 	movi	r4,3
10002128:	00002cc0 	call	100002cc <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
1000212c:	01005104 	movi	r4,324
10002130:	00010f80 	call	100010f8 <UsbRead>
10002134:	10bfffcc 	andi	r2,r2,65535
10002138:	10840018 	cmpnei	r2,r2,4096
1000213c:	1000091e 	bne	r2,zero,10002164 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002140:	000b883a 	mov	r5,zero
10002144:	01005104 	movi	r4,324
10002148:	00010a00 	call	100010a0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000214c:	0001883a 	nop
10002150:	010000c4 	movi	r4,3
10002154:	00002cc0 	call	100002cc <IO_read>
10002158:	10bfffcc 	andi	r2,r2,65535
1000215c:	1080040c 	andi	r2,r2,16
10002160:	103ffb26 	beq	r2,zero,10002150 <__alt_data_end+0xf8002150>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002164:	01414204 	movi	r5,1288
10002168:	01000084 	movi	r4,2
1000216c:	00002500 	call	10000250 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002170:	0009883a 	mov	r4,zero
10002174:	00002cc0 	call	100002cc <IO_read>
10002178:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
1000217c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002180:	e037883a 	mov	sp,fp
10002184:	dfc00117 	ldw	ra,4(sp)
10002188:	df000017 	ldw	fp,0(sp)
1000218c:	dec00204 	addi	sp,sp,8
10002190:	f800283a 	ret

10002194 <UsbPrintMem>:


void UsbPrintMem()
{
10002194:	defffc04 	addi	sp,sp,-16
10002198:	dfc00315 	stw	ra,12(sp)
1000219c:	df000215 	stw	fp,8(sp)
100021a0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100021a4:	01414004 	movi	r5,1280
100021a8:	01000084 	movi	r4,2
100021ac:	00002500 	call	10000250 <IO_write>
	for (i = 0; i <= 200; i += 2)
100021b0:	e03ffe15 	stw	zero,-8(fp)
100021b4:	00000e06 	br	100021f0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100021b8:	0009883a 	mov	r4,zero
100021bc:	00002cc0 	call	100002cc <IO_read>
100021c0:	10bfffcc 	andi	r2,r2,65535
100021c4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100021c8:	e0bffe17 	ldw	r2,-8(fp)
100021cc:	10814004 	addi	r2,r2,1280
100021d0:	e1bfff17 	ldw	r6,-4(fp)
100021d4:	100b883a 	mov	r5,r2
100021d8:	01040074 	movhi	r4,4097
100021dc:	21085604 	addi	r4,r4,8536
100021e0:	00022440 	call	10002244 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100021e4:	e0bffe17 	ldw	r2,-8(fp)
100021e8:	10800084 	addi	r2,r2,2
100021ec:	e0bffe15 	stw	r2,-8(fp)
100021f0:	e0bffe17 	ldw	r2,-8(fp)
100021f4:	10803250 	cmplti	r2,r2,201
100021f8:	103fef1e 	bne	r2,zero,100021b8 <__alt_data_end+0xf80021b8>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100021fc:	0001883a 	nop
10002200:	e037883a 	mov	sp,fp
10002204:	dfc00117 	ldw	ra,4(sp)
10002208:	df000017 	ldw	fp,0(sp)
1000220c:	dec00204 	addi	sp,sp,8
10002210:	f800283a 	ret

10002214 <_printf_r>:
10002214:	defffd04 	addi	sp,sp,-12
10002218:	2805883a 	mov	r2,r5
1000221c:	dfc00015 	stw	ra,0(sp)
10002220:	d9800115 	stw	r6,4(sp)
10002224:	d9c00215 	stw	r7,8(sp)
10002228:	21400217 	ldw	r5,8(r4)
1000222c:	d9c00104 	addi	r7,sp,4
10002230:	100d883a 	mov	r6,r2
10002234:	00023ec0 	call	100023ec <___vfprintf_internal_r>
10002238:	dfc00017 	ldw	ra,0(sp)
1000223c:	dec00304 	addi	sp,sp,12
10002240:	f800283a 	ret

10002244 <printf>:
10002244:	defffc04 	addi	sp,sp,-16
10002248:	dfc00015 	stw	ra,0(sp)
1000224c:	d9400115 	stw	r5,4(sp)
10002250:	d9800215 	stw	r6,8(sp)
10002254:	d9c00315 	stw	r7,12(sp)
10002258:	00840074 	movhi	r2,4097
1000225c:	108fc704 	addi	r2,r2,16156
10002260:	10800017 	ldw	r2,0(r2)
10002264:	200b883a 	mov	r5,r4
10002268:	d9800104 	addi	r6,sp,4
1000226c:	11000217 	ldw	r4,8(r2)
10002270:	00046c80 	call	100046c8 <__vfprintf_internal>
10002274:	dfc00017 	ldw	ra,0(sp)
10002278:	dec00404 	addi	sp,sp,16
1000227c:	f800283a 	ret

10002280 <_puts_r>:
10002280:	defff604 	addi	sp,sp,-40
10002284:	dc000715 	stw	r16,28(sp)
10002288:	2021883a 	mov	r16,r4
1000228c:	2809883a 	mov	r4,r5
10002290:	dc400815 	stw	r17,32(sp)
10002294:	dfc00915 	stw	ra,36(sp)
10002298:	2823883a 	mov	r17,r5
1000229c:	00023540 	call	10002354 <strlen>
100022a0:	10c00044 	addi	r3,r2,1
100022a4:	d8800115 	stw	r2,4(sp)
100022a8:	00840074 	movhi	r2,4097
100022ac:	10885b04 	addi	r2,r2,8556
100022b0:	d8800215 	stw	r2,8(sp)
100022b4:	00800044 	movi	r2,1
100022b8:	d8800315 	stw	r2,12(sp)
100022bc:	00800084 	movi	r2,2
100022c0:	dc400015 	stw	r17,0(sp)
100022c4:	d8c00615 	stw	r3,24(sp)
100022c8:	dec00415 	stw	sp,16(sp)
100022cc:	d8800515 	stw	r2,20(sp)
100022d0:	80000226 	beq	r16,zero,100022dc <_puts_r+0x5c>
100022d4:	80800e17 	ldw	r2,56(r16)
100022d8:	10001426 	beq	r2,zero,1000232c <_puts_r+0xac>
100022dc:	81400217 	ldw	r5,8(r16)
100022e0:	2880030b 	ldhu	r2,12(r5)
100022e4:	10c8000c 	andi	r3,r2,8192
100022e8:	1800061e 	bne	r3,zero,10002304 <_puts_r+0x84>
100022ec:	29001917 	ldw	r4,100(r5)
100022f0:	00f7ffc4 	movi	r3,-8193
100022f4:	10880014 	ori	r2,r2,8192
100022f8:	20c6703a 	and	r3,r4,r3
100022fc:	2880030d 	sth	r2,12(r5)
10002300:	28c01915 	stw	r3,100(r5)
10002304:	d9800404 	addi	r6,sp,16
10002308:	8009883a 	mov	r4,r16
1000230c:	0006c300 	call	10006c30 <__sfvwrite_r>
10002310:	1000091e 	bne	r2,zero,10002338 <_puts_r+0xb8>
10002314:	00800284 	movi	r2,10
10002318:	dfc00917 	ldw	ra,36(sp)
1000231c:	dc400817 	ldw	r17,32(sp)
10002320:	dc000717 	ldw	r16,28(sp)
10002324:	dec00a04 	addi	sp,sp,40
10002328:	f800283a 	ret
1000232c:	8009883a 	mov	r4,r16
10002330:	00067ac0 	call	100067ac <__sinit>
10002334:	003fe906 	br	100022dc <__alt_data_end+0xf80022dc>
10002338:	00bfffc4 	movi	r2,-1
1000233c:	003ff606 	br	10002318 <__alt_data_end+0xf8002318>

10002340 <puts>:
10002340:	00840074 	movhi	r2,4097
10002344:	108fc704 	addi	r2,r2,16156
10002348:	200b883a 	mov	r5,r4
1000234c:	11000017 	ldw	r4,0(r2)
10002350:	00022801 	jmpi	10002280 <_puts_r>

10002354 <strlen>:
10002354:	208000cc 	andi	r2,r4,3
10002358:	10002026 	beq	r2,zero,100023dc <strlen+0x88>
1000235c:	20800007 	ldb	r2,0(r4)
10002360:	10002026 	beq	r2,zero,100023e4 <strlen+0x90>
10002364:	2005883a 	mov	r2,r4
10002368:	00000206 	br	10002374 <strlen+0x20>
1000236c:	10c00007 	ldb	r3,0(r2)
10002370:	18001826 	beq	r3,zero,100023d4 <strlen+0x80>
10002374:	10800044 	addi	r2,r2,1
10002378:	10c000cc 	andi	r3,r2,3
1000237c:	183ffb1e 	bne	r3,zero,1000236c <__alt_data_end+0xf800236c>
10002380:	10c00017 	ldw	r3,0(r2)
10002384:	01ffbff4 	movhi	r7,65279
10002388:	39ffbfc4 	addi	r7,r7,-257
1000238c:	00ca303a 	nor	r5,zero,r3
10002390:	01a02074 	movhi	r6,32897
10002394:	19c7883a 	add	r3,r3,r7
10002398:	31a02004 	addi	r6,r6,-32640
1000239c:	1946703a 	and	r3,r3,r5
100023a0:	1986703a 	and	r3,r3,r6
100023a4:	1800091e 	bne	r3,zero,100023cc <strlen+0x78>
100023a8:	10800104 	addi	r2,r2,4
100023ac:	10c00017 	ldw	r3,0(r2)
100023b0:	19cb883a 	add	r5,r3,r7
100023b4:	00c6303a 	nor	r3,zero,r3
100023b8:	28c6703a 	and	r3,r5,r3
100023bc:	1986703a 	and	r3,r3,r6
100023c0:	183ff926 	beq	r3,zero,100023a8 <__alt_data_end+0xf80023a8>
100023c4:	00000106 	br	100023cc <strlen+0x78>
100023c8:	10800044 	addi	r2,r2,1
100023cc:	10c00007 	ldb	r3,0(r2)
100023d0:	183ffd1e 	bne	r3,zero,100023c8 <__alt_data_end+0xf80023c8>
100023d4:	1105c83a 	sub	r2,r2,r4
100023d8:	f800283a 	ret
100023dc:	2005883a 	mov	r2,r4
100023e0:	003fe706 	br	10002380 <__alt_data_end+0xf8002380>
100023e4:	0005883a 	mov	r2,zero
100023e8:	f800283a 	ret

100023ec <___vfprintf_internal_r>:
100023ec:	deffb804 	addi	sp,sp,-288
100023f0:	dfc04715 	stw	ra,284(sp)
100023f4:	ddc04515 	stw	r23,276(sp)
100023f8:	dd404315 	stw	r21,268(sp)
100023fc:	d9002d15 	stw	r4,180(sp)
10002400:	282f883a 	mov	r23,r5
10002404:	302b883a 	mov	r21,r6
10002408:	d9c02e15 	stw	r7,184(sp)
1000240c:	df004615 	stw	fp,280(sp)
10002410:	dd804415 	stw	r22,272(sp)
10002414:	dd004215 	stw	r20,264(sp)
10002418:	dcc04115 	stw	r19,260(sp)
1000241c:	dc804015 	stw	r18,256(sp)
10002420:	dc403f15 	stw	r17,252(sp)
10002424:	dc003e15 	stw	r16,248(sp)
10002428:	000732c0 	call	1000732c <_localeconv_r>
1000242c:	10800017 	ldw	r2,0(r2)
10002430:	1009883a 	mov	r4,r2
10002434:	d8803415 	stw	r2,208(sp)
10002438:	00023540 	call	10002354 <strlen>
1000243c:	d8803715 	stw	r2,220(sp)
10002440:	d8802d17 	ldw	r2,180(sp)
10002444:	10000226 	beq	r2,zero,10002450 <___vfprintf_internal_r+0x64>
10002448:	10800e17 	ldw	r2,56(r2)
1000244c:	1000fb26 	beq	r2,zero,1000283c <___vfprintf_internal_r+0x450>
10002450:	b880030b 	ldhu	r2,12(r23)
10002454:	10c8000c 	andi	r3,r2,8192
10002458:	1800061e 	bne	r3,zero,10002474 <___vfprintf_internal_r+0x88>
1000245c:	b9001917 	ldw	r4,100(r23)
10002460:	00f7ffc4 	movi	r3,-8193
10002464:	10880014 	ori	r2,r2,8192
10002468:	20c6703a 	and	r3,r4,r3
1000246c:	b880030d 	sth	r2,12(r23)
10002470:	b8c01915 	stw	r3,100(r23)
10002474:	10c0020c 	andi	r3,r2,8
10002478:	1800c326 	beq	r3,zero,10002788 <___vfprintf_internal_r+0x39c>
1000247c:	b8c00417 	ldw	r3,16(r23)
10002480:	1800c126 	beq	r3,zero,10002788 <___vfprintf_internal_r+0x39c>
10002484:	1080068c 	andi	r2,r2,26
10002488:	00c00284 	movi	r3,10
1000248c:	10c0c626 	beq	r2,r3,100027a8 <___vfprintf_internal_r+0x3bc>
10002490:	d8c00404 	addi	r3,sp,16
10002494:	05040074 	movhi	r20,4097
10002498:	d9001e04 	addi	r4,sp,120
1000249c:	a5086c84 	addi	r20,r20,8626
100024a0:	d8c01e15 	stw	r3,120(sp)
100024a4:	d8002015 	stw	zero,128(sp)
100024a8:	d8001f15 	stw	zero,124(sp)
100024ac:	d8003315 	stw	zero,204(sp)
100024b0:	d8003615 	stw	zero,216(sp)
100024b4:	d8003815 	stw	zero,224(sp)
100024b8:	1811883a 	mov	r8,r3
100024bc:	d8003915 	stw	zero,228(sp)
100024c0:	d8003a15 	stw	zero,232(sp)
100024c4:	d8002f15 	stw	zero,188(sp)
100024c8:	d9002815 	stw	r4,160(sp)
100024cc:	a8800007 	ldb	r2,0(r21)
100024d0:	10028b26 	beq	r2,zero,10002f00 <___vfprintf_internal_r+0xb14>
100024d4:	00c00944 	movi	r3,37
100024d8:	a823883a 	mov	r17,r21
100024dc:	10c0021e 	bne	r2,r3,100024e8 <___vfprintf_internal_r+0xfc>
100024e0:	00001406 	br	10002534 <___vfprintf_internal_r+0x148>
100024e4:	10c00326 	beq	r2,r3,100024f4 <___vfprintf_internal_r+0x108>
100024e8:	8c400044 	addi	r17,r17,1
100024ec:	88800007 	ldb	r2,0(r17)
100024f0:	103ffc1e 	bne	r2,zero,100024e4 <__alt_data_end+0xf80024e4>
100024f4:	8d61c83a 	sub	r16,r17,r21
100024f8:	80000e26 	beq	r16,zero,10002534 <___vfprintf_internal_r+0x148>
100024fc:	d8c02017 	ldw	r3,128(sp)
10002500:	d8801f17 	ldw	r2,124(sp)
10002504:	45400015 	stw	r21,0(r8)
10002508:	1c07883a 	add	r3,r3,r16
1000250c:	10800044 	addi	r2,r2,1
10002510:	d8c02015 	stw	r3,128(sp)
10002514:	44000115 	stw	r16,4(r8)
10002518:	d8801f15 	stw	r2,124(sp)
1000251c:	00c001c4 	movi	r3,7
10002520:	1880a916 	blt	r3,r2,100027c8 <___vfprintf_internal_r+0x3dc>
10002524:	42000204 	addi	r8,r8,8
10002528:	d9402f17 	ldw	r5,188(sp)
1000252c:	2c0b883a 	add	r5,r5,r16
10002530:	d9402f15 	stw	r5,188(sp)
10002534:	88800007 	ldb	r2,0(r17)
10002538:	1000aa26 	beq	r2,zero,100027e4 <___vfprintf_internal_r+0x3f8>
1000253c:	8d400044 	addi	r21,r17,1
10002540:	8c400047 	ldb	r17,1(r17)
10002544:	0021883a 	mov	r16,zero
10002548:	00bfffc4 	movi	r2,-1
1000254c:	0025883a 	mov	r18,zero
10002550:	dc002905 	stb	r16,164(sp)
10002554:	d8002785 	stb	zero,158(sp)
10002558:	d8002b05 	stb	zero,172(sp)
1000255c:	d8802a15 	stw	r2,168(sp)
10002560:	d8003115 	stw	zero,196(sp)
10002564:	04c01604 	movi	r19,88
10002568:	05800244 	movi	r22,9
1000256c:	9021883a 	mov	r16,r18
10002570:	4039883a 	mov	fp,r8
10002574:	ad400044 	addi	r21,r21,1
10002578:	88bff804 	addi	r2,r17,-32
1000257c:	98833236 	bltu	r19,r2,10003248 <___vfprintf_internal_r+0xe5c>
10002580:	100490ba 	slli	r2,r2,2
10002584:	00c40034 	movhi	r3,4096
10002588:	18c96604 	addi	r3,r3,9624
1000258c:	10c5883a 	add	r2,r2,r3
10002590:	10800017 	ldw	r2,0(r2)
10002594:	1000683a 	jmp	r2
10002598:	10003140 	call	11000314 <_gp+0xfe43fc>
1000259c:	10003248 	cmpgei	zero,r2,201
100025a0:	10003248 	cmpgei	zero,r2,201
100025a4:	10003160 	cmpeqi	zero,r2,197
100025a8:	10003248 	cmpgei	zero,r2,201
100025ac:	10003248 	cmpgei	zero,r2,201
100025b0:	10003248 	cmpgei	zero,r2,201
100025b4:	10003248 	cmpgei	zero,r2,201
100025b8:	10003248 	cmpgei	zero,r2,201
100025bc:	10003248 	cmpgei	zero,r2,201
100025c0:	10002848 	cmpgei	zero,r2,161
100025c4:	10003050 	cmplti	zero,r2,193
100025c8:	10003248 	cmpgei	zero,r2,201
100025cc:	1000270c 	andi	zero,r2,156
100025d0:	1000286c 	andhi	zero,r2,161
100025d4:	10003248 	cmpgei	zero,r2,201
100025d8:	100028bc 	xorhi	zero,r2,162
100025dc:	100028c8 	cmpgei	zero,r2,163
100025e0:	100028c8 	cmpgei	zero,r2,163
100025e4:	100028c8 	cmpgei	zero,r2,163
100025e8:	100028c8 	cmpgei	zero,r2,163
100025ec:	100028c8 	cmpgei	zero,r2,163
100025f0:	100028c8 	cmpgei	zero,r2,163
100025f4:	100028c8 	cmpgei	zero,r2,163
100025f8:	100028c8 	cmpgei	zero,r2,163
100025fc:	100028c8 	cmpgei	zero,r2,163
10002600:	10003248 	cmpgei	zero,r2,201
10002604:	10003248 	cmpgei	zero,r2,201
10002608:	10003248 	cmpgei	zero,r2,201
1000260c:	10003248 	cmpgei	zero,r2,201
10002610:	10003248 	cmpgei	zero,r2,201
10002614:	10003248 	cmpgei	zero,r2,201
10002618:	10003248 	cmpgei	zero,r2,201
1000261c:	10003248 	cmpgei	zero,r2,201
10002620:	10003248 	cmpgei	zero,r2,201
10002624:	10003248 	cmpgei	zero,r2,201
10002628:	10002904 	addi	zero,r2,164
1000262c:	100029cc 	andi	zero,r2,167
10002630:	10003248 	cmpgei	zero,r2,201
10002634:	100029cc 	andi	zero,r2,167
10002638:	10003248 	cmpgei	zero,r2,201
1000263c:	10003248 	cmpgei	zero,r2,201
10002640:	10003248 	cmpgei	zero,r2,201
10002644:	10003248 	cmpgei	zero,r2,201
10002648:	10002a78 	rdprs	zero,r2,169
1000264c:	10003248 	cmpgei	zero,r2,201
10002650:	10003248 	cmpgei	zero,r2,201
10002654:	10002a84 	addi	zero,r2,170
10002658:	10003248 	cmpgei	zero,r2,201
1000265c:	10003248 	cmpgei	zero,r2,201
10002660:	10003248 	cmpgei	zero,r2,201
10002664:	10003248 	cmpgei	zero,r2,201
10002668:	10003248 	cmpgei	zero,r2,201
1000266c:	10002f08 	cmpgei	zero,r2,188
10002670:	10003248 	cmpgei	zero,r2,201
10002674:	10003248 	cmpgei	zero,r2,201
10002678:	10002f74 	orhi	zero,r2,189
1000267c:	10003248 	cmpgei	zero,r2,201
10002680:	10003248 	cmpgei	zero,r2,201
10002684:	10003248 	cmpgei	zero,r2,201
10002688:	10003248 	cmpgei	zero,r2,201
1000268c:	10003248 	cmpgei	zero,r2,201
10002690:	10003248 	cmpgei	zero,r2,201
10002694:	10003248 	cmpgei	zero,r2,201
10002698:	10003248 	cmpgei	zero,r2,201
1000269c:	10003248 	cmpgei	zero,r2,201
100026a0:	10003248 	cmpgei	zero,r2,201
100026a4:	100031ec 	andhi	zero,r2,199
100026a8:	1000316c 	andhi	zero,r2,197
100026ac:	100029cc 	andi	zero,r2,167
100026b0:	100029cc 	andi	zero,r2,167
100026b4:	100029cc 	andi	zero,r2,167
100026b8:	1000318c 	andi	zero,r2,198
100026bc:	1000316c 	andhi	zero,r2,197
100026c0:	10003248 	cmpgei	zero,r2,201
100026c4:	10003248 	cmpgei	zero,r2,201
100026c8:	10003198 	cmpnei	zero,r2,198
100026cc:	10003248 	cmpgei	zero,r2,201
100026d0:	100031ac 	andhi	zero,r2,198
100026d4:	10003030 	cmpltui	zero,r2,192
100026d8:	10002718 	cmpnei	zero,r2,156
100026dc:	10003068 	cmpgeui	zero,r2,193
100026e0:	10003248 	cmpgei	zero,r2,201
100026e4:	10003074 	orhi	zero,r2,193
100026e8:	10003248 	cmpgei	zero,r2,201
100026ec:	100030d8 	cmpnei	zero,r2,195
100026f0:	10003248 	cmpgei	zero,r2,201
100026f4:	10003248 	cmpgei	zero,r2,201
100026f8:	100030f8 	rdprs	zero,r2,195
100026fc:	d8c03117 	ldw	r3,196(sp)
10002700:	d8802e15 	stw	r2,184(sp)
10002704:	00c7c83a 	sub	r3,zero,r3
10002708:	d8c03115 	stw	r3,196(sp)
1000270c:	84000114 	ori	r16,r16,4
10002710:	ac400007 	ldb	r17,0(r21)
10002714:	003f9706 	br	10002574 <__alt_data_end+0xf8002574>
10002718:	00800c04 	movi	r2,48
1000271c:	d8802705 	stb	r2,156(sp)
10002720:	00801e04 	movi	r2,120
10002724:	d8802745 	stb	r2,157(sp)
10002728:	d9002a17 	ldw	r4,168(sp)
1000272c:	d8802e17 	ldw	r2,184(sp)
10002730:	d8002785 	stb	zero,158(sp)
10002734:	e011883a 	mov	r8,fp
10002738:	10c00104 	addi	r3,r2,4
1000273c:	14c00017 	ldw	r19,0(r2)
10002740:	002d883a 	mov	r22,zero
10002744:	80800094 	ori	r2,r16,2
10002748:	2002ca16 	blt	r4,zero,10003274 <___vfprintf_internal_r+0xe88>
1000274c:	00bfdfc4 	movi	r2,-129
10002750:	80a4703a 	and	r18,r16,r2
10002754:	d8c02e15 	stw	r3,184(sp)
10002758:	94800094 	ori	r18,r18,2
1000275c:	9802b41e 	bne	r19,zero,10003230 <___vfprintf_internal_r+0xe44>
10002760:	01440074 	movhi	r5,4097
10002764:	29486504 	addi	r5,r5,8596
10002768:	d9403915 	stw	r5,228(sp)
1000276c:	04401e04 	movi	r17,120
10002770:	d8802a17 	ldw	r2,168(sp)
10002774:	0039883a 	mov	fp,zero
10002778:	1001fa26 	beq	r2,zero,10002f64 <___vfprintf_internal_r+0xb78>
1000277c:	0027883a 	mov	r19,zero
10002780:	002d883a 	mov	r22,zero
10002784:	00021906 	br	10002fec <___vfprintf_internal_r+0xc00>
10002788:	d9002d17 	ldw	r4,180(sp)
1000278c:	b80b883a 	mov	r5,r23
10002790:	00047a00 	call	100047a0 <__swsetup_r>
10002794:	1005dc1e 	bne	r2,zero,10003f08 <___vfprintf_internal_r+0x1b1c>
10002798:	b880030b 	ldhu	r2,12(r23)
1000279c:	00c00284 	movi	r3,10
100027a0:	1080068c 	andi	r2,r2,26
100027a4:	10ff3a1e 	bne	r2,r3,10002490 <__alt_data_end+0xf8002490>
100027a8:	b880038f 	ldh	r2,14(r23)
100027ac:	103f3816 	blt	r2,zero,10002490 <__alt_data_end+0xf8002490>
100027b0:	d9c02e17 	ldw	r7,184(sp)
100027b4:	d9002d17 	ldw	r4,180(sp)
100027b8:	a80d883a 	mov	r6,r21
100027bc:	b80b883a 	mov	r5,r23
100027c0:	00046e40 	call	100046e4 <__sbprintf>
100027c4:	00001106 	br	1000280c <___vfprintf_internal_r+0x420>
100027c8:	d9002d17 	ldw	r4,180(sp)
100027cc:	d9801e04 	addi	r6,sp,120
100027d0:	b80b883a 	mov	r5,r23
100027d4:	0009bcc0 	call	10009bcc <__sprint_r>
100027d8:	1000081e 	bne	r2,zero,100027fc <___vfprintf_internal_r+0x410>
100027dc:	da000404 	addi	r8,sp,16
100027e0:	003f5106 	br	10002528 <__alt_data_end+0xf8002528>
100027e4:	d8802017 	ldw	r2,128(sp)
100027e8:	10000426 	beq	r2,zero,100027fc <___vfprintf_internal_r+0x410>
100027ec:	d9002d17 	ldw	r4,180(sp)
100027f0:	d9801e04 	addi	r6,sp,120
100027f4:	b80b883a 	mov	r5,r23
100027f8:	0009bcc0 	call	10009bcc <__sprint_r>
100027fc:	b880030b 	ldhu	r2,12(r23)
10002800:	1080100c 	andi	r2,r2,64
10002804:	1005c01e 	bne	r2,zero,10003f08 <___vfprintf_internal_r+0x1b1c>
10002808:	d8802f17 	ldw	r2,188(sp)
1000280c:	dfc04717 	ldw	ra,284(sp)
10002810:	df004617 	ldw	fp,280(sp)
10002814:	ddc04517 	ldw	r23,276(sp)
10002818:	dd804417 	ldw	r22,272(sp)
1000281c:	dd404317 	ldw	r21,268(sp)
10002820:	dd004217 	ldw	r20,264(sp)
10002824:	dcc04117 	ldw	r19,260(sp)
10002828:	dc804017 	ldw	r18,256(sp)
1000282c:	dc403f17 	ldw	r17,252(sp)
10002830:	dc003e17 	ldw	r16,248(sp)
10002834:	dec04804 	addi	sp,sp,288
10002838:	f800283a 	ret
1000283c:	d9002d17 	ldw	r4,180(sp)
10002840:	00067ac0 	call	100067ac <__sinit>
10002844:	003f0206 	br	10002450 <__alt_data_end+0xf8002450>
10002848:	d9002e17 	ldw	r4,184(sp)
1000284c:	d9402e17 	ldw	r5,184(sp)
10002850:	21000017 	ldw	r4,0(r4)
10002854:	28800104 	addi	r2,r5,4
10002858:	d9003115 	stw	r4,196(sp)
1000285c:	203fa716 	blt	r4,zero,100026fc <__alt_data_end+0xf80026fc>
10002860:	d8802e15 	stw	r2,184(sp)
10002864:	ac400007 	ldb	r17,0(r21)
10002868:	003f4206 	br	10002574 <__alt_data_end+0xf8002574>
1000286c:	ac400007 	ldb	r17,0(r21)
10002870:	01000a84 	movi	r4,42
10002874:	a8c00044 	addi	r3,r21,1
10002878:	89075826 	beq	r17,r4,100045dc <___vfprintf_internal_r+0x21f0>
1000287c:	8cbff404 	addi	r18,r17,-48
10002880:	b486ae36 	bltu	r22,r18,1000433c <___vfprintf_internal_r+0x1f50>
10002884:	0009883a 	mov	r4,zero
10002888:	1823883a 	mov	r17,r3
1000288c:	01400284 	movi	r5,10
10002890:	000c8880 	call	1000c888 <__mulsi3>
10002894:	88c00007 	ldb	r3,0(r17)
10002898:	1489883a 	add	r4,r2,r18
1000289c:	8d400044 	addi	r21,r17,1
100028a0:	1cbff404 	addi	r18,r3,-48
100028a4:	a823883a 	mov	r17,r21
100028a8:	b4bff82e 	bgeu	r22,r18,1000288c <__alt_data_end+0xf800288c>
100028ac:	1823883a 	mov	r17,r3
100028b0:	2005f616 	blt	r4,zero,1000408c <___vfprintf_internal_r+0x1ca0>
100028b4:	d9002a15 	stw	r4,168(sp)
100028b8:	003f2f06 	br	10002578 <__alt_data_end+0xf8002578>
100028bc:	84002014 	ori	r16,r16,128
100028c0:	ac400007 	ldb	r17,0(r21)
100028c4:	003f2b06 	br	10002574 <__alt_data_end+0xf8002574>
100028c8:	8cbff404 	addi	r18,r17,-48
100028cc:	d8003115 	stw	zero,196(sp)
100028d0:	0009883a 	mov	r4,zero
100028d4:	a823883a 	mov	r17,r21
100028d8:	01400284 	movi	r5,10
100028dc:	000c8880 	call	1000c888 <__mulsi3>
100028e0:	88c00007 	ldb	r3,0(r17)
100028e4:	9089883a 	add	r4,r18,r2
100028e8:	ad400044 	addi	r21,r21,1
100028ec:	1cbff404 	addi	r18,r3,-48
100028f0:	a823883a 	mov	r17,r21
100028f4:	b4bff82e 	bgeu	r22,r18,100028d8 <__alt_data_end+0xf80028d8>
100028f8:	1823883a 	mov	r17,r3
100028fc:	d9003115 	stw	r4,196(sp)
10002900:	003f1d06 	br	10002578 <__alt_data_end+0xf8002578>
10002904:	8025883a 	mov	r18,r16
10002908:	dc002903 	ldbu	r16,164(sp)
1000290c:	e011883a 	mov	r8,fp
10002910:	84003fcc 	andi	r16,r16,255
10002914:	8007531e 	bne	r16,zero,10004664 <___vfprintf_internal_r+0x2278>
10002918:	94800414 	ori	r18,r18,16
1000291c:	9080080c 	andi	r2,r18,32
10002920:	1003a326 	beq	r2,zero,100037b0 <___vfprintf_internal_r+0x13c4>
10002924:	d9002e17 	ldw	r4,184(sp)
10002928:	20800117 	ldw	r2,4(r4)
1000292c:	24c00017 	ldw	r19,0(r4)
10002930:	21000204 	addi	r4,r4,8
10002934:	d9002e15 	stw	r4,184(sp)
10002938:	102d883a 	mov	r22,r2
1000293c:	10047316 	blt	r2,zero,10003b0c <___vfprintf_internal_r+0x1720>
10002940:	d9002a17 	ldw	r4,168(sp)
10002944:	df002783 	ldbu	fp,158(sp)
10002948:	2003e416 	blt	r4,zero,100038dc <___vfprintf_internal_r+0x14f0>
1000294c:	00ffdfc4 	movi	r3,-129
10002950:	9d84b03a 	or	r2,r19,r22
10002954:	90e4703a 	and	r18,r18,r3
10002958:	10018026 	beq	r2,zero,10002f5c <___vfprintf_internal_r+0xb70>
1000295c:	b003ab26 	beq	r22,zero,1000380c <___vfprintf_internal_r+0x1420>
10002960:	dc402915 	stw	r17,164(sp)
10002964:	dc001e04 	addi	r16,sp,120
10002968:	b023883a 	mov	r17,r22
1000296c:	402d883a 	mov	r22,r8
10002970:	9809883a 	mov	r4,r19
10002974:	880b883a 	mov	r5,r17
10002978:	01800284 	movi	r6,10
1000297c:	000f883a 	mov	r7,zero
10002980:	000c1100 	call	1000c110 <__umoddi3>
10002984:	10800c04 	addi	r2,r2,48
10002988:	843fffc4 	addi	r16,r16,-1
1000298c:	9809883a 	mov	r4,r19
10002990:	880b883a 	mov	r5,r17
10002994:	80800005 	stb	r2,0(r16)
10002998:	01800284 	movi	r6,10
1000299c:	000f883a 	mov	r7,zero
100029a0:	000bb140 	call	1000bb14 <__udivdi3>
100029a4:	1027883a 	mov	r19,r2
100029a8:	10c4b03a 	or	r2,r2,r3
100029ac:	1823883a 	mov	r17,r3
100029b0:	103fef1e 	bne	r2,zero,10002970 <__alt_data_end+0xf8002970>
100029b4:	d8c02817 	ldw	r3,160(sp)
100029b8:	dc402917 	ldw	r17,164(sp)
100029bc:	b011883a 	mov	r8,r22
100029c0:	1c07c83a 	sub	r3,r3,r16
100029c4:	d8c02b15 	stw	r3,172(sp)
100029c8:	00005f06 	br	10002b48 <___vfprintf_internal_r+0x75c>
100029cc:	8025883a 	mov	r18,r16
100029d0:	dc002903 	ldbu	r16,164(sp)
100029d4:	e011883a 	mov	r8,fp
100029d8:	84003fcc 	andi	r16,r16,255
100029dc:	80071e1e 	bne	r16,zero,10004658 <___vfprintf_internal_r+0x226c>
100029e0:	9080020c 	andi	r2,r18,8
100029e4:	1004af26 	beq	r2,zero,10003ca4 <___vfprintf_internal_r+0x18b8>
100029e8:	d9002e17 	ldw	r4,184(sp)
100029ec:	d9402e17 	ldw	r5,184(sp)
100029f0:	d8802e17 	ldw	r2,184(sp)
100029f4:	21000017 	ldw	r4,0(r4)
100029f8:	29400117 	ldw	r5,4(r5)
100029fc:	10800204 	addi	r2,r2,8
10002a00:	d9003615 	stw	r4,216(sp)
10002a04:	d9403815 	stw	r5,224(sp)
10002a08:	d8802e15 	stw	r2,184(sp)
10002a0c:	d9003617 	ldw	r4,216(sp)
10002a10:	d9403817 	ldw	r5,224(sp)
10002a14:	da003d15 	stw	r8,244(sp)
10002a18:	04000044 	movi	r16,1
10002a1c:	00097f00 	call	100097f0 <__fpclassifyd>
10002a20:	da003d17 	ldw	r8,244(sp)
10002a24:	1404441e 	bne	r2,r16,10003b38 <___vfprintf_internal_r+0x174c>
10002a28:	d9003617 	ldw	r4,216(sp)
10002a2c:	d9403817 	ldw	r5,224(sp)
10002a30:	000d883a 	mov	r6,zero
10002a34:	000f883a 	mov	r7,zero
10002a38:	000dc900 	call	1000dc90 <__ledf2>
10002a3c:	da003d17 	ldw	r8,244(sp)
10002a40:	1005e316 	blt	r2,zero,100041d0 <___vfprintf_internal_r+0x1de4>
10002a44:	df002783 	ldbu	fp,158(sp)
10002a48:	008011c4 	movi	r2,71
10002a4c:	1445580e 	bge	r2,r17,10003fb0 <___vfprintf_internal_r+0x1bc4>
10002a50:	04040074 	movhi	r16,4097
10002a54:	84085d04 	addi	r16,r16,8564
10002a58:	00c000c4 	movi	r3,3
10002a5c:	00bfdfc4 	movi	r2,-129
10002a60:	d8c02915 	stw	r3,164(sp)
10002a64:	90a4703a 	and	r18,r18,r2
10002a68:	d8c02b15 	stw	r3,172(sp)
10002a6c:	d8002a15 	stw	zero,168(sp)
10002a70:	d8003215 	stw	zero,200(sp)
10002a74:	00003a06 	br	10002b60 <___vfprintf_internal_r+0x774>
10002a78:	84000214 	ori	r16,r16,8
10002a7c:	ac400007 	ldb	r17,0(r21)
10002a80:	003ebc06 	br	10002574 <__alt_data_end+0xf8002574>
10002a84:	8025883a 	mov	r18,r16
10002a88:	dc002903 	ldbu	r16,164(sp)
10002a8c:	e011883a 	mov	r8,fp
10002a90:	84003fcc 	andi	r16,r16,255
10002a94:	8007001e 	bne	r16,zero,10004698 <___vfprintf_internal_r+0x22ac>
10002a98:	94800414 	ori	r18,r18,16
10002a9c:	9080080c 	andi	r2,r18,32
10002aa0:	1002fa26 	beq	r2,zero,1000368c <___vfprintf_internal_r+0x12a0>
10002aa4:	d9002e17 	ldw	r4,184(sp)
10002aa8:	d9402a17 	ldw	r5,168(sp)
10002aac:	d8002785 	stb	zero,158(sp)
10002ab0:	20800204 	addi	r2,r4,8
10002ab4:	24c00017 	ldw	r19,0(r4)
10002ab8:	25800117 	ldw	r22,4(r4)
10002abc:	2804b116 	blt	r5,zero,10003d84 <___vfprintf_internal_r+0x1998>
10002ac0:	013fdfc4 	movi	r4,-129
10002ac4:	9d86b03a 	or	r3,r19,r22
10002ac8:	d8802e15 	stw	r2,184(sp)
10002acc:	9124703a 	and	r18,r18,r4
10002ad0:	1802fb1e 	bne	r3,zero,100036c0 <___vfprintf_internal_r+0x12d4>
10002ad4:	d8c02a17 	ldw	r3,168(sp)
10002ad8:	0039883a 	mov	fp,zero
10002adc:	1805e526 	beq	r3,zero,10004274 <___vfprintf_internal_r+0x1e88>
10002ae0:	0027883a 	mov	r19,zero
10002ae4:	002d883a 	mov	r22,zero
10002ae8:	dc001e04 	addi	r16,sp,120
10002aec:	9806d0fa 	srli	r3,r19,3
10002af0:	b008977a 	slli	r4,r22,29
10002af4:	b02cd0fa 	srli	r22,r22,3
10002af8:	9cc001cc 	andi	r19,r19,7
10002afc:	98800c04 	addi	r2,r19,48
10002b00:	843fffc4 	addi	r16,r16,-1
10002b04:	20e6b03a 	or	r19,r4,r3
10002b08:	80800005 	stb	r2,0(r16)
10002b0c:	9d86b03a 	or	r3,r19,r22
10002b10:	183ff61e 	bne	r3,zero,10002aec <__alt_data_end+0xf8002aec>
10002b14:	90c0004c 	andi	r3,r18,1
10002b18:	18014126 	beq	r3,zero,10003020 <___vfprintf_internal_r+0xc34>
10002b1c:	10803fcc 	andi	r2,r2,255
10002b20:	1080201c 	xori	r2,r2,128
10002b24:	10bfe004 	addi	r2,r2,-128
10002b28:	00c00c04 	movi	r3,48
10002b2c:	10c13c26 	beq	r2,r3,10003020 <___vfprintf_internal_r+0xc34>
10002b30:	80ffffc5 	stb	r3,-1(r16)
10002b34:	d8c02817 	ldw	r3,160(sp)
10002b38:	80bfffc4 	addi	r2,r16,-1
10002b3c:	1021883a 	mov	r16,r2
10002b40:	1887c83a 	sub	r3,r3,r2
10002b44:	d8c02b15 	stw	r3,172(sp)
10002b48:	d8802b17 	ldw	r2,172(sp)
10002b4c:	d9002a17 	ldw	r4,168(sp)
10002b50:	1100010e 	bge	r2,r4,10002b58 <___vfprintf_internal_r+0x76c>
10002b54:	2005883a 	mov	r2,r4
10002b58:	d8802915 	stw	r2,164(sp)
10002b5c:	d8003215 	stw	zero,200(sp)
10002b60:	e7003fcc 	andi	fp,fp,255
10002b64:	e700201c 	xori	fp,fp,128
10002b68:	e73fe004 	addi	fp,fp,-128
10002b6c:	e0000326 	beq	fp,zero,10002b7c <___vfprintf_internal_r+0x790>
10002b70:	d8c02917 	ldw	r3,164(sp)
10002b74:	18c00044 	addi	r3,r3,1
10002b78:	d8c02915 	stw	r3,164(sp)
10002b7c:	90c0008c 	andi	r3,r18,2
10002b80:	d8c02c15 	stw	r3,176(sp)
10002b84:	18000326 	beq	r3,zero,10002b94 <___vfprintf_internal_r+0x7a8>
10002b88:	d8c02917 	ldw	r3,164(sp)
10002b8c:	18c00084 	addi	r3,r3,2
10002b90:	d8c02915 	stw	r3,164(sp)
10002b94:	90c0210c 	andi	r3,r18,132
10002b98:	d8c03015 	stw	r3,192(sp)
10002b9c:	1801c51e 	bne	r3,zero,100032b4 <___vfprintf_internal_r+0xec8>
10002ba0:	d9003117 	ldw	r4,196(sp)
10002ba4:	d8c02917 	ldw	r3,164(sp)
10002ba8:	20e7c83a 	sub	r19,r4,r3
10002bac:	04c1c10e 	bge	zero,r19,100032b4 <___vfprintf_internal_r+0xec8>
10002bb0:	02400404 	movi	r9,16
10002bb4:	d8c02017 	ldw	r3,128(sp)
10002bb8:	d8801f17 	ldw	r2,124(sp)
10002bbc:	4cc52f0e 	bge	r9,r19,1000407c <___vfprintf_internal_r+0x1c90>
10002bc0:	01440074 	movhi	r5,4097
10002bc4:	29487084 	addi	r5,r5,8642
10002bc8:	dc403b15 	stw	r17,236(sp)
10002bcc:	d9403515 	stw	r5,212(sp)
10002bd0:	9823883a 	mov	r17,r19
10002bd4:	482d883a 	mov	r22,r9
10002bd8:	9027883a 	mov	r19,r18
10002bdc:	070001c4 	movi	fp,7
10002be0:	8025883a 	mov	r18,r16
10002be4:	dc002d17 	ldw	r16,180(sp)
10002be8:	00000306 	br	10002bf8 <___vfprintf_internal_r+0x80c>
10002bec:	8c7ffc04 	addi	r17,r17,-16
10002bf0:	42000204 	addi	r8,r8,8
10002bf4:	b440130e 	bge	r22,r17,10002c44 <___vfprintf_internal_r+0x858>
10002bf8:	01040074 	movhi	r4,4097
10002bfc:	18c00404 	addi	r3,r3,16
10002c00:	10800044 	addi	r2,r2,1
10002c04:	21087084 	addi	r4,r4,8642
10002c08:	41000015 	stw	r4,0(r8)
10002c0c:	45800115 	stw	r22,4(r8)
10002c10:	d8c02015 	stw	r3,128(sp)
10002c14:	d8801f15 	stw	r2,124(sp)
10002c18:	e0bff40e 	bge	fp,r2,10002bec <__alt_data_end+0xf8002bec>
10002c1c:	d9801e04 	addi	r6,sp,120
10002c20:	b80b883a 	mov	r5,r23
10002c24:	8009883a 	mov	r4,r16
10002c28:	0009bcc0 	call	10009bcc <__sprint_r>
10002c2c:	103ef31e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10002c30:	8c7ffc04 	addi	r17,r17,-16
10002c34:	d8c02017 	ldw	r3,128(sp)
10002c38:	d8801f17 	ldw	r2,124(sp)
10002c3c:	da000404 	addi	r8,sp,16
10002c40:	b47fed16 	blt	r22,r17,10002bf8 <__alt_data_end+0xf8002bf8>
10002c44:	9021883a 	mov	r16,r18
10002c48:	9825883a 	mov	r18,r19
10002c4c:	8827883a 	mov	r19,r17
10002c50:	dc403b17 	ldw	r17,236(sp)
10002c54:	d9403517 	ldw	r5,212(sp)
10002c58:	98c7883a 	add	r3,r19,r3
10002c5c:	10800044 	addi	r2,r2,1
10002c60:	41400015 	stw	r5,0(r8)
10002c64:	44c00115 	stw	r19,4(r8)
10002c68:	d8c02015 	stw	r3,128(sp)
10002c6c:	d8801f15 	stw	r2,124(sp)
10002c70:	010001c4 	movi	r4,7
10002c74:	2082c516 	blt	r4,r2,1000378c <___vfprintf_internal_r+0x13a0>
10002c78:	df002787 	ldb	fp,158(sp)
10002c7c:	42000204 	addi	r8,r8,8
10002c80:	e0000c26 	beq	fp,zero,10002cb4 <___vfprintf_internal_r+0x8c8>
10002c84:	d8801f17 	ldw	r2,124(sp)
10002c88:	d9002784 	addi	r4,sp,158
10002c8c:	18c00044 	addi	r3,r3,1
10002c90:	10800044 	addi	r2,r2,1
10002c94:	41000015 	stw	r4,0(r8)
10002c98:	01000044 	movi	r4,1
10002c9c:	41000115 	stw	r4,4(r8)
10002ca0:	d8c02015 	stw	r3,128(sp)
10002ca4:	d8801f15 	stw	r2,124(sp)
10002ca8:	010001c4 	movi	r4,7
10002cac:	20825e16 	blt	r4,r2,10003628 <___vfprintf_internal_r+0x123c>
10002cb0:	42000204 	addi	r8,r8,8
10002cb4:	d8802c17 	ldw	r2,176(sp)
10002cb8:	10000c26 	beq	r2,zero,10002cec <___vfprintf_internal_r+0x900>
10002cbc:	d8801f17 	ldw	r2,124(sp)
10002cc0:	d9002704 	addi	r4,sp,156
10002cc4:	18c00084 	addi	r3,r3,2
10002cc8:	10800044 	addi	r2,r2,1
10002ccc:	41000015 	stw	r4,0(r8)
10002cd0:	01000084 	movi	r4,2
10002cd4:	41000115 	stw	r4,4(r8)
10002cd8:	d8c02015 	stw	r3,128(sp)
10002cdc:	d8801f15 	stw	r2,124(sp)
10002ce0:	010001c4 	movi	r4,7
10002ce4:	20825816 	blt	r4,r2,10003648 <___vfprintf_internal_r+0x125c>
10002ce8:	42000204 	addi	r8,r8,8
10002cec:	d9003017 	ldw	r4,192(sp)
10002cf0:	00802004 	movi	r2,128
10002cf4:	2081bb26 	beq	r4,r2,100033e4 <___vfprintf_internal_r+0xff8>
10002cf8:	d9402a17 	ldw	r5,168(sp)
10002cfc:	d8802b17 	ldw	r2,172(sp)
10002d00:	28adc83a 	sub	r22,r5,r2
10002d04:	0580310e 	bge	zero,r22,10002dcc <___vfprintf_internal_r+0x9e0>
10002d08:	07000404 	movi	fp,16
10002d0c:	d8801f17 	ldw	r2,124(sp)
10002d10:	e584360e 	bge	fp,r22,10003dec <___vfprintf_internal_r+0x1a00>
10002d14:	01440074 	movhi	r5,4097
10002d18:	29486c84 	addi	r5,r5,8626
10002d1c:	dc402a15 	stw	r17,168(sp)
10002d20:	d9402c15 	stw	r5,176(sp)
10002d24:	b023883a 	mov	r17,r22
10002d28:	04c001c4 	movi	r19,7
10002d2c:	a82d883a 	mov	r22,r21
10002d30:	902b883a 	mov	r21,r18
10002d34:	8025883a 	mov	r18,r16
10002d38:	dc002d17 	ldw	r16,180(sp)
10002d3c:	00000306 	br	10002d4c <___vfprintf_internal_r+0x960>
10002d40:	8c7ffc04 	addi	r17,r17,-16
10002d44:	42000204 	addi	r8,r8,8
10002d48:	e440110e 	bge	fp,r17,10002d90 <___vfprintf_internal_r+0x9a4>
10002d4c:	18c00404 	addi	r3,r3,16
10002d50:	10800044 	addi	r2,r2,1
10002d54:	45000015 	stw	r20,0(r8)
10002d58:	47000115 	stw	fp,4(r8)
10002d5c:	d8c02015 	stw	r3,128(sp)
10002d60:	d8801f15 	stw	r2,124(sp)
10002d64:	98bff60e 	bge	r19,r2,10002d40 <__alt_data_end+0xf8002d40>
10002d68:	d9801e04 	addi	r6,sp,120
10002d6c:	b80b883a 	mov	r5,r23
10002d70:	8009883a 	mov	r4,r16
10002d74:	0009bcc0 	call	10009bcc <__sprint_r>
10002d78:	103ea01e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10002d7c:	8c7ffc04 	addi	r17,r17,-16
10002d80:	d8c02017 	ldw	r3,128(sp)
10002d84:	d8801f17 	ldw	r2,124(sp)
10002d88:	da000404 	addi	r8,sp,16
10002d8c:	e47fef16 	blt	fp,r17,10002d4c <__alt_data_end+0xf8002d4c>
10002d90:	9021883a 	mov	r16,r18
10002d94:	a825883a 	mov	r18,r21
10002d98:	b02b883a 	mov	r21,r22
10002d9c:	882d883a 	mov	r22,r17
10002da0:	dc402a17 	ldw	r17,168(sp)
10002da4:	d9002c17 	ldw	r4,176(sp)
10002da8:	1d87883a 	add	r3,r3,r22
10002dac:	10800044 	addi	r2,r2,1
10002db0:	41000015 	stw	r4,0(r8)
10002db4:	45800115 	stw	r22,4(r8)
10002db8:	d8c02015 	stw	r3,128(sp)
10002dbc:	d8801f15 	stw	r2,124(sp)
10002dc0:	010001c4 	movi	r4,7
10002dc4:	20821016 	blt	r4,r2,10003608 <___vfprintf_internal_r+0x121c>
10002dc8:	42000204 	addi	r8,r8,8
10002dcc:	9080400c 	andi	r2,r18,256
10002dd0:	10013a1e 	bne	r2,zero,100032bc <___vfprintf_internal_r+0xed0>
10002dd4:	d9402b17 	ldw	r5,172(sp)
10002dd8:	d8801f17 	ldw	r2,124(sp)
10002ddc:	44000015 	stw	r16,0(r8)
10002de0:	1947883a 	add	r3,r3,r5
10002de4:	10800044 	addi	r2,r2,1
10002de8:	41400115 	stw	r5,4(r8)
10002dec:	d8c02015 	stw	r3,128(sp)
10002df0:	d8801f15 	stw	r2,124(sp)
10002df4:	010001c4 	movi	r4,7
10002df8:	2081f516 	blt	r4,r2,100035d0 <___vfprintf_internal_r+0x11e4>
10002dfc:	42000204 	addi	r8,r8,8
10002e00:	9480010c 	andi	r18,r18,4
10002e04:	90003226 	beq	r18,zero,10002ed0 <___vfprintf_internal_r+0xae4>
10002e08:	d9403117 	ldw	r5,196(sp)
10002e0c:	d8802917 	ldw	r2,164(sp)
10002e10:	28a1c83a 	sub	r16,r5,r2
10002e14:	04002e0e 	bge	zero,r16,10002ed0 <___vfprintf_internal_r+0xae4>
10002e18:	04400404 	movi	r17,16
10002e1c:	d8801f17 	ldw	r2,124(sp)
10002e20:	8c04c40e 	bge	r17,r16,10004134 <___vfprintf_internal_r+0x1d48>
10002e24:	01440074 	movhi	r5,4097
10002e28:	29487084 	addi	r5,r5,8642
10002e2c:	d9403515 	stw	r5,212(sp)
10002e30:	048001c4 	movi	r18,7
10002e34:	dcc02d17 	ldw	r19,180(sp)
10002e38:	00000306 	br	10002e48 <___vfprintf_internal_r+0xa5c>
10002e3c:	843ffc04 	addi	r16,r16,-16
10002e40:	42000204 	addi	r8,r8,8
10002e44:	8c00130e 	bge	r17,r16,10002e94 <___vfprintf_internal_r+0xaa8>
10002e48:	01040074 	movhi	r4,4097
10002e4c:	18c00404 	addi	r3,r3,16
10002e50:	10800044 	addi	r2,r2,1
10002e54:	21087084 	addi	r4,r4,8642
10002e58:	41000015 	stw	r4,0(r8)
10002e5c:	44400115 	stw	r17,4(r8)
10002e60:	d8c02015 	stw	r3,128(sp)
10002e64:	d8801f15 	stw	r2,124(sp)
10002e68:	90bff40e 	bge	r18,r2,10002e3c <__alt_data_end+0xf8002e3c>
10002e6c:	d9801e04 	addi	r6,sp,120
10002e70:	b80b883a 	mov	r5,r23
10002e74:	9809883a 	mov	r4,r19
10002e78:	0009bcc0 	call	10009bcc <__sprint_r>
10002e7c:	103e5f1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10002e80:	843ffc04 	addi	r16,r16,-16
10002e84:	d8c02017 	ldw	r3,128(sp)
10002e88:	d8801f17 	ldw	r2,124(sp)
10002e8c:	da000404 	addi	r8,sp,16
10002e90:	8c3fed16 	blt	r17,r16,10002e48 <__alt_data_end+0xf8002e48>
10002e94:	d9403517 	ldw	r5,212(sp)
10002e98:	1c07883a 	add	r3,r3,r16
10002e9c:	10800044 	addi	r2,r2,1
10002ea0:	41400015 	stw	r5,0(r8)
10002ea4:	44000115 	stw	r16,4(r8)
10002ea8:	d8c02015 	stw	r3,128(sp)
10002eac:	d8801f15 	stw	r2,124(sp)
10002eb0:	010001c4 	movi	r4,7
10002eb4:	2080060e 	bge	r4,r2,10002ed0 <___vfprintf_internal_r+0xae4>
10002eb8:	d9002d17 	ldw	r4,180(sp)
10002ebc:	d9801e04 	addi	r6,sp,120
10002ec0:	b80b883a 	mov	r5,r23
10002ec4:	0009bcc0 	call	10009bcc <__sprint_r>
10002ec8:	103e4c1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10002ecc:	d8c02017 	ldw	r3,128(sp)
10002ed0:	d8803117 	ldw	r2,196(sp)
10002ed4:	d9002917 	ldw	r4,164(sp)
10002ed8:	1100010e 	bge	r2,r4,10002ee0 <___vfprintf_internal_r+0xaf4>
10002edc:	2005883a 	mov	r2,r4
10002ee0:	d9402f17 	ldw	r5,188(sp)
10002ee4:	288b883a 	add	r5,r5,r2
10002ee8:	d9402f15 	stw	r5,188(sp)
10002eec:	1801c01e 	bne	r3,zero,100035f0 <___vfprintf_internal_r+0x1204>
10002ef0:	a8800007 	ldb	r2,0(r21)
10002ef4:	d8001f15 	stw	zero,124(sp)
10002ef8:	da000404 	addi	r8,sp,16
10002efc:	103d751e 	bne	r2,zero,100024d4 <__alt_data_end+0xf80024d4>
10002f00:	a823883a 	mov	r17,r21
10002f04:	003d8b06 	br	10002534 <__alt_data_end+0xf8002534>
10002f08:	8025883a 	mov	r18,r16
10002f0c:	dc002903 	ldbu	r16,164(sp)
10002f10:	e011883a 	mov	r8,fp
10002f14:	84003fcc 	andi	r16,r16,255
10002f18:	8005e51e 	bne	r16,zero,100046b0 <___vfprintf_internal_r+0x22c4>
10002f1c:	94800414 	ori	r18,r18,16
10002f20:	9080080c 	andi	r2,r18,32
10002f24:	10022b26 	beq	r2,zero,100037d4 <___vfprintf_internal_r+0x13e8>
10002f28:	d9002e17 	ldw	r4,184(sp)
10002f2c:	d9402a17 	ldw	r5,168(sp)
10002f30:	d8002785 	stb	zero,158(sp)
10002f34:	20c00204 	addi	r3,r4,8
10002f38:	24c00017 	ldw	r19,0(r4)
10002f3c:	25800117 	ldw	r22,4(r4)
10002f40:	28042e16 	blt	r5,zero,10003ffc <___vfprintf_internal_r+0x1c10>
10002f44:	013fdfc4 	movi	r4,-129
10002f48:	9d84b03a 	or	r2,r19,r22
10002f4c:	d8c02e15 	stw	r3,184(sp)
10002f50:	9124703a 	and	r18,r18,r4
10002f54:	0039883a 	mov	fp,zero
10002f58:	103e801e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
10002f5c:	d9002a17 	ldw	r4,168(sp)
10002f60:	2002e01e 	bne	r4,zero,10003ae4 <___vfprintf_internal_r+0x16f8>
10002f64:	d8002a15 	stw	zero,168(sp)
10002f68:	d8002b15 	stw	zero,172(sp)
10002f6c:	dc001e04 	addi	r16,sp,120
10002f70:	003ef506 	br	10002b48 <__alt_data_end+0xf8002b48>
10002f74:	8025883a 	mov	r18,r16
10002f78:	dc002903 	ldbu	r16,164(sp)
10002f7c:	e011883a 	mov	r8,fp
10002f80:	84003fcc 	andi	r16,r16,255
10002f84:	8005ba1e 	bne	r16,zero,10004670 <___vfprintf_internal_r+0x2284>
10002f88:	01040074 	movhi	r4,4097
10002f8c:	21086004 	addi	r4,r4,8576
10002f90:	d9003915 	stw	r4,228(sp)
10002f94:	9080080c 	andi	r2,r18,32
10002f98:	10006126 	beq	r2,zero,10003120 <___vfprintf_internal_r+0xd34>
10002f9c:	d9402e17 	ldw	r5,184(sp)
10002fa0:	2cc00017 	ldw	r19,0(r5)
10002fa4:	2d800117 	ldw	r22,4(r5)
10002fa8:	29400204 	addi	r5,r5,8
10002fac:	d9402e15 	stw	r5,184(sp)
10002fb0:	9080004c 	andi	r2,r18,1
10002fb4:	1001ac26 	beq	r2,zero,10003668 <___vfprintf_internal_r+0x127c>
10002fb8:	9d84b03a 	or	r2,r19,r22
10002fbc:	10038526 	beq	r2,zero,10003dd4 <___vfprintf_internal_r+0x19e8>
10002fc0:	d8c02a17 	ldw	r3,168(sp)
10002fc4:	00800c04 	movi	r2,48
10002fc8:	d8802705 	stb	r2,156(sp)
10002fcc:	dc402745 	stb	r17,157(sp)
10002fd0:	d8002785 	stb	zero,158(sp)
10002fd4:	90800094 	ori	r2,r18,2
10002fd8:	18047916 	blt	r3,zero,100041c0 <___vfprintf_internal_r+0x1dd4>
10002fdc:	00bfdfc4 	movi	r2,-129
10002fe0:	90a4703a 	and	r18,r18,r2
10002fe4:	94800094 	ori	r18,r18,2
10002fe8:	0039883a 	mov	fp,zero
10002fec:	d9003917 	ldw	r4,228(sp)
10002ff0:	dc001e04 	addi	r16,sp,120
10002ff4:	988003cc 	andi	r2,r19,15
10002ff8:	b006973a 	slli	r3,r22,28
10002ffc:	2085883a 	add	r2,r4,r2
10003000:	9826d13a 	srli	r19,r19,4
10003004:	10800003 	ldbu	r2,0(r2)
10003008:	b02cd13a 	srli	r22,r22,4
1000300c:	843fffc4 	addi	r16,r16,-1
10003010:	1ce6b03a 	or	r19,r3,r19
10003014:	80800005 	stb	r2,0(r16)
10003018:	9d84b03a 	or	r2,r19,r22
1000301c:	103ff51e 	bne	r2,zero,10002ff4 <__alt_data_end+0xf8002ff4>
10003020:	d8c02817 	ldw	r3,160(sp)
10003024:	1c07c83a 	sub	r3,r3,r16
10003028:	d8c02b15 	stw	r3,172(sp)
1000302c:	003ec606 	br	10002b48 <__alt_data_end+0xf8002b48>
10003030:	8025883a 	mov	r18,r16
10003034:	dc002903 	ldbu	r16,164(sp)
10003038:	e011883a 	mov	r8,fp
1000303c:	84003fcc 	andi	r16,r16,255
10003040:	803e9626 	beq	r16,zero,10002a9c <__alt_data_end+0xf8002a9c>
10003044:	d8c02b03 	ldbu	r3,172(sp)
10003048:	d8c02785 	stb	r3,158(sp)
1000304c:	003e9306 	br	10002a9c <__alt_data_end+0xf8002a9c>
10003050:	00c00044 	movi	r3,1
10003054:	d8c02905 	stb	r3,164(sp)
10003058:	00c00ac4 	movi	r3,43
1000305c:	d8c02b05 	stb	r3,172(sp)
10003060:	ac400007 	ldb	r17,0(r21)
10003064:	003d4306 	br	10002574 <__alt_data_end+0xf8002574>
10003068:	84000814 	ori	r16,r16,32
1000306c:	ac400007 	ldb	r17,0(r21)
10003070:	003d4006 	br	10002574 <__alt_data_end+0xf8002574>
10003074:	d8802e17 	ldw	r2,184(sp)
10003078:	8025883a 	mov	r18,r16
1000307c:	d8002785 	stb	zero,158(sp)
10003080:	14000017 	ldw	r16,0(r2)
10003084:	e011883a 	mov	r8,fp
10003088:	14c00104 	addi	r19,r2,4
1000308c:	80042d26 	beq	r16,zero,10004144 <___vfprintf_internal_r+0x1d58>
10003090:	d8c02a17 	ldw	r3,168(sp)
10003094:	1803e416 	blt	r3,zero,10004028 <___vfprintf_internal_r+0x1c3c>
10003098:	180d883a 	mov	r6,r3
1000309c:	000b883a 	mov	r5,zero
100030a0:	8009883a 	mov	r4,r16
100030a4:	df003d15 	stw	fp,244(sp)
100030a8:	0007d240 	call	10007d24 <memchr>
100030ac:	da003d17 	ldw	r8,244(sp)
100030b0:	10046826 	beq	r2,zero,10004254 <___vfprintf_internal_r+0x1e68>
100030b4:	1405c83a 	sub	r2,r2,r16
100030b8:	d8802b15 	stw	r2,172(sp)
100030bc:	1003e016 	blt	r2,zero,10004040 <___vfprintf_internal_r+0x1c54>
100030c0:	df002783 	ldbu	fp,158(sp)
100030c4:	d8802915 	stw	r2,164(sp)
100030c8:	dcc02e15 	stw	r19,184(sp)
100030cc:	d8002a15 	stw	zero,168(sp)
100030d0:	d8003215 	stw	zero,200(sp)
100030d4:	003ea206 	br	10002b60 <__alt_data_end+0xf8002b60>
100030d8:	8025883a 	mov	r18,r16
100030dc:	dc002903 	ldbu	r16,164(sp)
100030e0:	e011883a 	mov	r8,fp
100030e4:	84003fcc 	andi	r16,r16,255
100030e8:	803f8d26 	beq	r16,zero,10002f20 <__alt_data_end+0xf8002f20>
100030ec:	d8c02b03 	ldbu	r3,172(sp)
100030f0:	d8c02785 	stb	r3,158(sp)
100030f4:	003f8a06 	br	10002f20 <__alt_data_end+0xf8002f20>
100030f8:	8025883a 	mov	r18,r16
100030fc:	dc002903 	ldbu	r16,164(sp)
10003100:	e011883a 	mov	r8,fp
10003104:	84003fcc 	andi	r16,r16,255
10003108:	8005661e 	bne	r16,zero,100046a4 <___vfprintf_internal_r+0x22b8>
1000310c:	01040074 	movhi	r4,4097
10003110:	21086504 	addi	r4,r4,8596
10003114:	d9003915 	stw	r4,228(sp)
10003118:	9080080c 	andi	r2,r18,32
1000311c:	103f9f1e 	bne	r2,zero,10002f9c <__alt_data_end+0xf8002f9c>
10003120:	9080040c 	andi	r2,r18,16
10003124:	1002eb26 	beq	r2,zero,10003cd4 <___vfprintf_internal_r+0x18e8>
10003128:	d8802e17 	ldw	r2,184(sp)
1000312c:	002d883a 	mov	r22,zero
10003130:	14c00017 	ldw	r19,0(r2)
10003134:	10800104 	addi	r2,r2,4
10003138:	d8802e15 	stw	r2,184(sp)
1000313c:	003f9c06 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003140:	d8802b07 	ldb	r2,172(sp)
10003144:	1002e11e 	bne	r2,zero,10003ccc <___vfprintf_internal_r+0x18e0>
10003148:	00c00044 	movi	r3,1
1000314c:	d8c02905 	stb	r3,164(sp)
10003150:	00c00804 	movi	r3,32
10003154:	d8c02b05 	stb	r3,172(sp)
10003158:	ac400007 	ldb	r17,0(r21)
1000315c:	003d0506 	br	10002574 <__alt_data_end+0xf8002574>
10003160:	84000054 	ori	r16,r16,1
10003164:	ac400007 	ldb	r17,0(r21)
10003168:	003d0206 	br	10002574 <__alt_data_end+0xf8002574>
1000316c:	8025883a 	mov	r18,r16
10003170:	dc002903 	ldbu	r16,164(sp)
10003174:	e011883a 	mov	r8,fp
10003178:	84003fcc 	andi	r16,r16,255
1000317c:	803de726 	beq	r16,zero,1000291c <__alt_data_end+0xf800291c>
10003180:	d8c02b03 	ldbu	r3,172(sp)
10003184:	d8c02785 	stb	r3,158(sp)
10003188:	003de406 	br	1000291c <__alt_data_end+0xf800291c>
1000318c:	84001014 	ori	r16,r16,64
10003190:	ac400007 	ldb	r17,0(r21)
10003194:	003cf706 	br	10002574 <__alt_data_end+0xf8002574>
10003198:	ac400007 	ldb	r17,0(r21)
1000319c:	00801b04 	movi	r2,108
100031a0:	88838f26 	beq	r17,r2,10003fe0 <___vfprintf_internal_r+0x1bf4>
100031a4:	84000414 	ori	r16,r16,16
100031a8:	003cf206 	br	10002574 <__alt_data_end+0xf8002574>
100031ac:	8025883a 	mov	r18,r16
100031b0:	dc002903 	ldbu	r16,164(sp)
100031b4:	e011883a 	mov	r8,fp
100031b8:	84003fcc 	andi	r16,r16,255
100031bc:	80053f1e 	bne	r16,zero,100046bc <___vfprintf_internal_r+0x22d0>
100031c0:	9080080c 	andi	r2,r18,32
100031c4:	1002d226 	beq	r2,zero,10003d10 <___vfprintf_internal_r+0x1924>
100031c8:	d9002e17 	ldw	r4,184(sp)
100031cc:	d9402f17 	ldw	r5,188(sp)
100031d0:	20800017 	ldw	r2,0(r4)
100031d4:	2807d7fa 	srai	r3,r5,31
100031d8:	21000104 	addi	r4,r4,4
100031dc:	d9002e15 	stw	r4,184(sp)
100031e0:	11400015 	stw	r5,0(r2)
100031e4:	10c00115 	stw	r3,4(r2)
100031e8:	003cb806 	br	100024cc <__alt_data_end+0xf80024cc>
100031ec:	d8c02e17 	ldw	r3,184(sp)
100031f0:	d9002e17 	ldw	r4,184(sp)
100031f4:	8025883a 	mov	r18,r16
100031f8:	18800017 	ldw	r2,0(r3)
100031fc:	21000104 	addi	r4,r4,4
10003200:	00c00044 	movi	r3,1
10003204:	e011883a 	mov	r8,fp
10003208:	d8c02915 	stw	r3,164(sp)
1000320c:	d8002785 	stb	zero,158(sp)
10003210:	d8801405 	stb	r2,80(sp)
10003214:	d9002e15 	stw	r4,184(sp)
10003218:	d8c02b15 	stw	r3,172(sp)
1000321c:	d8002a15 	stw	zero,168(sp)
10003220:	d8003215 	stw	zero,200(sp)
10003224:	dc001404 	addi	r16,sp,80
10003228:	0039883a 	mov	fp,zero
1000322c:	003e5306 	br	10002b7c <__alt_data_end+0xf8002b7c>
10003230:	01040074 	movhi	r4,4097
10003234:	21086504 	addi	r4,r4,8596
10003238:	0039883a 	mov	fp,zero
1000323c:	d9003915 	stw	r4,228(sp)
10003240:	04401e04 	movi	r17,120
10003244:	003f6906 	br	10002fec <__alt_data_end+0xf8002fec>
10003248:	8025883a 	mov	r18,r16
1000324c:	dc002903 	ldbu	r16,164(sp)
10003250:	e011883a 	mov	r8,fp
10003254:	84003fcc 	andi	r16,r16,255
10003258:	8005081e 	bne	r16,zero,1000467c <___vfprintf_internal_r+0x2290>
1000325c:	883d6126 	beq	r17,zero,100027e4 <__alt_data_end+0xf80027e4>
10003260:	00c00044 	movi	r3,1
10003264:	d8c02915 	stw	r3,164(sp)
10003268:	dc401405 	stb	r17,80(sp)
1000326c:	d8002785 	stb	zero,158(sp)
10003270:	003fe906 	br	10003218 <__alt_data_end+0xf8003218>
10003274:	01440074 	movhi	r5,4097
10003278:	29486504 	addi	r5,r5,8596
1000327c:	d9403915 	stw	r5,228(sp)
10003280:	d8c02e15 	stw	r3,184(sp)
10003284:	1025883a 	mov	r18,r2
10003288:	04401e04 	movi	r17,120
1000328c:	9d84b03a 	or	r2,r19,r22
10003290:	1000fc1e 	bne	r2,zero,10003684 <___vfprintf_internal_r+0x1298>
10003294:	0039883a 	mov	fp,zero
10003298:	00800084 	movi	r2,2
1000329c:	10803fcc 	andi	r2,r2,255
100032a0:	00c00044 	movi	r3,1
100032a4:	10c20f26 	beq	r2,r3,10003ae4 <___vfprintf_internal_r+0x16f8>
100032a8:	00c00084 	movi	r3,2
100032ac:	10fd3326 	beq	r2,r3,1000277c <__alt_data_end+0xf800277c>
100032b0:	003e0b06 	br	10002ae0 <__alt_data_end+0xf8002ae0>
100032b4:	d8c02017 	ldw	r3,128(sp)
100032b8:	003e7106 	br	10002c80 <__alt_data_end+0xf8002c80>
100032bc:	00801944 	movi	r2,101
100032c0:	14407e0e 	bge	r2,r17,100034bc <___vfprintf_internal_r+0x10d0>
100032c4:	d9003617 	ldw	r4,216(sp)
100032c8:	d9403817 	ldw	r5,224(sp)
100032cc:	000d883a 	mov	r6,zero
100032d0:	000f883a 	mov	r7,zero
100032d4:	d8c03c15 	stw	r3,240(sp)
100032d8:	da003d15 	stw	r8,244(sp)
100032dc:	000db2c0 	call	1000db2c <__eqdf2>
100032e0:	d8c03c17 	ldw	r3,240(sp)
100032e4:	da003d17 	ldw	r8,244(sp)
100032e8:	1000f71e 	bne	r2,zero,100036c8 <___vfprintf_internal_r+0x12dc>
100032ec:	d8801f17 	ldw	r2,124(sp)
100032f0:	01040074 	movhi	r4,4097
100032f4:	21086c04 	addi	r4,r4,8624
100032f8:	18c00044 	addi	r3,r3,1
100032fc:	10800044 	addi	r2,r2,1
10003300:	41000015 	stw	r4,0(r8)
10003304:	01000044 	movi	r4,1
10003308:	41000115 	stw	r4,4(r8)
1000330c:	d8c02015 	stw	r3,128(sp)
10003310:	d8801f15 	stw	r2,124(sp)
10003314:	010001c4 	movi	r4,7
10003318:	2082b816 	blt	r4,r2,10003dfc <___vfprintf_internal_r+0x1a10>
1000331c:	42000204 	addi	r8,r8,8
10003320:	d8802617 	ldw	r2,152(sp)
10003324:	d9403317 	ldw	r5,204(sp)
10003328:	11400216 	blt	r2,r5,10003334 <___vfprintf_internal_r+0xf48>
1000332c:	9080004c 	andi	r2,r18,1
10003330:	103eb326 	beq	r2,zero,10002e00 <__alt_data_end+0xf8002e00>
10003334:	d8803717 	ldw	r2,220(sp)
10003338:	d9003417 	ldw	r4,208(sp)
1000333c:	d9403717 	ldw	r5,220(sp)
10003340:	1887883a 	add	r3,r3,r2
10003344:	d8801f17 	ldw	r2,124(sp)
10003348:	41000015 	stw	r4,0(r8)
1000334c:	41400115 	stw	r5,4(r8)
10003350:	10800044 	addi	r2,r2,1
10003354:	d8c02015 	stw	r3,128(sp)
10003358:	d8801f15 	stw	r2,124(sp)
1000335c:	010001c4 	movi	r4,7
10003360:	20832916 	blt	r4,r2,10004008 <___vfprintf_internal_r+0x1c1c>
10003364:	42000204 	addi	r8,r8,8
10003368:	d8803317 	ldw	r2,204(sp)
1000336c:	143fffc4 	addi	r16,r2,-1
10003370:	043ea30e 	bge	zero,r16,10002e00 <__alt_data_end+0xf8002e00>
10003374:	04400404 	movi	r17,16
10003378:	d8801f17 	ldw	r2,124(sp)
1000337c:	8c00880e 	bge	r17,r16,100035a0 <___vfprintf_internal_r+0x11b4>
10003380:	01440074 	movhi	r5,4097
10003384:	29486c84 	addi	r5,r5,8626
10003388:	d9402c15 	stw	r5,176(sp)
1000338c:	058001c4 	movi	r22,7
10003390:	dcc02d17 	ldw	r19,180(sp)
10003394:	00000306 	br	100033a4 <___vfprintf_internal_r+0xfb8>
10003398:	42000204 	addi	r8,r8,8
1000339c:	843ffc04 	addi	r16,r16,-16
100033a0:	8c00820e 	bge	r17,r16,100035ac <___vfprintf_internal_r+0x11c0>
100033a4:	18c00404 	addi	r3,r3,16
100033a8:	10800044 	addi	r2,r2,1
100033ac:	45000015 	stw	r20,0(r8)
100033b0:	44400115 	stw	r17,4(r8)
100033b4:	d8c02015 	stw	r3,128(sp)
100033b8:	d8801f15 	stw	r2,124(sp)
100033bc:	b0bff60e 	bge	r22,r2,10003398 <__alt_data_end+0xf8003398>
100033c0:	d9801e04 	addi	r6,sp,120
100033c4:	b80b883a 	mov	r5,r23
100033c8:	9809883a 	mov	r4,r19
100033cc:	0009bcc0 	call	10009bcc <__sprint_r>
100033d0:	103d0a1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
100033d4:	d8c02017 	ldw	r3,128(sp)
100033d8:	d8801f17 	ldw	r2,124(sp)
100033dc:	da000404 	addi	r8,sp,16
100033e0:	003fee06 	br	1000339c <__alt_data_end+0xf800339c>
100033e4:	d9403117 	ldw	r5,196(sp)
100033e8:	d8802917 	ldw	r2,164(sp)
100033ec:	28adc83a 	sub	r22,r5,r2
100033f0:	05be410e 	bge	zero,r22,10002cf8 <__alt_data_end+0xf8002cf8>
100033f4:	07000404 	movi	fp,16
100033f8:	d8801f17 	ldw	r2,124(sp)
100033fc:	e5838f0e 	bge	fp,r22,1000423c <___vfprintf_internal_r+0x1e50>
10003400:	01440074 	movhi	r5,4097
10003404:	29486c84 	addi	r5,r5,8626
10003408:	dc403015 	stw	r17,192(sp)
1000340c:	d9402c15 	stw	r5,176(sp)
10003410:	b023883a 	mov	r17,r22
10003414:	04c001c4 	movi	r19,7
10003418:	a82d883a 	mov	r22,r21
1000341c:	902b883a 	mov	r21,r18
10003420:	8025883a 	mov	r18,r16
10003424:	dc002d17 	ldw	r16,180(sp)
10003428:	00000306 	br	10003438 <___vfprintf_internal_r+0x104c>
1000342c:	8c7ffc04 	addi	r17,r17,-16
10003430:	42000204 	addi	r8,r8,8
10003434:	e440110e 	bge	fp,r17,1000347c <___vfprintf_internal_r+0x1090>
10003438:	18c00404 	addi	r3,r3,16
1000343c:	10800044 	addi	r2,r2,1
10003440:	45000015 	stw	r20,0(r8)
10003444:	47000115 	stw	fp,4(r8)
10003448:	d8c02015 	stw	r3,128(sp)
1000344c:	d8801f15 	stw	r2,124(sp)
10003450:	98bff60e 	bge	r19,r2,1000342c <__alt_data_end+0xf800342c>
10003454:	d9801e04 	addi	r6,sp,120
10003458:	b80b883a 	mov	r5,r23
1000345c:	8009883a 	mov	r4,r16
10003460:	0009bcc0 	call	10009bcc <__sprint_r>
10003464:	103ce51e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003468:	8c7ffc04 	addi	r17,r17,-16
1000346c:	d8c02017 	ldw	r3,128(sp)
10003470:	d8801f17 	ldw	r2,124(sp)
10003474:	da000404 	addi	r8,sp,16
10003478:	e47fef16 	blt	fp,r17,10003438 <__alt_data_end+0xf8003438>
1000347c:	9021883a 	mov	r16,r18
10003480:	a825883a 	mov	r18,r21
10003484:	b02b883a 	mov	r21,r22
10003488:	882d883a 	mov	r22,r17
1000348c:	dc403017 	ldw	r17,192(sp)
10003490:	d9002c17 	ldw	r4,176(sp)
10003494:	1d87883a 	add	r3,r3,r22
10003498:	10800044 	addi	r2,r2,1
1000349c:	41000015 	stw	r4,0(r8)
100034a0:	45800115 	stw	r22,4(r8)
100034a4:	d8c02015 	stw	r3,128(sp)
100034a8:	d8801f15 	stw	r2,124(sp)
100034ac:	010001c4 	movi	r4,7
100034b0:	20818e16 	blt	r4,r2,10003aec <___vfprintf_internal_r+0x1700>
100034b4:	42000204 	addi	r8,r8,8
100034b8:	003e0f06 	br	10002cf8 <__alt_data_end+0xf8002cf8>
100034bc:	d9403317 	ldw	r5,204(sp)
100034c0:	00800044 	movi	r2,1
100034c4:	18c00044 	addi	r3,r3,1
100034c8:	1141530e 	bge	r2,r5,10003a18 <___vfprintf_internal_r+0x162c>
100034cc:	dc401f17 	ldw	r17,124(sp)
100034d0:	00800044 	movi	r2,1
100034d4:	40800115 	stw	r2,4(r8)
100034d8:	8c400044 	addi	r17,r17,1
100034dc:	44000015 	stw	r16,0(r8)
100034e0:	d8c02015 	stw	r3,128(sp)
100034e4:	dc401f15 	stw	r17,124(sp)
100034e8:	008001c4 	movi	r2,7
100034ec:	14416b16 	blt	r2,r17,10003a9c <___vfprintf_internal_r+0x16b0>
100034f0:	42000204 	addi	r8,r8,8
100034f4:	d8803717 	ldw	r2,220(sp)
100034f8:	d9003417 	ldw	r4,208(sp)
100034fc:	8c400044 	addi	r17,r17,1
10003500:	10c7883a 	add	r3,r2,r3
10003504:	40800115 	stw	r2,4(r8)
10003508:	41000015 	stw	r4,0(r8)
1000350c:	d8c02015 	stw	r3,128(sp)
10003510:	dc401f15 	stw	r17,124(sp)
10003514:	008001c4 	movi	r2,7
10003518:	14416916 	blt	r2,r17,10003ac0 <___vfprintf_internal_r+0x16d4>
1000351c:	45800204 	addi	r22,r8,8
10003520:	d9003617 	ldw	r4,216(sp)
10003524:	d9403817 	ldw	r5,224(sp)
10003528:	000d883a 	mov	r6,zero
1000352c:	000f883a 	mov	r7,zero
10003530:	d8c03c15 	stw	r3,240(sp)
10003534:	000db2c0 	call	1000db2c <__eqdf2>
10003538:	d8c03c17 	ldw	r3,240(sp)
1000353c:	1000bc26 	beq	r2,zero,10003830 <___vfprintf_internal_r+0x1444>
10003540:	d9403317 	ldw	r5,204(sp)
10003544:	84000044 	addi	r16,r16,1
10003548:	8c400044 	addi	r17,r17,1
1000354c:	28bfffc4 	addi	r2,r5,-1
10003550:	1887883a 	add	r3,r3,r2
10003554:	b0800115 	stw	r2,4(r22)
10003558:	b4000015 	stw	r16,0(r22)
1000355c:	d8c02015 	stw	r3,128(sp)
10003560:	dc401f15 	stw	r17,124(sp)
10003564:	008001c4 	movi	r2,7
10003568:	14414316 	blt	r2,r17,10003a78 <___vfprintf_internal_r+0x168c>
1000356c:	b5800204 	addi	r22,r22,8
10003570:	d9003a17 	ldw	r4,232(sp)
10003574:	df0022c4 	addi	fp,sp,139
10003578:	8c400044 	addi	r17,r17,1
1000357c:	20c7883a 	add	r3,r4,r3
10003580:	b7000015 	stw	fp,0(r22)
10003584:	b1000115 	stw	r4,4(r22)
10003588:	d8c02015 	stw	r3,128(sp)
1000358c:	dc401f15 	stw	r17,124(sp)
10003590:	008001c4 	movi	r2,7
10003594:	14400e16 	blt	r2,r17,100035d0 <___vfprintf_internal_r+0x11e4>
10003598:	b2000204 	addi	r8,r22,8
1000359c:	003e1806 	br	10002e00 <__alt_data_end+0xf8002e00>
100035a0:	01040074 	movhi	r4,4097
100035a4:	21086c84 	addi	r4,r4,8626
100035a8:	d9002c15 	stw	r4,176(sp)
100035ac:	d9002c17 	ldw	r4,176(sp)
100035b0:	1c07883a 	add	r3,r3,r16
100035b4:	44000115 	stw	r16,4(r8)
100035b8:	41000015 	stw	r4,0(r8)
100035bc:	10800044 	addi	r2,r2,1
100035c0:	d8c02015 	stw	r3,128(sp)
100035c4:	d8801f15 	stw	r2,124(sp)
100035c8:	010001c4 	movi	r4,7
100035cc:	20be0b0e 	bge	r4,r2,10002dfc <__alt_data_end+0xf8002dfc>
100035d0:	d9002d17 	ldw	r4,180(sp)
100035d4:	d9801e04 	addi	r6,sp,120
100035d8:	b80b883a 	mov	r5,r23
100035dc:	0009bcc0 	call	10009bcc <__sprint_r>
100035e0:	103c861e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
100035e4:	d8c02017 	ldw	r3,128(sp)
100035e8:	da000404 	addi	r8,sp,16
100035ec:	003e0406 	br	10002e00 <__alt_data_end+0xf8002e00>
100035f0:	d9002d17 	ldw	r4,180(sp)
100035f4:	d9801e04 	addi	r6,sp,120
100035f8:	b80b883a 	mov	r5,r23
100035fc:	0009bcc0 	call	10009bcc <__sprint_r>
10003600:	103e3b26 	beq	r2,zero,10002ef0 <__alt_data_end+0xf8002ef0>
10003604:	003c7d06 	br	100027fc <__alt_data_end+0xf80027fc>
10003608:	d9002d17 	ldw	r4,180(sp)
1000360c:	d9801e04 	addi	r6,sp,120
10003610:	b80b883a 	mov	r5,r23
10003614:	0009bcc0 	call	10009bcc <__sprint_r>
10003618:	103c781e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000361c:	d8c02017 	ldw	r3,128(sp)
10003620:	da000404 	addi	r8,sp,16
10003624:	003de906 	br	10002dcc <__alt_data_end+0xf8002dcc>
10003628:	d9002d17 	ldw	r4,180(sp)
1000362c:	d9801e04 	addi	r6,sp,120
10003630:	b80b883a 	mov	r5,r23
10003634:	0009bcc0 	call	10009bcc <__sprint_r>
10003638:	103c701e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000363c:	d8c02017 	ldw	r3,128(sp)
10003640:	da000404 	addi	r8,sp,16
10003644:	003d9b06 	br	10002cb4 <__alt_data_end+0xf8002cb4>
10003648:	d9002d17 	ldw	r4,180(sp)
1000364c:	d9801e04 	addi	r6,sp,120
10003650:	b80b883a 	mov	r5,r23
10003654:	0009bcc0 	call	10009bcc <__sprint_r>
10003658:	103c681e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000365c:	d8c02017 	ldw	r3,128(sp)
10003660:	da000404 	addi	r8,sp,16
10003664:	003da106 	br	10002cec <__alt_data_end+0xf8002cec>
10003668:	d9402a17 	ldw	r5,168(sp)
1000366c:	d8002785 	stb	zero,158(sp)
10003670:	283f0616 	blt	r5,zero,1000328c <__alt_data_end+0xf800328c>
10003674:	00ffdfc4 	movi	r3,-129
10003678:	9d84b03a 	or	r2,r19,r22
1000367c:	90e4703a 	and	r18,r18,r3
10003680:	103c3b26 	beq	r2,zero,10002770 <__alt_data_end+0xf8002770>
10003684:	0039883a 	mov	fp,zero
10003688:	003e5806 	br	10002fec <__alt_data_end+0xf8002fec>
1000368c:	9080040c 	andi	r2,r18,16
10003690:	1001b326 	beq	r2,zero,10003d60 <___vfprintf_internal_r+0x1974>
10003694:	d8c02e17 	ldw	r3,184(sp)
10003698:	d9002a17 	ldw	r4,168(sp)
1000369c:	d8002785 	stb	zero,158(sp)
100036a0:	18800104 	addi	r2,r3,4
100036a4:	1cc00017 	ldw	r19,0(r3)
100036a8:	002d883a 	mov	r22,zero
100036ac:	2001b516 	blt	r4,zero,10003d84 <___vfprintf_internal_r+0x1998>
100036b0:	00ffdfc4 	movi	r3,-129
100036b4:	d8802e15 	stw	r2,184(sp)
100036b8:	90e4703a 	and	r18,r18,r3
100036bc:	983d0526 	beq	r19,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100036c0:	0039883a 	mov	fp,zero
100036c4:	003d0806 	br	10002ae8 <__alt_data_end+0xf8002ae8>
100036c8:	dc402617 	ldw	r17,152(sp)
100036cc:	0441d30e 	bge	zero,r17,10003e1c <___vfprintf_internal_r+0x1a30>
100036d0:	dc403217 	ldw	r17,200(sp)
100036d4:	d8803317 	ldw	r2,204(sp)
100036d8:	1440010e 	bge	r2,r17,100036e0 <___vfprintf_internal_r+0x12f4>
100036dc:	1023883a 	mov	r17,r2
100036e0:	04400a0e 	bge	zero,r17,1000370c <___vfprintf_internal_r+0x1320>
100036e4:	d8801f17 	ldw	r2,124(sp)
100036e8:	1c47883a 	add	r3,r3,r17
100036ec:	44000015 	stw	r16,0(r8)
100036f0:	10800044 	addi	r2,r2,1
100036f4:	44400115 	stw	r17,4(r8)
100036f8:	d8c02015 	stw	r3,128(sp)
100036fc:	d8801f15 	stw	r2,124(sp)
10003700:	010001c4 	movi	r4,7
10003704:	20826516 	blt	r4,r2,1000409c <___vfprintf_internal_r+0x1cb0>
10003708:	42000204 	addi	r8,r8,8
1000370c:	88026116 	blt	r17,zero,10004094 <___vfprintf_internal_r+0x1ca8>
10003710:	d9003217 	ldw	r4,200(sp)
10003714:	2463c83a 	sub	r17,r4,r17
10003718:	04407b0e 	bge	zero,r17,10003908 <___vfprintf_internal_r+0x151c>
1000371c:	05800404 	movi	r22,16
10003720:	d8801f17 	ldw	r2,124(sp)
10003724:	b4419d0e 	bge	r22,r17,10003d9c <___vfprintf_internal_r+0x19b0>
10003728:	01040074 	movhi	r4,4097
1000372c:	21086c84 	addi	r4,r4,8626
10003730:	d9002c15 	stw	r4,176(sp)
10003734:	070001c4 	movi	fp,7
10003738:	dcc02d17 	ldw	r19,180(sp)
1000373c:	00000306 	br	1000374c <___vfprintf_internal_r+0x1360>
10003740:	42000204 	addi	r8,r8,8
10003744:	8c7ffc04 	addi	r17,r17,-16
10003748:	b441970e 	bge	r22,r17,10003da8 <___vfprintf_internal_r+0x19bc>
1000374c:	18c00404 	addi	r3,r3,16
10003750:	10800044 	addi	r2,r2,1
10003754:	45000015 	stw	r20,0(r8)
10003758:	45800115 	stw	r22,4(r8)
1000375c:	d8c02015 	stw	r3,128(sp)
10003760:	d8801f15 	stw	r2,124(sp)
10003764:	e0bff60e 	bge	fp,r2,10003740 <__alt_data_end+0xf8003740>
10003768:	d9801e04 	addi	r6,sp,120
1000376c:	b80b883a 	mov	r5,r23
10003770:	9809883a 	mov	r4,r19
10003774:	0009bcc0 	call	10009bcc <__sprint_r>
10003778:	103c201e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000377c:	d8c02017 	ldw	r3,128(sp)
10003780:	d8801f17 	ldw	r2,124(sp)
10003784:	da000404 	addi	r8,sp,16
10003788:	003fee06 	br	10003744 <__alt_data_end+0xf8003744>
1000378c:	d9002d17 	ldw	r4,180(sp)
10003790:	d9801e04 	addi	r6,sp,120
10003794:	b80b883a 	mov	r5,r23
10003798:	0009bcc0 	call	10009bcc <__sprint_r>
1000379c:	103c171e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
100037a0:	d8c02017 	ldw	r3,128(sp)
100037a4:	df002787 	ldb	fp,158(sp)
100037a8:	da000404 	addi	r8,sp,16
100037ac:	003d3406 	br	10002c80 <__alt_data_end+0xf8002c80>
100037b0:	9080040c 	andi	r2,r18,16
100037b4:	10016126 	beq	r2,zero,10003d3c <___vfprintf_internal_r+0x1950>
100037b8:	d9402e17 	ldw	r5,184(sp)
100037bc:	2cc00017 	ldw	r19,0(r5)
100037c0:	29400104 	addi	r5,r5,4
100037c4:	d9402e15 	stw	r5,184(sp)
100037c8:	982dd7fa 	srai	r22,r19,31
100037cc:	b005883a 	mov	r2,r22
100037d0:	003c5a06 	br	1000293c <__alt_data_end+0xf800293c>
100037d4:	9080040c 	andi	r2,r18,16
100037d8:	10003526 	beq	r2,zero,100038b0 <___vfprintf_internal_r+0x14c4>
100037dc:	d8c02e17 	ldw	r3,184(sp)
100037e0:	d9002a17 	ldw	r4,168(sp)
100037e4:	d8002785 	stb	zero,158(sp)
100037e8:	18800104 	addi	r2,r3,4
100037ec:	1cc00017 	ldw	r19,0(r3)
100037f0:	002d883a 	mov	r22,zero
100037f4:	20003716 	blt	r4,zero,100038d4 <___vfprintf_internal_r+0x14e8>
100037f8:	00ffdfc4 	movi	r3,-129
100037fc:	d8802e15 	stw	r2,184(sp)
10003800:	90e4703a 	and	r18,r18,r3
10003804:	0039883a 	mov	fp,zero
10003808:	983dd426 	beq	r19,zero,10002f5c <__alt_data_end+0xf8002f5c>
1000380c:	00800244 	movi	r2,9
10003810:	14fc5336 	bltu	r2,r19,10002960 <__alt_data_end+0xf8002960>
10003814:	d8c02817 	ldw	r3,160(sp)
10003818:	dc001dc4 	addi	r16,sp,119
1000381c:	9cc00c04 	addi	r19,r19,48
10003820:	1c07c83a 	sub	r3,r3,r16
10003824:	dcc01dc5 	stb	r19,119(sp)
10003828:	d8c02b15 	stw	r3,172(sp)
1000382c:	003cc606 	br	10002b48 <__alt_data_end+0xf8002b48>
10003830:	d8803317 	ldw	r2,204(sp)
10003834:	143fffc4 	addi	r16,r2,-1
10003838:	043f4d0e 	bge	zero,r16,10003570 <__alt_data_end+0xf8003570>
1000383c:	07000404 	movi	fp,16
10003840:	e400810e 	bge	fp,r16,10003a48 <___vfprintf_internal_r+0x165c>
10003844:	01440074 	movhi	r5,4097
10003848:	29486c84 	addi	r5,r5,8626
1000384c:	d9402c15 	stw	r5,176(sp)
10003850:	01c001c4 	movi	r7,7
10003854:	dcc02d17 	ldw	r19,180(sp)
10003858:	00000306 	br	10003868 <___vfprintf_internal_r+0x147c>
1000385c:	b5800204 	addi	r22,r22,8
10003860:	843ffc04 	addi	r16,r16,-16
10003864:	e4007b0e 	bge	fp,r16,10003a54 <___vfprintf_internal_r+0x1668>
10003868:	18c00404 	addi	r3,r3,16
1000386c:	8c400044 	addi	r17,r17,1
10003870:	b5000015 	stw	r20,0(r22)
10003874:	b7000115 	stw	fp,4(r22)
10003878:	d8c02015 	stw	r3,128(sp)
1000387c:	dc401f15 	stw	r17,124(sp)
10003880:	3c7ff60e 	bge	r7,r17,1000385c <__alt_data_end+0xf800385c>
10003884:	d9801e04 	addi	r6,sp,120
10003888:	b80b883a 	mov	r5,r23
1000388c:	9809883a 	mov	r4,r19
10003890:	d9c03c15 	stw	r7,240(sp)
10003894:	0009bcc0 	call	10009bcc <__sprint_r>
10003898:	d9c03c17 	ldw	r7,240(sp)
1000389c:	103bd71e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
100038a0:	d8c02017 	ldw	r3,128(sp)
100038a4:	dc401f17 	ldw	r17,124(sp)
100038a8:	dd800404 	addi	r22,sp,16
100038ac:	003fec06 	br	10003860 <__alt_data_end+0xf8003860>
100038b0:	9080100c 	andi	r2,r18,64
100038b4:	d8002785 	stb	zero,158(sp)
100038b8:	10010e26 	beq	r2,zero,10003cf4 <___vfprintf_internal_r+0x1908>
100038bc:	d9402e17 	ldw	r5,184(sp)
100038c0:	d8c02a17 	ldw	r3,168(sp)
100038c4:	002d883a 	mov	r22,zero
100038c8:	28800104 	addi	r2,r5,4
100038cc:	2cc0000b 	ldhu	r19,0(r5)
100038d0:	183fc90e 	bge	r3,zero,100037f8 <__alt_data_end+0xf80037f8>
100038d4:	d8802e15 	stw	r2,184(sp)
100038d8:	0039883a 	mov	fp,zero
100038dc:	9d84b03a 	or	r2,r19,r22
100038e0:	103c1e1e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
100038e4:	00800044 	movi	r2,1
100038e8:	003e6c06 	br	1000329c <__alt_data_end+0xf800329c>
100038ec:	d9002d17 	ldw	r4,180(sp)
100038f0:	d9801e04 	addi	r6,sp,120
100038f4:	b80b883a 	mov	r5,r23
100038f8:	0009bcc0 	call	10009bcc <__sprint_r>
100038fc:	103bbf1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003900:	d8c02017 	ldw	r3,128(sp)
10003904:	da000404 	addi	r8,sp,16
10003908:	d9003217 	ldw	r4,200(sp)
1000390c:	d8802617 	ldw	r2,152(sp)
10003910:	d9403317 	ldw	r5,204(sp)
10003914:	8123883a 	add	r17,r16,r4
10003918:	11400216 	blt	r2,r5,10003924 <___vfprintf_internal_r+0x1538>
1000391c:	9100004c 	andi	r4,r18,1
10003920:	20000d26 	beq	r4,zero,10003958 <___vfprintf_internal_r+0x156c>
10003924:	d9003717 	ldw	r4,220(sp)
10003928:	d9403417 	ldw	r5,208(sp)
1000392c:	1907883a 	add	r3,r3,r4
10003930:	d9001f17 	ldw	r4,124(sp)
10003934:	41400015 	stw	r5,0(r8)
10003938:	d9403717 	ldw	r5,220(sp)
1000393c:	21000044 	addi	r4,r4,1
10003940:	d8c02015 	stw	r3,128(sp)
10003944:	41400115 	stw	r5,4(r8)
10003948:	d9001f15 	stw	r4,124(sp)
1000394c:	014001c4 	movi	r5,7
10003950:	2901e816 	blt	r5,r4,100040f4 <___vfprintf_internal_r+0x1d08>
10003954:	42000204 	addi	r8,r8,8
10003958:	d9003317 	ldw	r4,204(sp)
1000395c:	8121883a 	add	r16,r16,r4
10003960:	2085c83a 	sub	r2,r4,r2
10003964:	8461c83a 	sub	r16,r16,r17
10003968:	1400010e 	bge	r2,r16,10003970 <___vfprintf_internal_r+0x1584>
1000396c:	1021883a 	mov	r16,r2
10003970:	04000a0e 	bge	zero,r16,1000399c <___vfprintf_internal_r+0x15b0>
10003974:	d9001f17 	ldw	r4,124(sp)
10003978:	1c07883a 	add	r3,r3,r16
1000397c:	44400015 	stw	r17,0(r8)
10003980:	21000044 	addi	r4,r4,1
10003984:	44000115 	stw	r16,4(r8)
10003988:	d8c02015 	stw	r3,128(sp)
1000398c:	d9001f15 	stw	r4,124(sp)
10003990:	014001c4 	movi	r5,7
10003994:	2901fb16 	blt	r5,r4,10004184 <___vfprintf_internal_r+0x1d98>
10003998:	42000204 	addi	r8,r8,8
1000399c:	8001f716 	blt	r16,zero,1000417c <___vfprintf_internal_r+0x1d90>
100039a0:	1421c83a 	sub	r16,r2,r16
100039a4:	043d160e 	bge	zero,r16,10002e00 <__alt_data_end+0xf8002e00>
100039a8:	04400404 	movi	r17,16
100039ac:	d8801f17 	ldw	r2,124(sp)
100039b0:	8c3efb0e 	bge	r17,r16,100035a0 <__alt_data_end+0xf80035a0>
100039b4:	01440074 	movhi	r5,4097
100039b8:	29486c84 	addi	r5,r5,8626
100039bc:	d9402c15 	stw	r5,176(sp)
100039c0:	058001c4 	movi	r22,7
100039c4:	dcc02d17 	ldw	r19,180(sp)
100039c8:	00000306 	br	100039d8 <___vfprintf_internal_r+0x15ec>
100039cc:	42000204 	addi	r8,r8,8
100039d0:	843ffc04 	addi	r16,r16,-16
100039d4:	8c3ef50e 	bge	r17,r16,100035ac <__alt_data_end+0xf80035ac>
100039d8:	18c00404 	addi	r3,r3,16
100039dc:	10800044 	addi	r2,r2,1
100039e0:	45000015 	stw	r20,0(r8)
100039e4:	44400115 	stw	r17,4(r8)
100039e8:	d8c02015 	stw	r3,128(sp)
100039ec:	d8801f15 	stw	r2,124(sp)
100039f0:	b0bff60e 	bge	r22,r2,100039cc <__alt_data_end+0xf80039cc>
100039f4:	d9801e04 	addi	r6,sp,120
100039f8:	b80b883a 	mov	r5,r23
100039fc:	9809883a 	mov	r4,r19
10003a00:	0009bcc0 	call	10009bcc <__sprint_r>
10003a04:	103b7d1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003a08:	d8c02017 	ldw	r3,128(sp)
10003a0c:	d8801f17 	ldw	r2,124(sp)
10003a10:	da000404 	addi	r8,sp,16
10003a14:	003fee06 	br	100039d0 <__alt_data_end+0xf80039d0>
10003a18:	9088703a 	and	r4,r18,r2
10003a1c:	203eab1e 	bne	r4,zero,100034cc <__alt_data_end+0xf80034cc>
10003a20:	dc401f17 	ldw	r17,124(sp)
10003a24:	40800115 	stw	r2,4(r8)
10003a28:	44000015 	stw	r16,0(r8)
10003a2c:	8c400044 	addi	r17,r17,1
10003a30:	d8c02015 	stw	r3,128(sp)
10003a34:	dc401f15 	stw	r17,124(sp)
10003a38:	008001c4 	movi	r2,7
10003a3c:	14400e16 	blt	r2,r17,10003a78 <___vfprintf_internal_r+0x168c>
10003a40:	45800204 	addi	r22,r8,8
10003a44:	003eca06 	br	10003570 <__alt_data_end+0xf8003570>
10003a48:	01040074 	movhi	r4,4097
10003a4c:	21086c84 	addi	r4,r4,8626
10003a50:	d9002c15 	stw	r4,176(sp)
10003a54:	d8802c17 	ldw	r2,176(sp)
10003a58:	1c07883a 	add	r3,r3,r16
10003a5c:	8c400044 	addi	r17,r17,1
10003a60:	b0800015 	stw	r2,0(r22)
10003a64:	b4000115 	stw	r16,4(r22)
10003a68:	d8c02015 	stw	r3,128(sp)
10003a6c:	dc401f15 	stw	r17,124(sp)
10003a70:	008001c4 	movi	r2,7
10003a74:	147ebd0e 	bge	r2,r17,1000356c <__alt_data_end+0xf800356c>
10003a78:	d9002d17 	ldw	r4,180(sp)
10003a7c:	d9801e04 	addi	r6,sp,120
10003a80:	b80b883a 	mov	r5,r23
10003a84:	0009bcc0 	call	10009bcc <__sprint_r>
10003a88:	103b5c1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003a8c:	d8c02017 	ldw	r3,128(sp)
10003a90:	dc401f17 	ldw	r17,124(sp)
10003a94:	dd800404 	addi	r22,sp,16
10003a98:	003eb506 	br	10003570 <__alt_data_end+0xf8003570>
10003a9c:	d9002d17 	ldw	r4,180(sp)
10003aa0:	d9801e04 	addi	r6,sp,120
10003aa4:	b80b883a 	mov	r5,r23
10003aa8:	0009bcc0 	call	10009bcc <__sprint_r>
10003aac:	103b531e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003ab0:	d8c02017 	ldw	r3,128(sp)
10003ab4:	dc401f17 	ldw	r17,124(sp)
10003ab8:	da000404 	addi	r8,sp,16
10003abc:	003e8d06 	br	100034f4 <__alt_data_end+0xf80034f4>
10003ac0:	d9002d17 	ldw	r4,180(sp)
10003ac4:	d9801e04 	addi	r6,sp,120
10003ac8:	b80b883a 	mov	r5,r23
10003acc:	0009bcc0 	call	10009bcc <__sprint_r>
10003ad0:	103b4a1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003ad4:	d8c02017 	ldw	r3,128(sp)
10003ad8:	dc401f17 	ldw	r17,124(sp)
10003adc:	dd800404 	addi	r22,sp,16
10003ae0:	003e8f06 	br	10003520 <__alt_data_end+0xf8003520>
10003ae4:	0027883a 	mov	r19,zero
10003ae8:	003f4a06 	br	10003814 <__alt_data_end+0xf8003814>
10003aec:	d9002d17 	ldw	r4,180(sp)
10003af0:	d9801e04 	addi	r6,sp,120
10003af4:	b80b883a 	mov	r5,r23
10003af8:	0009bcc0 	call	10009bcc <__sprint_r>
10003afc:	103b3f1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003b00:	d8c02017 	ldw	r3,128(sp)
10003b04:	da000404 	addi	r8,sp,16
10003b08:	003c7b06 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10003b0c:	d9402a17 	ldw	r5,168(sp)
10003b10:	04e7c83a 	sub	r19,zero,r19
10003b14:	07000b44 	movi	fp,45
10003b18:	9804c03a 	cmpne	r2,r19,zero
10003b1c:	05adc83a 	sub	r22,zero,r22
10003b20:	df002785 	stb	fp,158(sp)
10003b24:	b0adc83a 	sub	r22,r22,r2
10003b28:	28017b16 	blt	r5,zero,10004118 <___vfprintf_internal_r+0x1d2c>
10003b2c:	00bfdfc4 	movi	r2,-129
10003b30:	90a4703a 	and	r18,r18,r2
10003b34:	003b8906 	br	1000295c <__alt_data_end+0xf800295c>
10003b38:	d9003617 	ldw	r4,216(sp)
10003b3c:	d9403817 	ldw	r5,224(sp)
10003b40:	da003d15 	stw	r8,244(sp)
10003b44:	00097f00 	call	100097f0 <__fpclassifyd>
10003b48:	da003d17 	ldw	r8,244(sp)
10003b4c:	1000f026 	beq	r2,zero,10003f10 <___vfprintf_internal_r+0x1b24>
10003b50:	d9002a17 	ldw	r4,168(sp)
10003b54:	05bff7c4 	movi	r22,-33
10003b58:	00bfffc4 	movi	r2,-1
10003b5c:	8dac703a 	and	r22,r17,r22
10003b60:	20820026 	beq	r4,r2,10004364 <___vfprintf_internal_r+0x1f78>
10003b64:	008011c4 	movi	r2,71
10003b68:	b081f726 	beq	r22,r2,10004348 <___vfprintf_internal_r+0x1f5c>
10003b6c:	d9003817 	ldw	r4,224(sp)
10003b70:	90c04014 	ori	r3,r18,256
10003b74:	d8c02c15 	stw	r3,176(sp)
10003b78:	20021516 	blt	r4,zero,100043d0 <___vfprintf_internal_r+0x1fe4>
10003b7c:	dcc03817 	ldw	r19,224(sp)
10003b80:	d8002905 	stb	zero,164(sp)
10003b84:	00801984 	movi	r2,102
10003b88:	8881f926 	beq	r17,r2,10004370 <___vfprintf_internal_r+0x1f84>
10003b8c:	00801184 	movi	r2,70
10003b90:	88821c26 	beq	r17,r2,10004404 <___vfprintf_internal_r+0x2018>
10003b94:	00801144 	movi	r2,69
10003b98:	b081ef26 	beq	r22,r2,10004358 <___vfprintf_internal_r+0x1f6c>
10003b9c:	d8c02a17 	ldw	r3,168(sp)
10003ba0:	d8802104 	addi	r2,sp,132
10003ba4:	d8800315 	stw	r2,12(sp)
10003ba8:	d9403617 	ldw	r5,216(sp)
10003bac:	d8802504 	addi	r2,sp,148
10003bb0:	d9002d17 	ldw	r4,180(sp)
10003bb4:	d8800215 	stw	r2,8(sp)
10003bb8:	d8802604 	addi	r2,sp,152
10003bbc:	d8c00015 	stw	r3,0(sp)
10003bc0:	d8800115 	stw	r2,4(sp)
10003bc4:	01c00084 	movi	r7,2
10003bc8:	980d883a 	mov	r6,r19
10003bcc:	d8c03c15 	stw	r3,240(sp)
10003bd0:	da003d15 	stw	r8,244(sp)
10003bd4:	0004b1c0 	call	10004b1c <_dtoa_r>
10003bd8:	1021883a 	mov	r16,r2
10003bdc:	008019c4 	movi	r2,103
10003be0:	d8c03c17 	ldw	r3,240(sp)
10003be4:	da003d17 	ldw	r8,244(sp)
10003be8:	88817126 	beq	r17,r2,100041b0 <___vfprintf_internal_r+0x1dc4>
10003bec:	008011c4 	movi	r2,71
10003bf0:	88829126 	beq	r17,r2,10004638 <___vfprintf_internal_r+0x224c>
10003bf4:	80f9883a 	add	fp,r16,r3
10003bf8:	d9003617 	ldw	r4,216(sp)
10003bfc:	000d883a 	mov	r6,zero
10003c00:	000f883a 	mov	r7,zero
10003c04:	980b883a 	mov	r5,r19
10003c08:	da003d15 	stw	r8,244(sp)
10003c0c:	000db2c0 	call	1000db2c <__eqdf2>
10003c10:	da003d17 	ldw	r8,244(sp)
10003c14:	10018d26 	beq	r2,zero,1000424c <___vfprintf_internal_r+0x1e60>
10003c18:	d8802117 	ldw	r2,132(sp)
10003c1c:	1700062e 	bgeu	r2,fp,10003c38 <___vfprintf_internal_r+0x184c>
10003c20:	01000c04 	movi	r4,48
10003c24:	10c00044 	addi	r3,r2,1
10003c28:	d8c02115 	stw	r3,132(sp)
10003c2c:	11000005 	stb	r4,0(r2)
10003c30:	d8802117 	ldw	r2,132(sp)
10003c34:	173ffb36 	bltu	r2,fp,10003c24 <__alt_data_end+0xf8003c24>
10003c38:	1405c83a 	sub	r2,r2,r16
10003c3c:	d8803315 	stw	r2,204(sp)
10003c40:	008011c4 	movi	r2,71
10003c44:	b0817626 	beq	r22,r2,10004220 <___vfprintf_internal_r+0x1e34>
10003c48:	00801944 	movi	r2,101
10003c4c:	1442800e 	bge	r2,r17,10004650 <___vfprintf_internal_r+0x2264>
10003c50:	d8c02617 	ldw	r3,152(sp)
10003c54:	00801984 	movi	r2,102
10003c58:	d8c03215 	stw	r3,200(sp)
10003c5c:	8881fe26 	beq	r17,r2,10004458 <___vfprintf_internal_r+0x206c>
10003c60:	d8c03217 	ldw	r3,200(sp)
10003c64:	d9003317 	ldw	r4,204(sp)
10003c68:	1901dd16 	blt	r3,r4,100043e0 <___vfprintf_internal_r+0x1ff4>
10003c6c:	9480004c 	andi	r18,r18,1
10003c70:	90022b1e 	bne	r18,zero,10004520 <___vfprintf_internal_r+0x2134>
10003c74:	1805883a 	mov	r2,r3
10003c78:	18028316 	blt	r3,zero,10004688 <___vfprintf_internal_r+0x229c>
10003c7c:	d8c03217 	ldw	r3,200(sp)
10003c80:	044019c4 	movi	r17,103
10003c84:	d8c02b15 	stw	r3,172(sp)
10003c88:	df002907 	ldb	fp,164(sp)
10003c8c:	e001531e 	bne	fp,zero,100041dc <___vfprintf_internal_r+0x1df0>
10003c90:	df002783 	ldbu	fp,158(sp)
10003c94:	d8802915 	stw	r2,164(sp)
10003c98:	dc802c17 	ldw	r18,176(sp)
10003c9c:	d8002a15 	stw	zero,168(sp)
10003ca0:	003baf06 	br	10002b60 <__alt_data_end+0xf8002b60>
10003ca4:	d8c02e17 	ldw	r3,184(sp)
10003ca8:	d9002e17 	ldw	r4,184(sp)
10003cac:	d9402e17 	ldw	r5,184(sp)
10003cb0:	18c00017 	ldw	r3,0(r3)
10003cb4:	21000117 	ldw	r4,4(r4)
10003cb8:	29400204 	addi	r5,r5,8
10003cbc:	d8c03615 	stw	r3,216(sp)
10003cc0:	d9003815 	stw	r4,224(sp)
10003cc4:	d9402e15 	stw	r5,184(sp)
10003cc8:	003b5006 	br	10002a0c <__alt_data_end+0xf8002a0c>
10003ccc:	ac400007 	ldb	r17,0(r21)
10003cd0:	003a2806 	br	10002574 <__alt_data_end+0xf8002574>
10003cd4:	9080100c 	andi	r2,r18,64
10003cd8:	1000a826 	beq	r2,zero,10003f7c <___vfprintf_internal_r+0x1b90>
10003cdc:	d8c02e17 	ldw	r3,184(sp)
10003ce0:	002d883a 	mov	r22,zero
10003ce4:	1cc0000b 	ldhu	r19,0(r3)
10003ce8:	18c00104 	addi	r3,r3,4
10003cec:	d8c02e15 	stw	r3,184(sp)
10003cf0:	003caf06 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003cf4:	d9002e17 	ldw	r4,184(sp)
10003cf8:	d9402a17 	ldw	r5,168(sp)
10003cfc:	002d883a 	mov	r22,zero
10003d00:	20800104 	addi	r2,r4,4
10003d04:	24c00017 	ldw	r19,0(r4)
10003d08:	283ebb0e 	bge	r5,zero,100037f8 <__alt_data_end+0xf80037f8>
10003d0c:	003ef106 	br	100038d4 <__alt_data_end+0xf80038d4>
10003d10:	9080040c 	andi	r2,r18,16
10003d14:	1000921e 	bne	r2,zero,10003f60 <___vfprintf_internal_r+0x1b74>
10003d18:	9480100c 	andi	r18,r18,64
10003d1c:	90013926 	beq	r18,zero,10004204 <___vfprintf_internal_r+0x1e18>
10003d20:	d9402e17 	ldw	r5,184(sp)
10003d24:	d8c02f17 	ldw	r3,188(sp)
10003d28:	28800017 	ldw	r2,0(r5)
10003d2c:	29400104 	addi	r5,r5,4
10003d30:	d9402e15 	stw	r5,184(sp)
10003d34:	10c0000d 	sth	r3,0(r2)
10003d38:	0039e406 	br	100024cc <__alt_data_end+0xf80024cc>
10003d3c:	9080100c 	andi	r2,r18,64
10003d40:	10008026 	beq	r2,zero,10003f44 <___vfprintf_internal_r+0x1b58>
10003d44:	d8802e17 	ldw	r2,184(sp)
10003d48:	14c0000f 	ldh	r19,0(r2)
10003d4c:	10800104 	addi	r2,r2,4
10003d50:	d8802e15 	stw	r2,184(sp)
10003d54:	982dd7fa 	srai	r22,r19,31
10003d58:	b005883a 	mov	r2,r22
10003d5c:	003af706 	br	1000293c <__alt_data_end+0xf800293c>
10003d60:	9080100c 	andi	r2,r18,64
10003d64:	d8002785 	stb	zero,158(sp)
10003d68:	10008a1e 	bne	r2,zero,10003f94 <___vfprintf_internal_r+0x1ba8>
10003d6c:	d9002e17 	ldw	r4,184(sp)
10003d70:	d9402a17 	ldw	r5,168(sp)
10003d74:	002d883a 	mov	r22,zero
10003d78:	20800104 	addi	r2,r4,4
10003d7c:	24c00017 	ldw	r19,0(r4)
10003d80:	283e4b0e 	bge	r5,zero,100036b0 <__alt_data_end+0xf80036b0>
10003d84:	9d86b03a 	or	r3,r19,r22
10003d88:	d8802e15 	stw	r2,184(sp)
10003d8c:	183e4c1e 	bne	r3,zero,100036c0 <__alt_data_end+0xf80036c0>
10003d90:	0039883a 	mov	fp,zero
10003d94:	0005883a 	mov	r2,zero
10003d98:	003d4006 	br	1000329c <__alt_data_end+0xf800329c>
10003d9c:	01440074 	movhi	r5,4097
10003da0:	29486c84 	addi	r5,r5,8626
10003da4:	d9402c15 	stw	r5,176(sp)
10003da8:	d9402c17 	ldw	r5,176(sp)
10003dac:	1c47883a 	add	r3,r3,r17
10003db0:	10800044 	addi	r2,r2,1
10003db4:	41400015 	stw	r5,0(r8)
10003db8:	44400115 	stw	r17,4(r8)
10003dbc:	d8c02015 	stw	r3,128(sp)
10003dc0:	d8801f15 	stw	r2,124(sp)
10003dc4:	010001c4 	movi	r4,7
10003dc8:	20bec816 	blt	r4,r2,100038ec <__alt_data_end+0xf80038ec>
10003dcc:	42000204 	addi	r8,r8,8
10003dd0:	003ecd06 	br	10003908 <__alt_data_end+0xf8003908>
10003dd4:	d9002a17 	ldw	r4,168(sp)
10003dd8:	d8002785 	stb	zero,158(sp)
10003ddc:	203d2d16 	blt	r4,zero,10003294 <__alt_data_end+0xf8003294>
10003de0:	00bfdfc4 	movi	r2,-129
10003de4:	90a4703a 	and	r18,r18,r2
10003de8:	003a6106 	br	10002770 <__alt_data_end+0xf8002770>
10003dec:	01040074 	movhi	r4,4097
10003df0:	21086c84 	addi	r4,r4,8626
10003df4:	d9002c15 	stw	r4,176(sp)
10003df8:	003bea06 	br	10002da4 <__alt_data_end+0xf8002da4>
10003dfc:	d9002d17 	ldw	r4,180(sp)
10003e00:	d9801e04 	addi	r6,sp,120
10003e04:	b80b883a 	mov	r5,r23
10003e08:	0009bcc0 	call	10009bcc <__sprint_r>
10003e0c:	103a7b1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003e10:	d8c02017 	ldw	r3,128(sp)
10003e14:	da000404 	addi	r8,sp,16
10003e18:	003d4106 	br	10003320 <__alt_data_end+0xf8003320>
10003e1c:	d8801f17 	ldw	r2,124(sp)
10003e20:	01440074 	movhi	r5,4097
10003e24:	01000044 	movi	r4,1
10003e28:	18c00044 	addi	r3,r3,1
10003e2c:	10800044 	addi	r2,r2,1
10003e30:	29486c04 	addi	r5,r5,8624
10003e34:	41000115 	stw	r4,4(r8)
10003e38:	41400015 	stw	r5,0(r8)
10003e3c:	d8c02015 	stw	r3,128(sp)
10003e40:	d8801f15 	stw	r2,124(sp)
10003e44:	010001c4 	movi	r4,7
10003e48:	20805c16 	blt	r4,r2,10003fbc <___vfprintf_internal_r+0x1bd0>
10003e4c:	42000204 	addi	r8,r8,8
10003e50:	8800041e 	bne	r17,zero,10003e64 <___vfprintf_internal_r+0x1a78>
10003e54:	d8803317 	ldw	r2,204(sp)
10003e58:	1000021e 	bne	r2,zero,10003e64 <___vfprintf_internal_r+0x1a78>
10003e5c:	9080004c 	andi	r2,r18,1
10003e60:	103be726 	beq	r2,zero,10002e00 <__alt_data_end+0xf8002e00>
10003e64:	d9003717 	ldw	r4,220(sp)
10003e68:	d8801f17 	ldw	r2,124(sp)
10003e6c:	d9403417 	ldw	r5,208(sp)
10003e70:	20c7883a 	add	r3,r4,r3
10003e74:	10800044 	addi	r2,r2,1
10003e78:	41000115 	stw	r4,4(r8)
10003e7c:	41400015 	stw	r5,0(r8)
10003e80:	d8c02015 	stw	r3,128(sp)
10003e84:	d8801f15 	stw	r2,124(sp)
10003e88:	010001c4 	movi	r4,7
10003e8c:	20812116 	blt	r4,r2,10004314 <___vfprintf_internal_r+0x1f28>
10003e90:	42000204 	addi	r8,r8,8
10003e94:	0463c83a 	sub	r17,zero,r17
10003e98:	0440730e 	bge	zero,r17,10004068 <___vfprintf_internal_r+0x1c7c>
10003e9c:	05800404 	movi	r22,16
10003ea0:	b440860e 	bge	r22,r17,100040bc <___vfprintf_internal_r+0x1cd0>
10003ea4:	01440074 	movhi	r5,4097
10003ea8:	29486c84 	addi	r5,r5,8626
10003eac:	d9402c15 	stw	r5,176(sp)
10003eb0:	070001c4 	movi	fp,7
10003eb4:	dcc02d17 	ldw	r19,180(sp)
10003eb8:	00000306 	br	10003ec8 <___vfprintf_internal_r+0x1adc>
10003ebc:	42000204 	addi	r8,r8,8
10003ec0:	8c7ffc04 	addi	r17,r17,-16
10003ec4:	b440800e 	bge	r22,r17,100040c8 <___vfprintf_internal_r+0x1cdc>
10003ec8:	18c00404 	addi	r3,r3,16
10003ecc:	10800044 	addi	r2,r2,1
10003ed0:	45000015 	stw	r20,0(r8)
10003ed4:	45800115 	stw	r22,4(r8)
10003ed8:	d8c02015 	stw	r3,128(sp)
10003edc:	d8801f15 	stw	r2,124(sp)
10003ee0:	e0bff60e 	bge	fp,r2,10003ebc <__alt_data_end+0xf8003ebc>
10003ee4:	d9801e04 	addi	r6,sp,120
10003ee8:	b80b883a 	mov	r5,r23
10003eec:	9809883a 	mov	r4,r19
10003ef0:	0009bcc0 	call	10009bcc <__sprint_r>
10003ef4:	103a411e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003ef8:	d8c02017 	ldw	r3,128(sp)
10003efc:	d8801f17 	ldw	r2,124(sp)
10003f00:	da000404 	addi	r8,sp,16
10003f04:	003fee06 	br	10003ec0 <__alt_data_end+0xf8003ec0>
10003f08:	00bfffc4 	movi	r2,-1
10003f0c:	003a3f06 	br	1000280c <__alt_data_end+0xf800280c>
10003f10:	008011c4 	movi	r2,71
10003f14:	1440b816 	blt	r2,r17,100041f8 <___vfprintf_internal_r+0x1e0c>
10003f18:	04040074 	movhi	r16,4097
10003f1c:	84085e04 	addi	r16,r16,8568
10003f20:	00c000c4 	movi	r3,3
10003f24:	00bfdfc4 	movi	r2,-129
10003f28:	d8c02915 	stw	r3,164(sp)
10003f2c:	90a4703a 	and	r18,r18,r2
10003f30:	df002783 	ldbu	fp,158(sp)
10003f34:	d8c02b15 	stw	r3,172(sp)
10003f38:	d8002a15 	stw	zero,168(sp)
10003f3c:	d8003215 	stw	zero,200(sp)
10003f40:	003b0706 	br	10002b60 <__alt_data_end+0xf8002b60>
10003f44:	d8c02e17 	ldw	r3,184(sp)
10003f48:	1cc00017 	ldw	r19,0(r3)
10003f4c:	18c00104 	addi	r3,r3,4
10003f50:	d8c02e15 	stw	r3,184(sp)
10003f54:	982dd7fa 	srai	r22,r19,31
10003f58:	b005883a 	mov	r2,r22
10003f5c:	003a7706 	br	1000293c <__alt_data_end+0xf800293c>
10003f60:	d8c02e17 	ldw	r3,184(sp)
10003f64:	d9002f17 	ldw	r4,188(sp)
10003f68:	18800017 	ldw	r2,0(r3)
10003f6c:	18c00104 	addi	r3,r3,4
10003f70:	d8c02e15 	stw	r3,184(sp)
10003f74:	11000015 	stw	r4,0(r2)
10003f78:	00395406 	br	100024cc <__alt_data_end+0xf80024cc>
10003f7c:	d9002e17 	ldw	r4,184(sp)
10003f80:	002d883a 	mov	r22,zero
10003f84:	24c00017 	ldw	r19,0(r4)
10003f88:	21000104 	addi	r4,r4,4
10003f8c:	d9002e15 	stw	r4,184(sp)
10003f90:	003c0706 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003f94:	d9402e17 	ldw	r5,184(sp)
10003f98:	d8c02a17 	ldw	r3,168(sp)
10003f9c:	002d883a 	mov	r22,zero
10003fa0:	28800104 	addi	r2,r5,4
10003fa4:	2cc0000b 	ldhu	r19,0(r5)
10003fa8:	183dc10e 	bge	r3,zero,100036b0 <__alt_data_end+0xf80036b0>
10003fac:	003f7506 	br	10003d84 <__alt_data_end+0xf8003d84>
10003fb0:	04040074 	movhi	r16,4097
10003fb4:	84085c04 	addi	r16,r16,8560
10003fb8:	003aa706 	br	10002a58 <__alt_data_end+0xf8002a58>
10003fbc:	d9002d17 	ldw	r4,180(sp)
10003fc0:	d9801e04 	addi	r6,sp,120
10003fc4:	b80b883a 	mov	r5,r23
10003fc8:	0009bcc0 	call	10009bcc <__sprint_r>
10003fcc:	103a0b1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10003fd0:	dc402617 	ldw	r17,152(sp)
10003fd4:	d8c02017 	ldw	r3,128(sp)
10003fd8:	da000404 	addi	r8,sp,16
10003fdc:	003f9c06 	br	10003e50 <__alt_data_end+0xf8003e50>
10003fe0:	ac400043 	ldbu	r17,1(r21)
10003fe4:	84000814 	ori	r16,r16,32
10003fe8:	ad400044 	addi	r21,r21,1
10003fec:	8c403fcc 	andi	r17,r17,255
10003ff0:	8c40201c 	xori	r17,r17,128
10003ff4:	8c7fe004 	addi	r17,r17,-128
10003ff8:	00395e06 	br	10002574 <__alt_data_end+0xf8002574>
10003ffc:	d8c02e15 	stw	r3,184(sp)
10004000:	0039883a 	mov	fp,zero
10004004:	003e3506 	br	100038dc <__alt_data_end+0xf80038dc>
10004008:	d9002d17 	ldw	r4,180(sp)
1000400c:	d9801e04 	addi	r6,sp,120
10004010:	b80b883a 	mov	r5,r23
10004014:	0009bcc0 	call	10009bcc <__sprint_r>
10004018:	1039f81e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000401c:	d8c02017 	ldw	r3,128(sp)
10004020:	da000404 	addi	r8,sp,16
10004024:	003cd006 	br	10003368 <__alt_data_end+0xf8003368>
10004028:	8009883a 	mov	r4,r16
1000402c:	df003d15 	stw	fp,244(sp)
10004030:	00023540 	call	10002354 <strlen>
10004034:	d8802b15 	stw	r2,172(sp)
10004038:	da003d17 	ldw	r8,244(sp)
1000403c:	103c200e 	bge	r2,zero,100030c0 <__alt_data_end+0xf80030c0>
10004040:	0005883a 	mov	r2,zero
10004044:	003c1e06 	br	100030c0 <__alt_data_end+0xf80030c0>
10004048:	d9002d17 	ldw	r4,180(sp)
1000404c:	d9801e04 	addi	r6,sp,120
10004050:	b80b883a 	mov	r5,r23
10004054:	0009bcc0 	call	10009bcc <__sprint_r>
10004058:	1039e81e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
1000405c:	d8c02017 	ldw	r3,128(sp)
10004060:	d8801f17 	ldw	r2,124(sp)
10004064:	da000404 	addi	r8,sp,16
10004068:	d9403317 	ldw	r5,204(sp)
1000406c:	10800044 	addi	r2,r2,1
10004070:	44000015 	stw	r16,0(r8)
10004074:	28c7883a 	add	r3,r5,r3
10004078:	003b5b06 	br	10002de8 <__alt_data_end+0xf8002de8>
1000407c:	01040074 	movhi	r4,4097
10004080:	21087084 	addi	r4,r4,8642
10004084:	d9003515 	stw	r4,212(sp)
10004088:	003af206 	br	10002c54 <__alt_data_end+0xf8002c54>
1000408c:	013fffc4 	movi	r4,-1
10004090:	003a0806 	br	100028b4 <__alt_data_end+0xf80028b4>
10004094:	0023883a 	mov	r17,zero
10004098:	003d9d06 	br	10003710 <__alt_data_end+0xf8003710>
1000409c:	d9002d17 	ldw	r4,180(sp)
100040a0:	d9801e04 	addi	r6,sp,120
100040a4:	b80b883a 	mov	r5,r23
100040a8:	0009bcc0 	call	10009bcc <__sprint_r>
100040ac:	1039d31e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
100040b0:	d8c02017 	ldw	r3,128(sp)
100040b4:	da000404 	addi	r8,sp,16
100040b8:	003d9406 	br	1000370c <__alt_data_end+0xf800370c>
100040bc:	01040074 	movhi	r4,4097
100040c0:	21086c84 	addi	r4,r4,8626
100040c4:	d9002c15 	stw	r4,176(sp)
100040c8:	d9002c17 	ldw	r4,176(sp)
100040cc:	1c47883a 	add	r3,r3,r17
100040d0:	10800044 	addi	r2,r2,1
100040d4:	41000015 	stw	r4,0(r8)
100040d8:	44400115 	stw	r17,4(r8)
100040dc:	d8c02015 	stw	r3,128(sp)
100040e0:	d8801f15 	stw	r2,124(sp)
100040e4:	010001c4 	movi	r4,7
100040e8:	20bfd716 	blt	r4,r2,10004048 <__alt_data_end+0xf8004048>
100040ec:	42000204 	addi	r8,r8,8
100040f0:	003fdd06 	br	10004068 <__alt_data_end+0xf8004068>
100040f4:	d9002d17 	ldw	r4,180(sp)
100040f8:	d9801e04 	addi	r6,sp,120
100040fc:	b80b883a 	mov	r5,r23
10004100:	0009bcc0 	call	10009bcc <__sprint_r>
10004104:	1039bd1e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10004108:	d8802617 	ldw	r2,152(sp)
1000410c:	d8c02017 	ldw	r3,128(sp)
10004110:	da000404 	addi	r8,sp,16
10004114:	003e1006 	br	10003958 <__alt_data_end+0xf8003958>
10004118:	00800044 	movi	r2,1
1000411c:	10803fcc 	andi	r2,r2,255
10004120:	00c00044 	movi	r3,1
10004124:	10fa0d26 	beq	r2,r3,1000295c <__alt_data_end+0xf800295c>
10004128:	00c00084 	movi	r3,2
1000412c:	10fbaf26 	beq	r2,r3,10002fec <__alt_data_end+0xf8002fec>
10004130:	003a6d06 	br	10002ae8 <__alt_data_end+0xf8002ae8>
10004134:	01040074 	movhi	r4,4097
10004138:	21087084 	addi	r4,r4,8642
1000413c:	d9003515 	stw	r4,212(sp)
10004140:	003b5406 	br	10002e94 <__alt_data_end+0xf8002e94>
10004144:	d8802a17 	ldw	r2,168(sp)
10004148:	00c00184 	movi	r3,6
1000414c:	1880012e 	bgeu	r3,r2,10004154 <___vfprintf_internal_r+0x1d68>
10004150:	1805883a 	mov	r2,r3
10004154:	d8802b15 	stw	r2,172(sp)
10004158:	1000ef16 	blt	r2,zero,10004518 <___vfprintf_internal_r+0x212c>
1000415c:	04040074 	movhi	r16,4097
10004160:	d8802915 	stw	r2,164(sp)
10004164:	dcc02e15 	stw	r19,184(sp)
10004168:	d8002a15 	stw	zero,168(sp)
1000416c:	d8003215 	stw	zero,200(sp)
10004170:	84086a04 	addi	r16,r16,8616
10004174:	0039883a 	mov	fp,zero
10004178:	003a8006 	br	10002b7c <__alt_data_end+0xf8002b7c>
1000417c:	0021883a 	mov	r16,zero
10004180:	003e0706 	br	100039a0 <__alt_data_end+0xf80039a0>
10004184:	d9002d17 	ldw	r4,180(sp)
10004188:	d9801e04 	addi	r6,sp,120
1000418c:	b80b883a 	mov	r5,r23
10004190:	0009bcc0 	call	10009bcc <__sprint_r>
10004194:	1039991e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10004198:	d8802617 	ldw	r2,152(sp)
1000419c:	d9403317 	ldw	r5,204(sp)
100041a0:	d8c02017 	ldw	r3,128(sp)
100041a4:	da000404 	addi	r8,sp,16
100041a8:	2885c83a 	sub	r2,r5,r2
100041ac:	003dfb06 	br	1000399c <__alt_data_end+0xf800399c>
100041b0:	9080004c 	andi	r2,r18,1
100041b4:	103e8f1e 	bne	r2,zero,10003bf4 <__alt_data_end+0xf8003bf4>
100041b8:	d8802117 	ldw	r2,132(sp)
100041bc:	003e9e06 	br	10003c38 <__alt_data_end+0xf8003c38>
100041c0:	1025883a 	mov	r18,r2
100041c4:	0039883a 	mov	fp,zero
100041c8:	00800084 	movi	r2,2
100041cc:	003fd306 	br	1000411c <__alt_data_end+0xf800411c>
100041d0:	07000b44 	movi	fp,45
100041d4:	df002785 	stb	fp,158(sp)
100041d8:	003a1b06 	br	10002a48 <__alt_data_end+0xf8002a48>
100041dc:	00c00b44 	movi	r3,45
100041e0:	d8c02785 	stb	r3,158(sp)
100041e4:	d8802915 	stw	r2,164(sp)
100041e8:	dc802c17 	ldw	r18,176(sp)
100041ec:	d8002a15 	stw	zero,168(sp)
100041f0:	07000b44 	movi	fp,45
100041f4:	003a5e06 	br	10002b70 <__alt_data_end+0xf8002b70>
100041f8:	04040074 	movhi	r16,4097
100041fc:	84085f04 	addi	r16,r16,8572
10004200:	003f4706 	br	10003f20 <__alt_data_end+0xf8003f20>
10004204:	d9002e17 	ldw	r4,184(sp)
10004208:	d9402f17 	ldw	r5,188(sp)
1000420c:	20800017 	ldw	r2,0(r4)
10004210:	21000104 	addi	r4,r4,4
10004214:	d9002e15 	stw	r4,184(sp)
10004218:	11400015 	stw	r5,0(r2)
1000421c:	0038ab06 	br	100024cc <__alt_data_end+0xf80024cc>
10004220:	dd802617 	ldw	r22,152(sp)
10004224:	00bfff44 	movi	r2,-3
10004228:	b0801c16 	blt	r22,r2,1000429c <___vfprintf_internal_r+0x1eb0>
1000422c:	d9402a17 	ldw	r5,168(sp)
10004230:	2d801a16 	blt	r5,r22,1000429c <___vfprintf_internal_r+0x1eb0>
10004234:	dd803215 	stw	r22,200(sp)
10004238:	003e8906 	br	10003c60 <__alt_data_end+0xf8003c60>
1000423c:	01040074 	movhi	r4,4097
10004240:	21086c84 	addi	r4,r4,8626
10004244:	d9002c15 	stw	r4,176(sp)
10004248:	003c9106 	br	10003490 <__alt_data_end+0xf8003490>
1000424c:	e005883a 	mov	r2,fp
10004250:	003e7906 	br	10003c38 <__alt_data_end+0xf8003c38>
10004254:	d9002a17 	ldw	r4,168(sp)
10004258:	df002783 	ldbu	fp,158(sp)
1000425c:	dcc02e15 	stw	r19,184(sp)
10004260:	d9002915 	stw	r4,164(sp)
10004264:	d9002b15 	stw	r4,172(sp)
10004268:	d8002a15 	stw	zero,168(sp)
1000426c:	d8003215 	stw	zero,200(sp)
10004270:	003a3b06 	br	10002b60 <__alt_data_end+0xf8002b60>
10004274:	9080004c 	andi	r2,r18,1
10004278:	0039883a 	mov	fp,zero
1000427c:	10000426 	beq	r2,zero,10004290 <___vfprintf_internal_r+0x1ea4>
10004280:	00800c04 	movi	r2,48
10004284:	dc001dc4 	addi	r16,sp,119
10004288:	d8801dc5 	stb	r2,119(sp)
1000428c:	003b6406 	br	10003020 <__alt_data_end+0xf8003020>
10004290:	d8002b15 	stw	zero,172(sp)
10004294:	dc001e04 	addi	r16,sp,120
10004298:	003a2b06 	br	10002b48 <__alt_data_end+0xf8002b48>
1000429c:	8c7fff84 	addi	r17,r17,-2
100042a0:	b5bfffc4 	addi	r22,r22,-1
100042a4:	dd802615 	stw	r22,152(sp)
100042a8:	dc4022c5 	stb	r17,139(sp)
100042ac:	b000bf16 	blt	r22,zero,100045ac <___vfprintf_internal_r+0x21c0>
100042b0:	00800ac4 	movi	r2,43
100042b4:	d8802305 	stb	r2,140(sp)
100042b8:	00800244 	movi	r2,9
100042bc:	15807016 	blt	r2,r22,10004480 <___vfprintf_internal_r+0x2094>
100042c0:	00800c04 	movi	r2,48
100042c4:	b5800c04 	addi	r22,r22,48
100042c8:	d8802345 	stb	r2,141(sp)
100042cc:	dd802385 	stb	r22,142(sp)
100042d0:	d88023c4 	addi	r2,sp,143
100042d4:	df0022c4 	addi	fp,sp,139
100042d8:	d8c03317 	ldw	r3,204(sp)
100042dc:	1739c83a 	sub	fp,r2,fp
100042e0:	d9003317 	ldw	r4,204(sp)
100042e4:	e0c7883a 	add	r3,fp,r3
100042e8:	df003a15 	stw	fp,232(sp)
100042ec:	d8c02b15 	stw	r3,172(sp)
100042f0:	00800044 	movi	r2,1
100042f4:	1100b30e 	bge	r2,r4,100045c4 <___vfprintf_internal_r+0x21d8>
100042f8:	d8c02b17 	ldw	r3,172(sp)
100042fc:	18c00044 	addi	r3,r3,1
10004300:	d8c02b15 	stw	r3,172(sp)
10004304:	1805883a 	mov	r2,r3
10004308:	1800ac16 	blt	r3,zero,100045bc <___vfprintf_internal_r+0x21d0>
1000430c:	d8003215 	stw	zero,200(sp)
10004310:	003e5d06 	br	10003c88 <__alt_data_end+0xf8003c88>
10004314:	d9002d17 	ldw	r4,180(sp)
10004318:	d9801e04 	addi	r6,sp,120
1000431c:	b80b883a 	mov	r5,r23
10004320:	0009bcc0 	call	10009bcc <__sprint_r>
10004324:	1039351e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10004328:	dc402617 	ldw	r17,152(sp)
1000432c:	d8c02017 	ldw	r3,128(sp)
10004330:	d8801f17 	ldw	r2,124(sp)
10004334:	da000404 	addi	r8,sp,16
10004338:	003ed606 	br	10003e94 <__alt_data_end+0xf8003e94>
1000433c:	182b883a 	mov	r21,r3
10004340:	d8002a15 	stw	zero,168(sp)
10004344:	00388c06 	br	10002578 <__alt_data_end+0xf8002578>
10004348:	d8802a17 	ldw	r2,168(sp)
1000434c:	103e071e 	bne	r2,zero,10003b6c <__alt_data_end+0xf8003b6c>
10004350:	dc002a15 	stw	r16,168(sp)
10004354:	003e0506 	br	10003b6c <__alt_data_end+0xf8003b6c>
10004358:	d9002a17 	ldw	r4,168(sp)
1000435c:	20c00044 	addi	r3,r4,1
10004360:	003e0f06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10004364:	01400184 	movi	r5,6
10004368:	d9402a15 	stw	r5,168(sp)
1000436c:	003dff06 	br	10003b6c <__alt_data_end+0xf8003b6c>
10004370:	d8802104 	addi	r2,sp,132
10004374:	d8800315 	stw	r2,12(sp)
10004378:	d8802504 	addi	r2,sp,148
1000437c:	d8800215 	stw	r2,8(sp)
10004380:	d8802604 	addi	r2,sp,152
10004384:	d8800115 	stw	r2,4(sp)
10004388:	d8802a17 	ldw	r2,168(sp)
1000438c:	d9403617 	ldw	r5,216(sp)
10004390:	d9002d17 	ldw	r4,180(sp)
10004394:	d8800015 	stw	r2,0(sp)
10004398:	01c000c4 	movi	r7,3
1000439c:	980d883a 	mov	r6,r19
100043a0:	da003d15 	stw	r8,244(sp)
100043a4:	0004b1c0 	call	10004b1c <_dtoa_r>
100043a8:	d8c02a17 	ldw	r3,168(sp)
100043ac:	da003d17 	ldw	r8,244(sp)
100043b0:	1021883a 	mov	r16,r2
100043b4:	10f9883a 	add	fp,r2,r3
100043b8:	81000007 	ldb	r4,0(r16)
100043bc:	00800c04 	movi	r2,48
100043c0:	20805e26 	beq	r4,r2,1000453c <___vfprintf_internal_r+0x2150>
100043c4:	d8c02617 	ldw	r3,152(sp)
100043c8:	e0f9883a 	add	fp,fp,r3
100043cc:	003e0a06 	br	10003bf8 <__alt_data_end+0xf8003bf8>
100043d0:	00c00b44 	movi	r3,45
100043d4:	24e0003c 	xorhi	r19,r4,32768
100043d8:	d8c02905 	stb	r3,164(sp)
100043dc:	003de906 	br	10003b84 <__alt_data_end+0xf8003b84>
100043e0:	d8c03217 	ldw	r3,200(sp)
100043e4:	00c07a0e 	bge	zero,r3,100045d0 <___vfprintf_internal_r+0x21e4>
100043e8:	00800044 	movi	r2,1
100043ec:	d9003317 	ldw	r4,204(sp)
100043f0:	1105883a 	add	r2,r2,r4
100043f4:	d8802b15 	stw	r2,172(sp)
100043f8:	10004e16 	blt	r2,zero,10004534 <___vfprintf_internal_r+0x2148>
100043fc:	044019c4 	movi	r17,103
10004400:	003e2106 	br	10003c88 <__alt_data_end+0xf8003c88>
10004404:	d9002a17 	ldw	r4,168(sp)
10004408:	d8802104 	addi	r2,sp,132
1000440c:	d8800315 	stw	r2,12(sp)
10004410:	d9000015 	stw	r4,0(sp)
10004414:	d8802504 	addi	r2,sp,148
10004418:	d9403617 	ldw	r5,216(sp)
1000441c:	d9002d17 	ldw	r4,180(sp)
10004420:	d8800215 	stw	r2,8(sp)
10004424:	d8802604 	addi	r2,sp,152
10004428:	d8800115 	stw	r2,4(sp)
1000442c:	01c000c4 	movi	r7,3
10004430:	980d883a 	mov	r6,r19
10004434:	da003d15 	stw	r8,244(sp)
10004438:	0004b1c0 	call	10004b1c <_dtoa_r>
1000443c:	d8c02a17 	ldw	r3,168(sp)
10004440:	da003d17 	ldw	r8,244(sp)
10004444:	1021883a 	mov	r16,r2
10004448:	00801184 	movi	r2,70
1000444c:	80f9883a 	add	fp,r16,r3
10004450:	88bfd926 	beq	r17,r2,100043b8 <__alt_data_end+0xf80043b8>
10004454:	003de806 	br	10003bf8 <__alt_data_end+0xf8003bf8>
10004458:	d9002a17 	ldw	r4,168(sp)
1000445c:	00c04d0e 	bge	zero,r3,10004594 <___vfprintf_internal_r+0x21a8>
10004460:	2000441e 	bne	r4,zero,10004574 <___vfprintf_internal_r+0x2188>
10004464:	9480004c 	andi	r18,r18,1
10004468:	9000421e 	bne	r18,zero,10004574 <___vfprintf_internal_r+0x2188>
1000446c:	1805883a 	mov	r2,r3
10004470:	18006f16 	blt	r3,zero,10004630 <___vfprintf_internal_r+0x2244>
10004474:	d8c03217 	ldw	r3,200(sp)
10004478:	d8c02b15 	stw	r3,172(sp)
1000447c:	003e0206 	br	10003c88 <__alt_data_end+0xf8003c88>
10004480:	df0022c4 	addi	fp,sp,139
10004484:	dc002a15 	stw	r16,168(sp)
10004488:	4027883a 	mov	r19,r8
1000448c:	e021883a 	mov	r16,fp
10004490:	b009883a 	mov	r4,r22
10004494:	01400284 	movi	r5,10
10004498:	000c7580 	call	1000c758 <__modsi3>
1000449c:	10800c04 	addi	r2,r2,48
100044a0:	843fffc4 	addi	r16,r16,-1
100044a4:	b009883a 	mov	r4,r22
100044a8:	01400284 	movi	r5,10
100044ac:	80800005 	stb	r2,0(r16)
100044b0:	000c6d40 	call	1000c6d4 <__divsi3>
100044b4:	102d883a 	mov	r22,r2
100044b8:	00800244 	movi	r2,9
100044bc:	15bff416 	blt	r2,r22,10004490 <__alt_data_end+0xf8004490>
100044c0:	9811883a 	mov	r8,r19
100044c4:	b0800c04 	addi	r2,r22,48
100044c8:	8027883a 	mov	r19,r16
100044cc:	997fffc4 	addi	r5,r19,-1
100044d0:	98bfffc5 	stb	r2,-1(r19)
100044d4:	dc002a17 	ldw	r16,168(sp)
100044d8:	2f006d2e 	bgeu	r5,fp,10004690 <___vfprintf_internal_r+0x22a4>
100044dc:	d9c02384 	addi	r7,sp,142
100044e0:	3ccfc83a 	sub	r7,r7,r19
100044e4:	d9002344 	addi	r4,sp,141
100044e8:	e1cf883a 	add	r7,fp,r7
100044ec:	00000106 	br	100044f4 <___vfprintf_internal_r+0x2108>
100044f0:	28800003 	ldbu	r2,0(r5)
100044f4:	20800005 	stb	r2,0(r4)
100044f8:	21000044 	addi	r4,r4,1
100044fc:	29400044 	addi	r5,r5,1
10004500:	393ffb1e 	bne	r7,r4,100044f0 <__alt_data_end+0xf80044f0>
10004504:	d8802304 	addi	r2,sp,140
10004508:	14c5c83a 	sub	r2,r2,r19
1000450c:	d8c02344 	addi	r3,sp,141
10004510:	1885883a 	add	r2,r3,r2
10004514:	003f7006 	br	100042d8 <__alt_data_end+0xf80042d8>
10004518:	0005883a 	mov	r2,zero
1000451c:	003f0f06 	br	1000415c <__alt_data_end+0xf800415c>
10004520:	d8c03217 	ldw	r3,200(sp)
10004524:	18c00044 	addi	r3,r3,1
10004528:	d8c02b15 	stw	r3,172(sp)
1000452c:	1805883a 	mov	r2,r3
10004530:	183fb20e 	bge	r3,zero,100043fc <__alt_data_end+0xf80043fc>
10004534:	0005883a 	mov	r2,zero
10004538:	003fb006 	br	100043fc <__alt_data_end+0xf80043fc>
1000453c:	d9003617 	ldw	r4,216(sp)
10004540:	000d883a 	mov	r6,zero
10004544:	000f883a 	mov	r7,zero
10004548:	980b883a 	mov	r5,r19
1000454c:	d8c03c15 	stw	r3,240(sp)
10004550:	da003d15 	stw	r8,244(sp)
10004554:	000db2c0 	call	1000db2c <__eqdf2>
10004558:	d8c03c17 	ldw	r3,240(sp)
1000455c:	da003d17 	ldw	r8,244(sp)
10004560:	103f9826 	beq	r2,zero,100043c4 <__alt_data_end+0xf80043c4>
10004564:	00800044 	movi	r2,1
10004568:	10c7c83a 	sub	r3,r2,r3
1000456c:	d8c02615 	stw	r3,152(sp)
10004570:	003f9506 	br	100043c8 <__alt_data_end+0xf80043c8>
10004574:	d9002a17 	ldw	r4,168(sp)
10004578:	d8c03217 	ldw	r3,200(sp)
1000457c:	20800044 	addi	r2,r4,1
10004580:	1885883a 	add	r2,r3,r2
10004584:	d8802b15 	stw	r2,172(sp)
10004588:	103dbf0e 	bge	r2,zero,10003c88 <__alt_data_end+0xf8003c88>
1000458c:	0005883a 	mov	r2,zero
10004590:	003dbd06 	br	10003c88 <__alt_data_end+0xf8003c88>
10004594:	2000201e 	bne	r4,zero,10004618 <___vfprintf_internal_r+0x222c>
10004598:	9480004c 	andi	r18,r18,1
1000459c:	90001e1e 	bne	r18,zero,10004618 <___vfprintf_internal_r+0x222c>
100045a0:	00800044 	movi	r2,1
100045a4:	d8802b15 	stw	r2,172(sp)
100045a8:	003db706 	br	10003c88 <__alt_data_end+0xf8003c88>
100045ac:	00800b44 	movi	r2,45
100045b0:	05adc83a 	sub	r22,zero,r22
100045b4:	d8802305 	stb	r2,140(sp)
100045b8:	003f3f06 	br	100042b8 <__alt_data_end+0xf80042b8>
100045bc:	0005883a 	mov	r2,zero
100045c0:	003f5206 	br	1000430c <__alt_data_end+0xf800430c>
100045c4:	90a4703a 	and	r18,r18,r2
100045c8:	903f4e26 	beq	r18,zero,10004304 <__alt_data_end+0xf8004304>
100045cc:	003f4a06 	br	100042f8 <__alt_data_end+0xf80042f8>
100045d0:	00800084 	movi	r2,2
100045d4:	10c5c83a 	sub	r2,r2,r3
100045d8:	003f8406 	br	100043ec <__alt_data_end+0xf80043ec>
100045dc:	d9402e17 	ldw	r5,184(sp)
100045e0:	d9002e17 	ldw	r4,184(sp)
100045e4:	ac400043 	ldbu	r17,1(r21)
100045e8:	29400017 	ldw	r5,0(r5)
100045ec:	20800104 	addi	r2,r4,4
100045f0:	d8802e15 	stw	r2,184(sp)
100045f4:	d9402a15 	stw	r5,168(sp)
100045f8:	182b883a 	mov	r21,r3
100045fc:	283e7b0e 	bge	r5,zero,10003fec <__alt_data_end+0xf8003fec>
10004600:	8c403fcc 	andi	r17,r17,255
10004604:	017fffc4 	movi	r5,-1
10004608:	8c40201c 	xori	r17,r17,128
1000460c:	d9402a15 	stw	r5,168(sp)
10004610:	8c7fe004 	addi	r17,r17,-128
10004614:	0037d706 	br	10002574 <__alt_data_end+0xf8002574>
10004618:	d8c02a17 	ldw	r3,168(sp)
1000461c:	18c00084 	addi	r3,r3,2
10004620:	d8c02b15 	stw	r3,172(sp)
10004624:	1805883a 	mov	r2,r3
10004628:	183d970e 	bge	r3,zero,10003c88 <__alt_data_end+0xf8003c88>
1000462c:	003fd706 	br	1000458c <__alt_data_end+0xf800458c>
10004630:	0005883a 	mov	r2,zero
10004634:	003f8f06 	br	10004474 <__alt_data_end+0xf8004474>
10004638:	9080004c 	andi	r2,r18,1
1000463c:	103f821e 	bne	r2,zero,10004448 <__alt_data_end+0xf8004448>
10004640:	d8802117 	ldw	r2,132(sp)
10004644:	1405c83a 	sub	r2,r2,r16
10004648:	d8803315 	stw	r2,204(sp)
1000464c:	b47ef426 	beq	r22,r17,10004220 <__alt_data_end+0xf8004220>
10004650:	dd802617 	ldw	r22,152(sp)
10004654:	003f1206 	br	100042a0 <__alt_data_end+0xf80042a0>
10004658:	d8c02b03 	ldbu	r3,172(sp)
1000465c:	d8c02785 	stb	r3,158(sp)
10004660:	0038df06 	br	100029e0 <__alt_data_end+0xf80029e0>
10004664:	d8c02b03 	ldbu	r3,172(sp)
10004668:	d8c02785 	stb	r3,158(sp)
1000466c:	0038aa06 	br	10002918 <__alt_data_end+0xf8002918>
10004670:	d8c02b03 	ldbu	r3,172(sp)
10004674:	d8c02785 	stb	r3,158(sp)
10004678:	003a4306 	br	10002f88 <__alt_data_end+0xf8002f88>
1000467c:	d8c02b03 	ldbu	r3,172(sp)
10004680:	d8c02785 	stb	r3,158(sp)
10004684:	003af506 	br	1000325c <__alt_data_end+0xf800325c>
10004688:	0005883a 	mov	r2,zero
1000468c:	003d7b06 	br	10003c7c <__alt_data_end+0xf8003c7c>
10004690:	d8802344 	addi	r2,sp,141
10004694:	003f1006 	br	100042d8 <__alt_data_end+0xf80042d8>
10004698:	d8c02b03 	ldbu	r3,172(sp)
1000469c:	d8c02785 	stb	r3,158(sp)
100046a0:	0038fd06 	br	10002a98 <__alt_data_end+0xf8002a98>
100046a4:	d8c02b03 	ldbu	r3,172(sp)
100046a8:	d8c02785 	stb	r3,158(sp)
100046ac:	003a9706 	br	1000310c <__alt_data_end+0xf800310c>
100046b0:	d8c02b03 	ldbu	r3,172(sp)
100046b4:	d8c02785 	stb	r3,158(sp)
100046b8:	003a1806 	br	10002f1c <__alt_data_end+0xf8002f1c>
100046bc:	d8c02b03 	ldbu	r3,172(sp)
100046c0:	d8c02785 	stb	r3,158(sp)
100046c4:	003abe06 	br	100031c0 <__alt_data_end+0xf80031c0>

100046c8 <__vfprintf_internal>:
100046c8:	00840074 	movhi	r2,4097
100046cc:	108fc704 	addi	r2,r2,16156
100046d0:	300f883a 	mov	r7,r6
100046d4:	280d883a 	mov	r6,r5
100046d8:	200b883a 	mov	r5,r4
100046dc:	11000017 	ldw	r4,0(r2)
100046e0:	00023ec1 	jmpi	100023ec <___vfprintf_internal_r>

100046e4 <__sbprintf>:
100046e4:	2880030b 	ldhu	r2,12(r5)
100046e8:	2ac01917 	ldw	r11,100(r5)
100046ec:	2a80038b 	ldhu	r10,14(r5)
100046f0:	2a400717 	ldw	r9,28(r5)
100046f4:	2a000917 	ldw	r8,36(r5)
100046f8:	defee204 	addi	sp,sp,-1144
100046fc:	00c10004 	movi	r3,1024
10004700:	dc011a15 	stw	r16,1128(sp)
10004704:	10bfff4c 	andi	r2,r2,65533
10004708:	2821883a 	mov	r16,r5
1000470c:	d8cb883a 	add	r5,sp,r3
10004710:	dc811c15 	stw	r18,1136(sp)
10004714:	dc411b15 	stw	r17,1132(sp)
10004718:	dfc11d15 	stw	ra,1140(sp)
1000471c:	2025883a 	mov	r18,r4
10004720:	d881030d 	sth	r2,1036(sp)
10004724:	dac11915 	stw	r11,1124(sp)
10004728:	da81038d 	sth	r10,1038(sp)
1000472c:	da410715 	stw	r9,1052(sp)
10004730:	da010915 	stw	r8,1060(sp)
10004734:	dec10015 	stw	sp,1024(sp)
10004738:	dec10415 	stw	sp,1040(sp)
1000473c:	d8c10215 	stw	r3,1032(sp)
10004740:	d8c10515 	stw	r3,1044(sp)
10004744:	d8010615 	stw	zero,1048(sp)
10004748:	00023ec0 	call	100023ec <___vfprintf_internal_r>
1000474c:	1023883a 	mov	r17,r2
10004750:	10000416 	blt	r2,zero,10004764 <__sbprintf+0x80>
10004754:	d9410004 	addi	r5,sp,1024
10004758:	9009883a 	mov	r4,r18
1000475c:	00063c00 	call	100063c0 <_fflush_r>
10004760:	10000d1e 	bne	r2,zero,10004798 <__sbprintf+0xb4>
10004764:	d881030b 	ldhu	r2,1036(sp)
10004768:	1080100c 	andi	r2,r2,64
1000476c:	10000326 	beq	r2,zero,1000477c <__sbprintf+0x98>
10004770:	8080030b 	ldhu	r2,12(r16)
10004774:	10801014 	ori	r2,r2,64
10004778:	8080030d 	sth	r2,12(r16)
1000477c:	8805883a 	mov	r2,r17
10004780:	dfc11d17 	ldw	ra,1140(sp)
10004784:	dc811c17 	ldw	r18,1136(sp)
10004788:	dc411b17 	ldw	r17,1132(sp)
1000478c:	dc011a17 	ldw	r16,1128(sp)
10004790:	dec11e04 	addi	sp,sp,1144
10004794:	f800283a 	ret
10004798:	047fffc4 	movi	r17,-1
1000479c:	003ff106 	br	10004764 <__alt_data_end+0xf8004764>

100047a0 <__swsetup_r>:
100047a0:	00840074 	movhi	r2,4097
100047a4:	defffd04 	addi	sp,sp,-12
100047a8:	108fc704 	addi	r2,r2,16156
100047ac:	dc400115 	stw	r17,4(sp)
100047b0:	2023883a 	mov	r17,r4
100047b4:	11000017 	ldw	r4,0(r2)
100047b8:	dc000015 	stw	r16,0(sp)
100047bc:	dfc00215 	stw	ra,8(sp)
100047c0:	2821883a 	mov	r16,r5
100047c4:	20000226 	beq	r4,zero,100047d0 <__swsetup_r+0x30>
100047c8:	20800e17 	ldw	r2,56(r4)
100047cc:	10003126 	beq	r2,zero,10004894 <__swsetup_r+0xf4>
100047d0:	8080030b 	ldhu	r2,12(r16)
100047d4:	10c0020c 	andi	r3,r2,8
100047d8:	1009883a 	mov	r4,r2
100047dc:	18000f26 	beq	r3,zero,1000481c <__swsetup_r+0x7c>
100047e0:	80c00417 	ldw	r3,16(r16)
100047e4:	18001526 	beq	r3,zero,1000483c <__swsetup_r+0x9c>
100047e8:	1100004c 	andi	r4,r2,1
100047ec:	20001c1e 	bne	r4,zero,10004860 <__swsetup_r+0xc0>
100047f0:	1080008c 	andi	r2,r2,2
100047f4:	1000291e 	bne	r2,zero,1000489c <__swsetup_r+0xfc>
100047f8:	80800517 	ldw	r2,20(r16)
100047fc:	80800215 	stw	r2,8(r16)
10004800:	18001c26 	beq	r3,zero,10004874 <__swsetup_r+0xd4>
10004804:	0005883a 	mov	r2,zero
10004808:	dfc00217 	ldw	ra,8(sp)
1000480c:	dc400117 	ldw	r17,4(sp)
10004810:	dc000017 	ldw	r16,0(sp)
10004814:	dec00304 	addi	sp,sp,12
10004818:	f800283a 	ret
1000481c:	2080040c 	andi	r2,r4,16
10004820:	10002e26 	beq	r2,zero,100048dc <__swsetup_r+0x13c>
10004824:	2080010c 	andi	r2,r4,4
10004828:	10001e1e 	bne	r2,zero,100048a4 <__swsetup_r+0x104>
1000482c:	80c00417 	ldw	r3,16(r16)
10004830:	20800214 	ori	r2,r4,8
10004834:	8080030d 	sth	r2,12(r16)
10004838:	183feb1e 	bne	r3,zero,100047e8 <__alt_data_end+0xf80047e8>
1000483c:	1100a00c 	andi	r4,r2,640
10004840:	01408004 	movi	r5,512
10004844:	217fe826 	beq	r4,r5,100047e8 <__alt_data_end+0xf80047e8>
10004848:	800b883a 	mov	r5,r16
1000484c:	8809883a 	mov	r4,r17
10004850:	000735c0 	call	1000735c <__smakebuf_r>
10004854:	8080030b 	ldhu	r2,12(r16)
10004858:	80c00417 	ldw	r3,16(r16)
1000485c:	003fe206 	br	100047e8 <__alt_data_end+0xf80047e8>
10004860:	80800517 	ldw	r2,20(r16)
10004864:	80000215 	stw	zero,8(r16)
10004868:	0085c83a 	sub	r2,zero,r2
1000486c:	80800615 	stw	r2,24(r16)
10004870:	183fe41e 	bne	r3,zero,10004804 <__alt_data_end+0xf8004804>
10004874:	80c0030b 	ldhu	r3,12(r16)
10004878:	0005883a 	mov	r2,zero
1000487c:	1900200c 	andi	r4,r3,128
10004880:	203fe126 	beq	r4,zero,10004808 <__alt_data_end+0xf8004808>
10004884:	18c01014 	ori	r3,r3,64
10004888:	80c0030d 	sth	r3,12(r16)
1000488c:	00bfffc4 	movi	r2,-1
10004890:	003fdd06 	br	10004808 <__alt_data_end+0xf8004808>
10004894:	00067ac0 	call	100067ac <__sinit>
10004898:	003fcd06 	br	100047d0 <__alt_data_end+0xf80047d0>
1000489c:	0005883a 	mov	r2,zero
100048a0:	003fd606 	br	100047fc <__alt_data_end+0xf80047fc>
100048a4:	81400c17 	ldw	r5,48(r16)
100048a8:	28000626 	beq	r5,zero,100048c4 <__swsetup_r+0x124>
100048ac:	80801004 	addi	r2,r16,64
100048b0:	28800326 	beq	r5,r2,100048c0 <__swsetup_r+0x120>
100048b4:	8809883a 	mov	r4,r17
100048b8:	00069200 	call	10006920 <_free_r>
100048bc:	8100030b 	ldhu	r4,12(r16)
100048c0:	80000c15 	stw	zero,48(r16)
100048c4:	80c00417 	ldw	r3,16(r16)
100048c8:	00bff6c4 	movi	r2,-37
100048cc:	1108703a 	and	r4,r2,r4
100048d0:	80000115 	stw	zero,4(r16)
100048d4:	80c00015 	stw	r3,0(r16)
100048d8:	003fd506 	br	10004830 <__alt_data_end+0xf8004830>
100048dc:	00800244 	movi	r2,9
100048e0:	88800015 	stw	r2,0(r17)
100048e4:	20801014 	ori	r2,r4,64
100048e8:	8080030d 	sth	r2,12(r16)
100048ec:	00bfffc4 	movi	r2,-1
100048f0:	003fc506 	br	10004808 <__alt_data_end+0xf8004808>

100048f4 <quorem>:
100048f4:	defff204 	addi	sp,sp,-56
100048f8:	ddc00b15 	stw	r23,44(sp)
100048fc:	20800417 	ldw	r2,16(r4)
10004900:	2dc00417 	ldw	r23,16(r5)
10004904:	dfc00d15 	stw	ra,52(sp)
10004908:	df000c15 	stw	fp,48(sp)
1000490c:	dd800a15 	stw	r22,40(sp)
10004910:	dd400915 	stw	r21,36(sp)
10004914:	dd000815 	stw	r20,32(sp)
10004918:	dcc00715 	stw	r19,28(sp)
1000491c:	dc800615 	stw	r18,24(sp)
10004920:	dc400515 	stw	r17,20(sp)
10004924:	dc000415 	stw	r16,16(sp)
10004928:	15c07a16 	blt	r2,r23,10004b14 <quorem+0x220>
1000492c:	bdffffc4 	addi	r23,r23,-1
10004930:	bde9883a 	add	r20,r23,r23
10004934:	28c00504 	addi	r3,r5,20
10004938:	a529883a 	add	r20,r20,r20
1000493c:	1d39883a 	add	fp,r3,r20
10004940:	24c00504 	addi	r19,r4,20
10004944:	d9400215 	stw	r5,8(sp)
10004948:	9d29883a 	add	r20,r19,r20
1000494c:	e1400017 	ldw	r5,0(fp)
10004950:	d9000015 	stw	r4,0(sp)
10004954:	a1000017 	ldw	r4,0(r20)
10004958:	29400044 	addi	r5,r5,1
1000495c:	d8c00115 	stw	r3,4(sp)
10004960:	dd000315 	stw	r20,12(sp)
10004964:	000c7cc0 	call	1000c7cc <__udivsi3>
10004968:	1025883a 	mov	r18,r2
1000496c:	10003026 	beq	r2,zero,10004a30 <quorem+0x13c>
10004970:	dc400117 	ldw	r17,4(sp)
10004974:	9829883a 	mov	r20,r19
10004978:	002d883a 	mov	r22,zero
1000497c:	0021883a 	mov	r16,zero
10004980:	8d400017 	ldw	r21,0(r17)
10004984:	900b883a 	mov	r5,r18
10004988:	8c400104 	addi	r17,r17,4
1000498c:	a93fffcc 	andi	r4,r21,65535
10004990:	000c8880 	call	1000c888 <__mulsi3>
10004994:	a808d43a 	srli	r4,r21,16
10004998:	900b883a 	mov	r5,r18
1000499c:	15ad883a 	add	r22,r2,r22
100049a0:	000c8880 	call	1000c888 <__mulsi3>
100049a4:	a1000017 	ldw	r4,0(r20)
100049a8:	b00cd43a 	srli	r6,r22,16
100049ac:	b0ffffcc 	andi	r3,r22,65535
100049b0:	217fffcc 	andi	r5,r4,65535
100049b4:	2c21883a 	add	r16,r5,r16
100049b8:	80c7c83a 	sub	r3,r16,r3
100049bc:	2008d43a 	srli	r4,r4,16
100049c0:	1185883a 	add	r2,r2,r6
100049c4:	1821d43a 	srai	r16,r3,16
100049c8:	117fffcc 	andi	r5,r2,65535
100049cc:	2149c83a 	sub	r4,r4,r5
100049d0:	2421883a 	add	r16,r4,r16
100049d4:	8008943a 	slli	r4,r16,16
100049d8:	18ffffcc 	andi	r3,r3,65535
100049dc:	102cd43a 	srli	r22,r2,16
100049e0:	20c8b03a 	or	r4,r4,r3
100049e4:	a1000015 	stw	r4,0(r20)
100049e8:	8021d43a 	srai	r16,r16,16
100049ec:	a5000104 	addi	r20,r20,4
100049f0:	e47fe32e 	bgeu	fp,r17,10004980 <__alt_data_end+0xf8004980>
100049f4:	d8c00317 	ldw	r3,12(sp)
100049f8:	18800017 	ldw	r2,0(r3)
100049fc:	10000c1e 	bne	r2,zero,10004a30 <quorem+0x13c>
10004a00:	18bfff04 	addi	r2,r3,-4
10004a04:	9880082e 	bgeu	r19,r2,10004a28 <quorem+0x134>
10004a08:	18ffff17 	ldw	r3,-4(r3)
10004a0c:	18000326 	beq	r3,zero,10004a1c <quorem+0x128>
10004a10:	00000506 	br	10004a28 <quorem+0x134>
10004a14:	10c00017 	ldw	r3,0(r2)
10004a18:	1800031e 	bne	r3,zero,10004a28 <quorem+0x134>
10004a1c:	10bfff04 	addi	r2,r2,-4
10004a20:	bdffffc4 	addi	r23,r23,-1
10004a24:	98bffb36 	bltu	r19,r2,10004a14 <__alt_data_end+0xf8004a14>
10004a28:	d8c00017 	ldw	r3,0(sp)
10004a2c:	1dc00415 	stw	r23,16(r3)
10004a30:	d9400217 	ldw	r5,8(sp)
10004a34:	d9000017 	ldw	r4,0(sp)
10004a38:	0008b580 	call	10008b58 <__mcmp>
10004a3c:	10002816 	blt	r2,zero,10004ae0 <quorem+0x1ec>
10004a40:	dc400117 	ldw	r17,4(sp)
10004a44:	94800044 	addi	r18,r18,1
10004a48:	980d883a 	mov	r6,r19
10004a4c:	0007883a 	mov	r3,zero
10004a50:	31000017 	ldw	r4,0(r6)
10004a54:	89400017 	ldw	r5,0(r17)
10004a58:	31800104 	addi	r6,r6,4
10004a5c:	20bfffcc 	andi	r2,r4,65535
10004a60:	10c7883a 	add	r3,r2,r3
10004a64:	28bfffcc 	andi	r2,r5,65535
10004a68:	1885c83a 	sub	r2,r3,r2
10004a6c:	280ad43a 	srli	r5,r5,16
10004a70:	2008d43a 	srli	r4,r4,16
10004a74:	1007d43a 	srai	r3,r2,16
10004a78:	10bfffcc 	andi	r2,r2,65535
10004a7c:	2149c83a 	sub	r4,r4,r5
10004a80:	20c9883a 	add	r4,r4,r3
10004a84:	200a943a 	slli	r5,r4,16
10004a88:	8c400104 	addi	r17,r17,4
10004a8c:	2007d43a 	srai	r3,r4,16
10004a90:	2884b03a 	or	r2,r5,r2
10004a94:	30bfff15 	stw	r2,-4(r6)
10004a98:	e47fed2e 	bgeu	fp,r17,10004a50 <__alt_data_end+0xf8004a50>
10004a9c:	bdc5883a 	add	r2,r23,r23
10004aa0:	1085883a 	add	r2,r2,r2
10004aa4:	9887883a 	add	r3,r19,r2
10004aa8:	18800017 	ldw	r2,0(r3)
10004aac:	10000c1e 	bne	r2,zero,10004ae0 <quorem+0x1ec>
10004ab0:	18bfff04 	addi	r2,r3,-4
10004ab4:	9880082e 	bgeu	r19,r2,10004ad8 <quorem+0x1e4>
10004ab8:	18ffff17 	ldw	r3,-4(r3)
10004abc:	18000326 	beq	r3,zero,10004acc <quorem+0x1d8>
10004ac0:	00000506 	br	10004ad8 <quorem+0x1e4>
10004ac4:	10c00017 	ldw	r3,0(r2)
10004ac8:	1800031e 	bne	r3,zero,10004ad8 <quorem+0x1e4>
10004acc:	10bfff04 	addi	r2,r2,-4
10004ad0:	bdffffc4 	addi	r23,r23,-1
10004ad4:	98bffb36 	bltu	r19,r2,10004ac4 <__alt_data_end+0xf8004ac4>
10004ad8:	d8c00017 	ldw	r3,0(sp)
10004adc:	1dc00415 	stw	r23,16(r3)
10004ae0:	9005883a 	mov	r2,r18
10004ae4:	dfc00d17 	ldw	ra,52(sp)
10004ae8:	df000c17 	ldw	fp,48(sp)
10004aec:	ddc00b17 	ldw	r23,44(sp)
10004af0:	dd800a17 	ldw	r22,40(sp)
10004af4:	dd400917 	ldw	r21,36(sp)
10004af8:	dd000817 	ldw	r20,32(sp)
10004afc:	dcc00717 	ldw	r19,28(sp)
10004b00:	dc800617 	ldw	r18,24(sp)
10004b04:	dc400517 	ldw	r17,20(sp)
10004b08:	dc000417 	ldw	r16,16(sp)
10004b0c:	dec00e04 	addi	sp,sp,56
10004b10:	f800283a 	ret
10004b14:	0005883a 	mov	r2,zero
10004b18:	003ff206 	br	10004ae4 <__alt_data_end+0xf8004ae4>

10004b1c <_dtoa_r>:
10004b1c:	20801017 	ldw	r2,64(r4)
10004b20:	deffde04 	addi	sp,sp,-136
10004b24:	df002015 	stw	fp,128(sp)
10004b28:	dcc01b15 	stw	r19,108(sp)
10004b2c:	dc801a15 	stw	r18,104(sp)
10004b30:	dc401915 	stw	r17,100(sp)
10004b34:	dc001815 	stw	r16,96(sp)
10004b38:	dfc02115 	stw	ra,132(sp)
10004b3c:	ddc01f15 	stw	r23,124(sp)
10004b40:	dd801e15 	stw	r22,120(sp)
10004b44:	dd401d15 	stw	r21,116(sp)
10004b48:	dd001c15 	stw	r20,112(sp)
10004b4c:	d9c00315 	stw	r7,12(sp)
10004b50:	2039883a 	mov	fp,r4
10004b54:	3023883a 	mov	r17,r6
10004b58:	2825883a 	mov	r18,r5
10004b5c:	dc002417 	ldw	r16,144(sp)
10004b60:	3027883a 	mov	r19,r6
10004b64:	10000826 	beq	r2,zero,10004b88 <_dtoa_r+0x6c>
10004b68:	21801117 	ldw	r6,68(r4)
10004b6c:	00c00044 	movi	r3,1
10004b70:	100b883a 	mov	r5,r2
10004b74:	1986983a 	sll	r3,r3,r6
10004b78:	11800115 	stw	r6,4(r2)
10004b7c:	10c00215 	stw	r3,8(r2)
10004b80:	000827c0 	call	1000827c <_Bfree>
10004b84:	e0001015 	stw	zero,64(fp)
10004b88:	88002e16 	blt	r17,zero,10004c44 <_dtoa_r+0x128>
10004b8c:	80000015 	stw	zero,0(r16)
10004b90:	889ffc2c 	andhi	r2,r17,32752
10004b94:	00dffc34 	movhi	r3,32752
10004b98:	10c01c26 	beq	r2,r3,10004c0c <_dtoa_r+0xf0>
10004b9c:	000d883a 	mov	r6,zero
10004ba0:	000f883a 	mov	r7,zero
10004ba4:	9009883a 	mov	r4,r18
10004ba8:	980b883a 	mov	r5,r19
10004bac:	000db2c0 	call	1000db2c <__eqdf2>
10004bb0:	10002b1e 	bne	r2,zero,10004c60 <_dtoa_r+0x144>
10004bb4:	d9c02317 	ldw	r7,140(sp)
10004bb8:	00800044 	movi	r2,1
10004bbc:	38800015 	stw	r2,0(r7)
10004bc0:	d8802517 	ldw	r2,148(sp)
10004bc4:	10019e26 	beq	r2,zero,10005240 <_dtoa_r+0x724>
10004bc8:	d8c02517 	ldw	r3,148(sp)
10004bcc:	00840074 	movhi	r2,4097
10004bd0:	10886c44 	addi	r2,r2,8625
10004bd4:	18800015 	stw	r2,0(r3)
10004bd8:	10bfffc4 	addi	r2,r2,-1
10004bdc:	dfc02117 	ldw	ra,132(sp)
10004be0:	df002017 	ldw	fp,128(sp)
10004be4:	ddc01f17 	ldw	r23,124(sp)
10004be8:	dd801e17 	ldw	r22,120(sp)
10004bec:	dd401d17 	ldw	r21,116(sp)
10004bf0:	dd001c17 	ldw	r20,112(sp)
10004bf4:	dcc01b17 	ldw	r19,108(sp)
10004bf8:	dc801a17 	ldw	r18,104(sp)
10004bfc:	dc401917 	ldw	r17,100(sp)
10004c00:	dc001817 	ldw	r16,96(sp)
10004c04:	dec02204 	addi	sp,sp,136
10004c08:	f800283a 	ret
10004c0c:	d8c02317 	ldw	r3,140(sp)
10004c10:	0089c3c4 	movi	r2,9999
10004c14:	18800015 	stw	r2,0(r3)
10004c18:	90017726 	beq	r18,zero,100051f8 <_dtoa_r+0x6dc>
10004c1c:	00840074 	movhi	r2,4097
10004c20:	10887804 	addi	r2,r2,8672
10004c24:	d9002517 	ldw	r4,148(sp)
10004c28:	203fec26 	beq	r4,zero,10004bdc <__alt_data_end+0xf8004bdc>
10004c2c:	10c000c7 	ldb	r3,3(r2)
10004c30:	1801781e 	bne	r3,zero,10005214 <_dtoa_r+0x6f8>
10004c34:	10c000c4 	addi	r3,r2,3
10004c38:	d9802517 	ldw	r6,148(sp)
10004c3c:	30c00015 	stw	r3,0(r6)
10004c40:	003fe606 	br	10004bdc <__alt_data_end+0xf8004bdc>
10004c44:	04e00034 	movhi	r19,32768
10004c48:	9cffffc4 	addi	r19,r19,-1
10004c4c:	00800044 	movi	r2,1
10004c50:	8ce6703a 	and	r19,r17,r19
10004c54:	80800015 	stw	r2,0(r16)
10004c58:	9823883a 	mov	r17,r19
10004c5c:	003fcc06 	br	10004b90 <__alt_data_end+0xf8004b90>
10004c60:	d8800204 	addi	r2,sp,8
10004c64:	d8800015 	stw	r2,0(sp)
10004c68:	d9c00104 	addi	r7,sp,4
10004c6c:	900b883a 	mov	r5,r18
10004c70:	980d883a 	mov	r6,r19
10004c74:	e009883a 	mov	r4,fp
10004c78:	8820d53a 	srli	r16,r17,20
10004c7c:	0008f240 	call	10008f24 <__d2b>
10004c80:	d8800915 	stw	r2,36(sp)
10004c84:	8001651e 	bne	r16,zero,1000521c <_dtoa_r+0x700>
10004c88:	dd800217 	ldw	r22,8(sp)
10004c8c:	dc000117 	ldw	r16,4(sp)
10004c90:	00800804 	movi	r2,32
10004c94:	b421883a 	add	r16,r22,r16
10004c98:	80c10c84 	addi	r3,r16,1074
10004c9c:	10c2d10e 	bge	r2,r3,100057e4 <_dtoa_r+0xcc8>
10004ca0:	00801004 	movi	r2,64
10004ca4:	81010484 	addi	r4,r16,1042
10004ca8:	10c7c83a 	sub	r3,r2,r3
10004cac:	9108d83a 	srl	r4,r18,r4
10004cb0:	88e2983a 	sll	r17,r17,r3
10004cb4:	2448b03a 	or	r4,r4,r17
10004cb8:	000f0440 	call	1000f044 <__floatunsidf>
10004cbc:	017f8434 	movhi	r5,65040
10004cc0:	01800044 	movi	r6,1
10004cc4:	1009883a 	mov	r4,r2
10004cc8:	194b883a 	add	r5,r3,r5
10004ccc:	843fffc4 	addi	r16,r16,-1
10004cd0:	d9801115 	stw	r6,68(sp)
10004cd4:	000d883a 	mov	r6,zero
10004cd8:	01cffe34 	movhi	r7,16376
10004cdc:	000e5ec0 	call	1000e5ec <__subdf3>
10004ce0:	0198dbf4 	movhi	r6,25455
10004ce4:	01cff4f4 	movhi	r7,16339
10004ce8:	3190d844 	addi	r6,r6,17249
10004cec:	39e1e9c4 	addi	r7,r7,-30809
10004cf0:	1009883a 	mov	r4,r2
10004cf4:	180b883a 	mov	r5,r3
10004cf8:	000dd840 	call	1000dd84 <__muldf3>
10004cfc:	01a2d874 	movhi	r6,35681
10004d00:	01cff1f4 	movhi	r7,16327
10004d04:	31b22cc4 	addi	r6,r6,-14157
10004d08:	39e28a04 	addi	r7,r7,-30168
10004d0c:	180b883a 	mov	r5,r3
10004d10:	1009883a 	mov	r4,r2
10004d14:	000c8b00 	call	1000c8b0 <__adddf3>
10004d18:	8009883a 	mov	r4,r16
10004d1c:	1029883a 	mov	r20,r2
10004d20:	1823883a 	mov	r17,r3
10004d24:	000ef680 	call	1000ef68 <__floatsidf>
10004d28:	019427f4 	movhi	r6,20639
10004d2c:	01cff4f4 	movhi	r7,16339
10004d30:	319e7ec4 	addi	r6,r6,31227
10004d34:	39d104c4 	addi	r7,r7,17427
10004d38:	1009883a 	mov	r4,r2
10004d3c:	180b883a 	mov	r5,r3
10004d40:	000dd840 	call	1000dd84 <__muldf3>
10004d44:	100d883a 	mov	r6,r2
10004d48:	180f883a 	mov	r7,r3
10004d4c:	a009883a 	mov	r4,r20
10004d50:	880b883a 	mov	r5,r17
10004d54:	000c8b00 	call	1000c8b0 <__adddf3>
10004d58:	1009883a 	mov	r4,r2
10004d5c:	180b883a 	mov	r5,r3
10004d60:	1029883a 	mov	r20,r2
10004d64:	1823883a 	mov	r17,r3
10004d68:	000eee80 	call	1000eee8 <__fixdfsi>
10004d6c:	000d883a 	mov	r6,zero
10004d70:	000f883a 	mov	r7,zero
10004d74:	a009883a 	mov	r4,r20
10004d78:	880b883a 	mov	r5,r17
10004d7c:	d8800515 	stw	r2,20(sp)
10004d80:	000dc900 	call	1000dc90 <__ledf2>
10004d84:	10028716 	blt	r2,zero,100057a4 <_dtoa_r+0xc88>
10004d88:	d8c00517 	ldw	r3,20(sp)
10004d8c:	00800584 	movi	r2,22
10004d90:	10c27536 	bltu	r2,r3,10005768 <_dtoa_r+0xc4c>
10004d94:	180490fa 	slli	r2,r3,3
10004d98:	00c40074 	movhi	r3,4097
10004d9c:	18c89404 	addi	r3,r3,8784
10004da0:	1885883a 	add	r2,r3,r2
10004da4:	11000017 	ldw	r4,0(r2)
10004da8:	11400117 	ldw	r5,4(r2)
10004dac:	900d883a 	mov	r6,r18
10004db0:	980f883a 	mov	r7,r19
10004db4:	000dbb40 	call	1000dbb4 <__gedf2>
10004db8:	00828d0e 	bge	zero,r2,100057f0 <_dtoa_r+0xcd4>
10004dbc:	d9000517 	ldw	r4,20(sp)
10004dc0:	d8000e15 	stw	zero,56(sp)
10004dc4:	213fffc4 	addi	r4,r4,-1
10004dc8:	d9000515 	stw	r4,20(sp)
10004dcc:	b42dc83a 	sub	r22,r22,r16
10004dd0:	b5bfffc4 	addi	r22,r22,-1
10004dd4:	b0026f16 	blt	r22,zero,10005794 <_dtoa_r+0xc78>
10004dd8:	d8000815 	stw	zero,32(sp)
10004ddc:	d9c00517 	ldw	r7,20(sp)
10004de0:	38026416 	blt	r7,zero,10005774 <_dtoa_r+0xc58>
10004de4:	b1ed883a 	add	r22,r22,r7
10004de8:	d9c00d15 	stw	r7,52(sp)
10004dec:	d8000a15 	stw	zero,40(sp)
10004df0:	d9800317 	ldw	r6,12(sp)
10004df4:	00800244 	movi	r2,9
10004df8:	11811436 	bltu	r2,r6,1000524c <_dtoa_r+0x730>
10004dfc:	00800144 	movi	r2,5
10004e00:	1184e10e 	bge	r2,r6,10006188 <_dtoa_r+0x166c>
10004e04:	31bfff04 	addi	r6,r6,-4
10004e08:	d9800315 	stw	r6,12(sp)
10004e0c:	0023883a 	mov	r17,zero
10004e10:	d9800317 	ldw	r6,12(sp)
10004e14:	008000c4 	movi	r2,3
10004e18:	30836726 	beq	r6,r2,10005bb8 <_dtoa_r+0x109c>
10004e1c:	1183410e 	bge	r2,r6,10005b24 <_dtoa_r+0x1008>
10004e20:	d9c00317 	ldw	r7,12(sp)
10004e24:	00800104 	movi	r2,4
10004e28:	38827c26 	beq	r7,r2,1000581c <_dtoa_r+0xd00>
10004e2c:	00800144 	movi	r2,5
10004e30:	3884c41e 	bne	r7,r2,10006144 <_dtoa_r+0x1628>
10004e34:	00800044 	movi	r2,1
10004e38:	d8800b15 	stw	r2,44(sp)
10004e3c:	d8c00517 	ldw	r3,20(sp)
10004e40:	d9002217 	ldw	r4,136(sp)
10004e44:	1907883a 	add	r3,r3,r4
10004e48:	19800044 	addi	r6,r3,1
10004e4c:	d8c00c15 	stw	r3,48(sp)
10004e50:	d9800615 	stw	r6,24(sp)
10004e54:	0183a40e 	bge	zero,r6,10005ce8 <_dtoa_r+0x11cc>
10004e58:	d9800617 	ldw	r6,24(sp)
10004e5c:	3021883a 	mov	r16,r6
10004e60:	e0001115 	stw	zero,68(fp)
10004e64:	008005c4 	movi	r2,23
10004e68:	1184c92e 	bgeu	r2,r6,10006190 <_dtoa_r+0x1674>
10004e6c:	00c00044 	movi	r3,1
10004e70:	00800104 	movi	r2,4
10004e74:	1085883a 	add	r2,r2,r2
10004e78:	11000504 	addi	r4,r2,20
10004e7c:	180b883a 	mov	r5,r3
10004e80:	18c00044 	addi	r3,r3,1
10004e84:	313ffb2e 	bgeu	r6,r4,10004e74 <__alt_data_end+0xf8004e74>
10004e88:	e1401115 	stw	r5,68(fp)
10004e8c:	e009883a 	mov	r4,fp
10004e90:	00081d40 	call	100081d4 <_Balloc>
10004e94:	d8800715 	stw	r2,28(sp)
10004e98:	e0801015 	stw	r2,64(fp)
10004e9c:	00800384 	movi	r2,14
10004ea0:	1400f736 	bltu	r2,r16,10005280 <_dtoa_r+0x764>
10004ea4:	8800f626 	beq	r17,zero,10005280 <_dtoa_r+0x764>
10004ea8:	d9c00517 	ldw	r7,20(sp)
10004eac:	01c39a0e 	bge	zero,r7,10005d18 <_dtoa_r+0x11fc>
10004eb0:	388003cc 	andi	r2,r7,15
10004eb4:	100490fa 	slli	r2,r2,3
10004eb8:	382bd13a 	srai	r21,r7,4
10004ebc:	00c40074 	movhi	r3,4097
10004ec0:	18c89404 	addi	r3,r3,8784
10004ec4:	1885883a 	add	r2,r3,r2
10004ec8:	a8c0040c 	andi	r3,r21,16
10004ecc:	12400017 	ldw	r9,0(r2)
10004ed0:	12000117 	ldw	r8,4(r2)
10004ed4:	18037926 	beq	r3,zero,10005cbc <_dtoa_r+0x11a0>
10004ed8:	00840074 	movhi	r2,4097
10004edc:	10888a04 	addi	r2,r2,8744
10004ee0:	11800817 	ldw	r6,32(r2)
10004ee4:	11c00917 	ldw	r7,36(r2)
10004ee8:	9009883a 	mov	r4,r18
10004eec:	980b883a 	mov	r5,r19
10004ef0:	da001715 	stw	r8,92(sp)
10004ef4:	da401615 	stw	r9,88(sp)
10004ef8:	000d15c0 	call	1000d15c <__divdf3>
10004efc:	da001717 	ldw	r8,92(sp)
10004f00:	da401617 	ldw	r9,88(sp)
10004f04:	ad4003cc 	andi	r21,r21,15
10004f08:	040000c4 	movi	r16,3
10004f0c:	1023883a 	mov	r17,r2
10004f10:	1829883a 	mov	r20,r3
10004f14:	a8001126 	beq	r21,zero,10004f5c <_dtoa_r+0x440>
10004f18:	05c40074 	movhi	r23,4097
10004f1c:	bdc88a04 	addi	r23,r23,8744
10004f20:	4805883a 	mov	r2,r9
10004f24:	4007883a 	mov	r3,r8
10004f28:	a980004c 	andi	r6,r21,1
10004f2c:	1009883a 	mov	r4,r2
10004f30:	a82bd07a 	srai	r21,r21,1
10004f34:	180b883a 	mov	r5,r3
10004f38:	30000426 	beq	r6,zero,10004f4c <_dtoa_r+0x430>
10004f3c:	b9800017 	ldw	r6,0(r23)
10004f40:	b9c00117 	ldw	r7,4(r23)
10004f44:	84000044 	addi	r16,r16,1
10004f48:	000dd840 	call	1000dd84 <__muldf3>
10004f4c:	bdc00204 	addi	r23,r23,8
10004f50:	a83ff51e 	bne	r21,zero,10004f28 <__alt_data_end+0xf8004f28>
10004f54:	1013883a 	mov	r9,r2
10004f58:	1811883a 	mov	r8,r3
10004f5c:	480d883a 	mov	r6,r9
10004f60:	400f883a 	mov	r7,r8
10004f64:	8809883a 	mov	r4,r17
10004f68:	a00b883a 	mov	r5,r20
10004f6c:	000d15c0 	call	1000d15c <__divdf3>
10004f70:	d8800f15 	stw	r2,60(sp)
10004f74:	d8c01015 	stw	r3,64(sp)
10004f78:	d8c00e17 	ldw	r3,56(sp)
10004f7c:	18000626 	beq	r3,zero,10004f98 <_dtoa_r+0x47c>
10004f80:	d9000f17 	ldw	r4,60(sp)
10004f84:	d9401017 	ldw	r5,64(sp)
10004f88:	000d883a 	mov	r6,zero
10004f8c:	01cffc34 	movhi	r7,16368
10004f90:	000dc900 	call	1000dc90 <__ledf2>
10004f94:	10040b16 	blt	r2,zero,10005fc4 <_dtoa_r+0x14a8>
10004f98:	8009883a 	mov	r4,r16
10004f9c:	000ef680 	call	1000ef68 <__floatsidf>
10004fa0:	d9800f17 	ldw	r6,60(sp)
10004fa4:	d9c01017 	ldw	r7,64(sp)
10004fa8:	1009883a 	mov	r4,r2
10004fac:	180b883a 	mov	r5,r3
10004fb0:	000dd840 	call	1000dd84 <__muldf3>
10004fb4:	000d883a 	mov	r6,zero
10004fb8:	01d00734 	movhi	r7,16412
10004fbc:	1009883a 	mov	r4,r2
10004fc0:	180b883a 	mov	r5,r3
10004fc4:	000c8b00 	call	1000c8b0 <__adddf3>
10004fc8:	1021883a 	mov	r16,r2
10004fcc:	d8800617 	ldw	r2,24(sp)
10004fd0:	047f3034 	movhi	r17,64704
10004fd4:	1c63883a 	add	r17,r3,r17
10004fd8:	10031826 	beq	r2,zero,10005c3c <_dtoa_r+0x1120>
10004fdc:	d8c00517 	ldw	r3,20(sp)
10004fe0:	db000617 	ldw	r12,24(sp)
10004fe4:	d8c01315 	stw	r3,76(sp)
10004fe8:	d9000b17 	ldw	r4,44(sp)
10004fec:	20038f26 	beq	r4,zero,10005e2c <_dtoa_r+0x1310>
10004ff0:	60bfffc4 	addi	r2,r12,-1
10004ff4:	100490fa 	slli	r2,r2,3
10004ff8:	00c40074 	movhi	r3,4097
10004ffc:	18c89404 	addi	r3,r3,8784
10005000:	1885883a 	add	r2,r3,r2
10005004:	11800017 	ldw	r6,0(r2)
10005008:	11c00117 	ldw	r7,4(r2)
1000500c:	d8800717 	ldw	r2,28(sp)
10005010:	0009883a 	mov	r4,zero
10005014:	014ff834 	movhi	r5,16352
10005018:	db001615 	stw	r12,88(sp)
1000501c:	15c00044 	addi	r23,r2,1
10005020:	000d15c0 	call	1000d15c <__divdf3>
10005024:	800d883a 	mov	r6,r16
10005028:	880f883a 	mov	r7,r17
1000502c:	1009883a 	mov	r4,r2
10005030:	180b883a 	mov	r5,r3
10005034:	000e5ec0 	call	1000e5ec <__subdf3>
10005038:	d9401017 	ldw	r5,64(sp)
1000503c:	d9000f17 	ldw	r4,60(sp)
10005040:	102b883a 	mov	r21,r2
10005044:	d8c01215 	stw	r3,72(sp)
10005048:	000eee80 	call	1000eee8 <__fixdfsi>
1000504c:	1009883a 	mov	r4,r2
10005050:	1029883a 	mov	r20,r2
10005054:	000ef680 	call	1000ef68 <__floatsidf>
10005058:	d9000f17 	ldw	r4,60(sp)
1000505c:	d9401017 	ldw	r5,64(sp)
10005060:	100d883a 	mov	r6,r2
10005064:	180f883a 	mov	r7,r3
10005068:	000e5ec0 	call	1000e5ec <__subdf3>
1000506c:	1823883a 	mov	r17,r3
10005070:	d8c00717 	ldw	r3,28(sp)
10005074:	d9401217 	ldw	r5,72(sp)
10005078:	a2000c04 	addi	r8,r20,48
1000507c:	1021883a 	mov	r16,r2
10005080:	1a000005 	stb	r8,0(r3)
10005084:	800d883a 	mov	r6,r16
10005088:	880f883a 	mov	r7,r17
1000508c:	a809883a 	mov	r4,r21
10005090:	4029883a 	mov	r20,r8
10005094:	000dbb40 	call	1000dbb4 <__gedf2>
10005098:	00841d16 	blt	zero,r2,10006110 <_dtoa_r+0x15f4>
1000509c:	800d883a 	mov	r6,r16
100050a0:	880f883a 	mov	r7,r17
100050a4:	0009883a 	mov	r4,zero
100050a8:	014ffc34 	movhi	r5,16368
100050ac:	000e5ec0 	call	1000e5ec <__subdf3>
100050b0:	d9401217 	ldw	r5,72(sp)
100050b4:	100d883a 	mov	r6,r2
100050b8:	180f883a 	mov	r7,r3
100050bc:	a809883a 	mov	r4,r21
100050c0:	000dbb40 	call	1000dbb4 <__gedf2>
100050c4:	db001617 	ldw	r12,88(sp)
100050c8:	00840e16 	blt	zero,r2,10006104 <_dtoa_r+0x15e8>
100050cc:	00800044 	movi	r2,1
100050d0:	13006b0e 	bge	r2,r12,10005280 <_dtoa_r+0x764>
100050d4:	d9000717 	ldw	r4,28(sp)
100050d8:	dd800f15 	stw	r22,60(sp)
100050dc:	dcc01015 	stw	r19,64(sp)
100050e0:	2319883a 	add	r12,r4,r12
100050e4:	dcc01217 	ldw	r19,72(sp)
100050e8:	602d883a 	mov	r22,r12
100050ec:	dc801215 	stw	r18,72(sp)
100050f0:	b825883a 	mov	r18,r23
100050f4:	00000906 	br	1000511c <_dtoa_r+0x600>
100050f8:	000e5ec0 	call	1000e5ec <__subdf3>
100050fc:	a80d883a 	mov	r6,r21
10005100:	980f883a 	mov	r7,r19
10005104:	1009883a 	mov	r4,r2
10005108:	180b883a 	mov	r5,r3
1000510c:	000dc900 	call	1000dc90 <__ledf2>
10005110:	1003e816 	blt	r2,zero,100060b4 <_dtoa_r+0x1598>
10005114:	b825883a 	mov	r18,r23
10005118:	bd83e926 	beq	r23,r22,100060c0 <_dtoa_r+0x15a4>
1000511c:	a809883a 	mov	r4,r21
10005120:	980b883a 	mov	r5,r19
10005124:	000d883a 	mov	r6,zero
10005128:	01d00934 	movhi	r7,16420
1000512c:	000dd840 	call	1000dd84 <__muldf3>
10005130:	000d883a 	mov	r6,zero
10005134:	01d00934 	movhi	r7,16420
10005138:	8009883a 	mov	r4,r16
1000513c:	880b883a 	mov	r5,r17
10005140:	102b883a 	mov	r21,r2
10005144:	1827883a 	mov	r19,r3
10005148:	000dd840 	call	1000dd84 <__muldf3>
1000514c:	180b883a 	mov	r5,r3
10005150:	1009883a 	mov	r4,r2
10005154:	1821883a 	mov	r16,r3
10005158:	1023883a 	mov	r17,r2
1000515c:	000eee80 	call	1000eee8 <__fixdfsi>
10005160:	1009883a 	mov	r4,r2
10005164:	1029883a 	mov	r20,r2
10005168:	000ef680 	call	1000ef68 <__floatsidf>
1000516c:	8809883a 	mov	r4,r17
10005170:	800b883a 	mov	r5,r16
10005174:	100d883a 	mov	r6,r2
10005178:	180f883a 	mov	r7,r3
1000517c:	000e5ec0 	call	1000e5ec <__subdf3>
10005180:	a5000c04 	addi	r20,r20,48
10005184:	a80d883a 	mov	r6,r21
10005188:	980f883a 	mov	r7,r19
1000518c:	1009883a 	mov	r4,r2
10005190:	180b883a 	mov	r5,r3
10005194:	95000005 	stb	r20,0(r18)
10005198:	1021883a 	mov	r16,r2
1000519c:	1823883a 	mov	r17,r3
100051a0:	000dc900 	call	1000dc90 <__ledf2>
100051a4:	bdc00044 	addi	r23,r23,1
100051a8:	800d883a 	mov	r6,r16
100051ac:	880f883a 	mov	r7,r17
100051b0:	0009883a 	mov	r4,zero
100051b4:	014ffc34 	movhi	r5,16368
100051b8:	103fcf0e 	bge	r2,zero,100050f8 <__alt_data_end+0xf80050f8>
100051bc:	d8c01317 	ldw	r3,76(sp)
100051c0:	d8c00515 	stw	r3,20(sp)
100051c4:	d9400917 	ldw	r5,36(sp)
100051c8:	e009883a 	mov	r4,fp
100051cc:	000827c0 	call	1000827c <_Bfree>
100051d0:	d9000517 	ldw	r4,20(sp)
100051d4:	d9802317 	ldw	r6,140(sp)
100051d8:	d9c02517 	ldw	r7,148(sp)
100051dc:	b8000005 	stb	zero,0(r23)
100051e0:	20800044 	addi	r2,r4,1
100051e4:	30800015 	stw	r2,0(r6)
100051e8:	3802aa26 	beq	r7,zero,10005c94 <_dtoa_r+0x1178>
100051ec:	3dc00015 	stw	r23,0(r7)
100051f0:	d8800717 	ldw	r2,28(sp)
100051f4:	003e7906 	br	10004bdc <__alt_data_end+0xf8004bdc>
100051f8:	00800434 	movhi	r2,16
100051fc:	10bfffc4 	addi	r2,r2,-1
10005200:	88a2703a 	and	r17,r17,r2
10005204:	883e851e 	bne	r17,zero,10004c1c <__alt_data_end+0xf8004c1c>
10005208:	00840074 	movhi	r2,4097
1000520c:	10887504 	addi	r2,r2,8660
10005210:	003e8406 	br	10004c24 <__alt_data_end+0xf8004c24>
10005214:	10c00204 	addi	r3,r2,8
10005218:	003e8706 	br	10004c38 <__alt_data_end+0xf8004c38>
1000521c:	01400434 	movhi	r5,16
10005220:	297fffc4 	addi	r5,r5,-1
10005224:	994a703a 	and	r5,r19,r5
10005228:	9009883a 	mov	r4,r18
1000522c:	843f0044 	addi	r16,r16,-1023
10005230:	294ffc34 	orhi	r5,r5,16368
10005234:	dd800217 	ldw	r22,8(sp)
10005238:	d8001115 	stw	zero,68(sp)
1000523c:	003ea506 	br	10004cd4 <__alt_data_end+0xf8004cd4>
10005240:	00840074 	movhi	r2,4097
10005244:	10886c04 	addi	r2,r2,8624
10005248:	003e6406 	br	10004bdc <__alt_data_end+0xf8004bdc>
1000524c:	e0001115 	stw	zero,68(fp)
10005250:	000b883a 	mov	r5,zero
10005254:	e009883a 	mov	r4,fp
10005258:	00081d40 	call	100081d4 <_Balloc>
1000525c:	01bfffc4 	movi	r6,-1
10005260:	01c00044 	movi	r7,1
10005264:	d8800715 	stw	r2,28(sp)
10005268:	d9800c15 	stw	r6,48(sp)
1000526c:	e0801015 	stw	r2,64(fp)
10005270:	d8000315 	stw	zero,12(sp)
10005274:	d9c00b15 	stw	r7,44(sp)
10005278:	d9800615 	stw	r6,24(sp)
1000527c:	d8002215 	stw	zero,136(sp)
10005280:	d8800117 	ldw	r2,4(sp)
10005284:	10008916 	blt	r2,zero,100054ac <_dtoa_r+0x990>
10005288:	d9000517 	ldw	r4,20(sp)
1000528c:	00c00384 	movi	r3,14
10005290:	19008616 	blt	r3,r4,100054ac <_dtoa_r+0x990>
10005294:	200490fa 	slli	r2,r4,3
10005298:	00c40074 	movhi	r3,4097
1000529c:	d9802217 	ldw	r6,136(sp)
100052a0:	18c89404 	addi	r3,r3,8784
100052a4:	1885883a 	add	r2,r3,r2
100052a8:	14000017 	ldw	r16,0(r2)
100052ac:	14400117 	ldw	r17,4(r2)
100052b0:	30016316 	blt	r6,zero,10005840 <_dtoa_r+0xd24>
100052b4:	800d883a 	mov	r6,r16
100052b8:	880f883a 	mov	r7,r17
100052bc:	9009883a 	mov	r4,r18
100052c0:	980b883a 	mov	r5,r19
100052c4:	000d15c0 	call	1000d15c <__divdf3>
100052c8:	180b883a 	mov	r5,r3
100052cc:	1009883a 	mov	r4,r2
100052d0:	000eee80 	call	1000eee8 <__fixdfsi>
100052d4:	1009883a 	mov	r4,r2
100052d8:	102b883a 	mov	r21,r2
100052dc:	000ef680 	call	1000ef68 <__floatsidf>
100052e0:	800d883a 	mov	r6,r16
100052e4:	880f883a 	mov	r7,r17
100052e8:	1009883a 	mov	r4,r2
100052ec:	180b883a 	mov	r5,r3
100052f0:	000dd840 	call	1000dd84 <__muldf3>
100052f4:	100d883a 	mov	r6,r2
100052f8:	180f883a 	mov	r7,r3
100052fc:	9009883a 	mov	r4,r18
10005300:	980b883a 	mov	r5,r19
10005304:	000e5ec0 	call	1000e5ec <__subdf3>
10005308:	d9c00717 	ldw	r7,28(sp)
1000530c:	1009883a 	mov	r4,r2
10005310:	a8800c04 	addi	r2,r21,48
10005314:	38800005 	stb	r2,0(r7)
10005318:	3dc00044 	addi	r23,r7,1
1000531c:	d9c00617 	ldw	r7,24(sp)
10005320:	01800044 	movi	r6,1
10005324:	180b883a 	mov	r5,r3
10005328:	2005883a 	mov	r2,r4
1000532c:	39803826 	beq	r7,r6,10005410 <_dtoa_r+0x8f4>
10005330:	000d883a 	mov	r6,zero
10005334:	01d00934 	movhi	r7,16420
10005338:	000dd840 	call	1000dd84 <__muldf3>
1000533c:	000d883a 	mov	r6,zero
10005340:	000f883a 	mov	r7,zero
10005344:	1009883a 	mov	r4,r2
10005348:	180b883a 	mov	r5,r3
1000534c:	1025883a 	mov	r18,r2
10005350:	1827883a 	mov	r19,r3
10005354:	000db2c0 	call	1000db2c <__eqdf2>
10005358:	103f9a26 	beq	r2,zero,100051c4 <__alt_data_end+0xf80051c4>
1000535c:	d9c00617 	ldw	r7,24(sp)
10005360:	d8c00717 	ldw	r3,28(sp)
10005364:	b829883a 	mov	r20,r23
10005368:	38bfffc4 	addi	r2,r7,-1
1000536c:	18ad883a 	add	r22,r3,r2
10005370:	00000a06 	br	1000539c <_dtoa_r+0x880>
10005374:	000dd840 	call	1000dd84 <__muldf3>
10005378:	000d883a 	mov	r6,zero
1000537c:	000f883a 	mov	r7,zero
10005380:	1009883a 	mov	r4,r2
10005384:	180b883a 	mov	r5,r3
10005388:	1025883a 	mov	r18,r2
1000538c:	1827883a 	mov	r19,r3
10005390:	b829883a 	mov	r20,r23
10005394:	000db2c0 	call	1000db2c <__eqdf2>
10005398:	103f8a26 	beq	r2,zero,100051c4 <__alt_data_end+0xf80051c4>
1000539c:	800d883a 	mov	r6,r16
100053a0:	880f883a 	mov	r7,r17
100053a4:	9009883a 	mov	r4,r18
100053a8:	980b883a 	mov	r5,r19
100053ac:	000d15c0 	call	1000d15c <__divdf3>
100053b0:	180b883a 	mov	r5,r3
100053b4:	1009883a 	mov	r4,r2
100053b8:	000eee80 	call	1000eee8 <__fixdfsi>
100053bc:	1009883a 	mov	r4,r2
100053c0:	102b883a 	mov	r21,r2
100053c4:	000ef680 	call	1000ef68 <__floatsidf>
100053c8:	800d883a 	mov	r6,r16
100053cc:	880f883a 	mov	r7,r17
100053d0:	1009883a 	mov	r4,r2
100053d4:	180b883a 	mov	r5,r3
100053d8:	000dd840 	call	1000dd84 <__muldf3>
100053dc:	100d883a 	mov	r6,r2
100053e0:	180f883a 	mov	r7,r3
100053e4:	9009883a 	mov	r4,r18
100053e8:	980b883a 	mov	r5,r19
100053ec:	000e5ec0 	call	1000e5ec <__subdf3>
100053f0:	aa000c04 	addi	r8,r21,48
100053f4:	a2000005 	stb	r8,0(r20)
100053f8:	000d883a 	mov	r6,zero
100053fc:	01d00934 	movhi	r7,16420
10005400:	1009883a 	mov	r4,r2
10005404:	180b883a 	mov	r5,r3
10005408:	a5c00044 	addi	r23,r20,1
1000540c:	b53fd91e 	bne	r22,r20,10005374 <__alt_data_end+0xf8005374>
10005410:	100d883a 	mov	r6,r2
10005414:	180f883a 	mov	r7,r3
10005418:	1009883a 	mov	r4,r2
1000541c:	180b883a 	mov	r5,r3
10005420:	000c8b00 	call	1000c8b0 <__adddf3>
10005424:	100d883a 	mov	r6,r2
10005428:	180f883a 	mov	r7,r3
1000542c:	8009883a 	mov	r4,r16
10005430:	880b883a 	mov	r5,r17
10005434:	1027883a 	mov	r19,r2
10005438:	1825883a 	mov	r18,r3
1000543c:	000dc900 	call	1000dc90 <__ledf2>
10005440:	10000816 	blt	r2,zero,10005464 <_dtoa_r+0x948>
10005444:	980d883a 	mov	r6,r19
10005448:	900f883a 	mov	r7,r18
1000544c:	8009883a 	mov	r4,r16
10005450:	880b883a 	mov	r5,r17
10005454:	000db2c0 	call	1000db2c <__eqdf2>
10005458:	103f5a1e 	bne	r2,zero,100051c4 <__alt_data_end+0xf80051c4>
1000545c:	ad40004c 	andi	r21,r21,1
10005460:	a83f5826 	beq	r21,zero,100051c4 <__alt_data_end+0xf80051c4>
10005464:	bd3fffc3 	ldbu	r20,-1(r23)
10005468:	b8bfffc4 	addi	r2,r23,-1
1000546c:	1007883a 	mov	r3,r2
10005470:	01400e44 	movi	r5,57
10005474:	d9800717 	ldw	r6,28(sp)
10005478:	00000506 	br	10005490 <_dtoa_r+0x974>
1000547c:	18ffffc4 	addi	r3,r3,-1
10005480:	11824726 	beq	r2,r6,10005da0 <_dtoa_r+0x1284>
10005484:	1d000003 	ldbu	r20,0(r3)
10005488:	102f883a 	mov	r23,r2
1000548c:	10bfffc4 	addi	r2,r2,-1
10005490:	a1003fcc 	andi	r4,r20,255
10005494:	2100201c 	xori	r4,r4,128
10005498:	213fe004 	addi	r4,r4,-128
1000549c:	217ff726 	beq	r4,r5,1000547c <__alt_data_end+0xf800547c>
100054a0:	a2000044 	addi	r8,r20,1
100054a4:	12000005 	stb	r8,0(r2)
100054a8:	003f4606 	br	100051c4 <__alt_data_end+0xf80051c4>
100054ac:	d9000b17 	ldw	r4,44(sp)
100054b0:	2000c826 	beq	r4,zero,100057d4 <_dtoa_r+0xcb8>
100054b4:	d9800317 	ldw	r6,12(sp)
100054b8:	00c00044 	movi	r3,1
100054bc:	1980f90e 	bge	r3,r6,100058a4 <_dtoa_r+0xd88>
100054c0:	d8800617 	ldw	r2,24(sp)
100054c4:	d8c00a17 	ldw	r3,40(sp)
100054c8:	157fffc4 	addi	r21,r2,-1
100054cc:	1d41f316 	blt	r3,r21,10005c9c <_dtoa_r+0x1180>
100054d0:	1d6bc83a 	sub	r21,r3,r21
100054d4:	d9c00617 	ldw	r7,24(sp)
100054d8:	3802aa16 	blt	r7,zero,10005f84 <_dtoa_r+0x1468>
100054dc:	dd000817 	ldw	r20,32(sp)
100054e0:	d8800617 	ldw	r2,24(sp)
100054e4:	d8c00817 	ldw	r3,32(sp)
100054e8:	01400044 	movi	r5,1
100054ec:	e009883a 	mov	r4,fp
100054f0:	1887883a 	add	r3,r3,r2
100054f4:	d8c00815 	stw	r3,32(sp)
100054f8:	b0ad883a 	add	r22,r22,r2
100054fc:	00086080 	call	10008608 <__i2b>
10005500:	1023883a 	mov	r17,r2
10005504:	a0000826 	beq	r20,zero,10005528 <_dtoa_r+0xa0c>
10005508:	0580070e 	bge	zero,r22,10005528 <_dtoa_r+0xa0c>
1000550c:	a005883a 	mov	r2,r20
10005510:	b500b916 	blt	r22,r20,100057f8 <_dtoa_r+0xcdc>
10005514:	d9000817 	ldw	r4,32(sp)
10005518:	a0a9c83a 	sub	r20,r20,r2
1000551c:	b0adc83a 	sub	r22,r22,r2
10005520:	2089c83a 	sub	r4,r4,r2
10005524:	d9000815 	stw	r4,32(sp)
10005528:	d9800a17 	ldw	r6,40(sp)
1000552c:	0181810e 	bge	zero,r6,10005b34 <_dtoa_r+0x1018>
10005530:	d9c00b17 	ldw	r7,44(sp)
10005534:	3800b326 	beq	r7,zero,10005804 <_dtoa_r+0xce8>
10005538:	a800b226 	beq	r21,zero,10005804 <_dtoa_r+0xce8>
1000553c:	880b883a 	mov	r5,r17
10005540:	a80d883a 	mov	r6,r21
10005544:	e009883a 	mov	r4,fp
10005548:	00088d00 	call	100088d0 <__pow5mult>
1000554c:	d9800917 	ldw	r6,36(sp)
10005550:	100b883a 	mov	r5,r2
10005554:	e009883a 	mov	r4,fp
10005558:	1023883a 	mov	r17,r2
1000555c:	00086440 	call	10008644 <__multiply>
10005560:	1021883a 	mov	r16,r2
10005564:	d8800a17 	ldw	r2,40(sp)
10005568:	d9400917 	ldw	r5,36(sp)
1000556c:	e009883a 	mov	r4,fp
10005570:	1545c83a 	sub	r2,r2,r21
10005574:	d8800a15 	stw	r2,40(sp)
10005578:	000827c0 	call	1000827c <_Bfree>
1000557c:	d8c00a17 	ldw	r3,40(sp)
10005580:	18009f1e 	bne	r3,zero,10005800 <_dtoa_r+0xce4>
10005584:	05c00044 	movi	r23,1
10005588:	e009883a 	mov	r4,fp
1000558c:	b80b883a 	mov	r5,r23
10005590:	00086080 	call	10008608 <__i2b>
10005594:	d9000d17 	ldw	r4,52(sp)
10005598:	102b883a 	mov	r21,r2
1000559c:	2000ce26 	beq	r4,zero,100058d8 <_dtoa_r+0xdbc>
100055a0:	200d883a 	mov	r6,r4
100055a4:	100b883a 	mov	r5,r2
100055a8:	e009883a 	mov	r4,fp
100055ac:	00088d00 	call	100088d0 <__pow5mult>
100055b0:	d9800317 	ldw	r6,12(sp)
100055b4:	102b883a 	mov	r21,r2
100055b8:	b981810e 	bge	r23,r6,10005bc0 <_dtoa_r+0x10a4>
100055bc:	0027883a 	mov	r19,zero
100055c0:	a8800417 	ldw	r2,16(r21)
100055c4:	05c00804 	movi	r23,32
100055c8:	10800104 	addi	r2,r2,4
100055cc:	1085883a 	add	r2,r2,r2
100055d0:	1085883a 	add	r2,r2,r2
100055d4:	a885883a 	add	r2,r21,r2
100055d8:	11000017 	ldw	r4,0(r2)
100055dc:	00084f00 	call	100084f0 <__hi0bits>
100055e0:	b885c83a 	sub	r2,r23,r2
100055e4:	1585883a 	add	r2,r2,r22
100055e8:	108007cc 	andi	r2,r2,31
100055ec:	1000b326 	beq	r2,zero,100058bc <_dtoa_r+0xda0>
100055f0:	00c00804 	movi	r3,32
100055f4:	1887c83a 	sub	r3,r3,r2
100055f8:	01000104 	movi	r4,4
100055fc:	20c2cd0e 	bge	r4,r3,10006134 <_dtoa_r+0x1618>
10005600:	00c00704 	movi	r3,28
10005604:	1885c83a 	sub	r2,r3,r2
10005608:	d8c00817 	ldw	r3,32(sp)
1000560c:	a0a9883a 	add	r20,r20,r2
10005610:	b0ad883a 	add	r22,r22,r2
10005614:	1887883a 	add	r3,r3,r2
10005618:	d8c00815 	stw	r3,32(sp)
1000561c:	d9800817 	ldw	r6,32(sp)
10005620:	0180040e 	bge	zero,r6,10005634 <_dtoa_r+0xb18>
10005624:	800b883a 	mov	r5,r16
10005628:	e009883a 	mov	r4,fp
1000562c:	0008a100 	call	10008a10 <__lshift>
10005630:	1021883a 	mov	r16,r2
10005634:	0580050e 	bge	zero,r22,1000564c <_dtoa_r+0xb30>
10005638:	a80b883a 	mov	r5,r21
1000563c:	b00d883a 	mov	r6,r22
10005640:	e009883a 	mov	r4,fp
10005644:	0008a100 	call	10008a10 <__lshift>
10005648:	102b883a 	mov	r21,r2
1000564c:	d9c00e17 	ldw	r7,56(sp)
10005650:	3801211e 	bne	r7,zero,10005ad8 <_dtoa_r+0xfbc>
10005654:	d9800617 	ldw	r6,24(sp)
10005658:	0181380e 	bge	zero,r6,10005b3c <_dtoa_r+0x1020>
1000565c:	d8c00b17 	ldw	r3,44(sp)
10005660:	1800ab1e 	bne	r3,zero,10005910 <_dtoa_r+0xdf4>
10005664:	dc800717 	ldw	r18,28(sp)
10005668:	dcc00617 	ldw	r19,24(sp)
1000566c:	9029883a 	mov	r20,r18
10005670:	00000206 	br	1000567c <_dtoa_r+0xb60>
10005674:	00082a40 	call	100082a4 <__multadd>
10005678:	1021883a 	mov	r16,r2
1000567c:	a80b883a 	mov	r5,r21
10005680:	8009883a 	mov	r4,r16
10005684:	00048f40 	call	100048f4 <quorem>
10005688:	10800c04 	addi	r2,r2,48
1000568c:	90800005 	stb	r2,0(r18)
10005690:	94800044 	addi	r18,r18,1
10005694:	9507c83a 	sub	r3,r18,r20
10005698:	000f883a 	mov	r7,zero
1000569c:	01800284 	movi	r6,10
100056a0:	800b883a 	mov	r5,r16
100056a4:	e009883a 	mov	r4,fp
100056a8:	1cfff216 	blt	r3,r19,10005674 <__alt_data_end+0xf8005674>
100056ac:	1011883a 	mov	r8,r2
100056b0:	d8800617 	ldw	r2,24(sp)
100056b4:	0082370e 	bge	zero,r2,10005f94 <_dtoa_r+0x1478>
100056b8:	d9000717 	ldw	r4,28(sp)
100056bc:	0025883a 	mov	r18,zero
100056c0:	20af883a 	add	r23,r4,r2
100056c4:	01800044 	movi	r6,1
100056c8:	800b883a 	mov	r5,r16
100056cc:	e009883a 	mov	r4,fp
100056d0:	da001715 	stw	r8,92(sp)
100056d4:	0008a100 	call	10008a10 <__lshift>
100056d8:	a80b883a 	mov	r5,r21
100056dc:	1009883a 	mov	r4,r2
100056e0:	d8800915 	stw	r2,36(sp)
100056e4:	0008b580 	call	10008b58 <__mcmp>
100056e8:	da001717 	ldw	r8,92(sp)
100056ec:	0081800e 	bge	zero,r2,10005cf0 <_dtoa_r+0x11d4>
100056f0:	b93fffc3 	ldbu	r4,-1(r23)
100056f4:	b8bfffc4 	addi	r2,r23,-1
100056f8:	1007883a 	mov	r3,r2
100056fc:	01800e44 	movi	r6,57
10005700:	d9c00717 	ldw	r7,28(sp)
10005704:	00000506 	br	1000571c <_dtoa_r+0xc00>
10005708:	18ffffc4 	addi	r3,r3,-1
1000570c:	11c12326 	beq	r2,r7,10005b9c <_dtoa_r+0x1080>
10005710:	19000003 	ldbu	r4,0(r3)
10005714:	102f883a 	mov	r23,r2
10005718:	10bfffc4 	addi	r2,r2,-1
1000571c:	21403fcc 	andi	r5,r4,255
10005720:	2940201c 	xori	r5,r5,128
10005724:	297fe004 	addi	r5,r5,-128
10005728:	29bff726 	beq	r5,r6,10005708 <__alt_data_end+0xf8005708>
1000572c:	21000044 	addi	r4,r4,1
10005730:	11000005 	stb	r4,0(r2)
10005734:	a80b883a 	mov	r5,r21
10005738:	e009883a 	mov	r4,fp
1000573c:	000827c0 	call	1000827c <_Bfree>
10005740:	883ea026 	beq	r17,zero,100051c4 <__alt_data_end+0xf80051c4>
10005744:	90000426 	beq	r18,zero,10005758 <_dtoa_r+0xc3c>
10005748:	94400326 	beq	r18,r17,10005758 <_dtoa_r+0xc3c>
1000574c:	900b883a 	mov	r5,r18
10005750:	e009883a 	mov	r4,fp
10005754:	000827c0 	call	1000827c <_Bfree>
10005758:	880b883a 	mov	r5,r17
1000575c:	e009883a 	mov	r4,fp
10005760:	000827c0 	call	1000827c <_Bfree>
10005764:	003e9706 	br	100051c4 <__alt_data_end+0xf80051c4>
10005768:	01800044 	movi	r6,1
1000576c:	d9800e15 	stw	r6,56(sp)
10005770:	003d9606 	br	10004dcc <__alt_data_end+0xf8004dcc>
10005774:	d8800817 	ldw	r2,32(sp)
10005778:	d8c00517 	ldw	r3,20(sp)
1000577c:	d8000d15 	stw	zero,52(sp)
10005780:	10c5c83a 	sub	r2,r2,r3
10005784:	00c9c83a 	sub	r4,zero,r3
10005788:	d8800815 	stw	r2,32(sp)
1000578c:	d9000a15 	stw	r4,40(sp)
10005790:	003d9706 	br	10004df0 <__alt_data_end+0xf8004df0>
10005794:	05adc83a 	sub	r22,zero,r22
10005798:	dd800815 	stw	r22,32(sp)
1000579c:	002d883a 	mov	r22,zero
100057a0:	003d8e06 	br	10004ddc <__alt_data_end+0xf8004ddc>
100057a4:	d9000517 	ldw	r4,20(sp)
100057a8:	000ef680 	call	1000ef68 <__floatsidf>
100057ac:	100d883a 	mov	r6,r2
100057b0:	180f883a 	mov	r7,r3
100057b4:	a009883a 	mov	r4,r20
100057b8:	880b883a 	mov	r5,r17
100057bc:	000db2c0 	call	1000db2c <__eqdf2>
100057c0:	103d7126 	beq	r2,zero,10004d88 <__alt_data_end+0xf8004d88>
100057c4:	d9c00517 	ldw	r7,20(sp)
100057c8:	39ffffc4 	addi	r7,r7,-1
100057cc:	d9c00515 	stw	r7,20(sp)
100057d0:	003d6d06 	br	10004d88 <__alt_data_end+0xf8004d88>
100057d4:	dd400a17 	ldw	r21,40(sp)
100057d8:	dd000817 	ldw	r20,32(sp)
100057dc:	0023883a 	mov	r17,zero
100057e0:	003f4806 	br	10005504 <__alt_data_end+0xf8005504>
100057e4:	10e3c83a 	sub	r17,r2,r3
100057e8:	9448983a 	sll	r4,r18,r17
100057ec:	003d3206 	br	10004cb8 <__alt_data_end+0xf8004cb8>
100057f0:	d8000e15 	stw	zero,56(sp)
100057f4:	003d7506 	br	10004dcc <__alt_data_end+0xf8004dcc>
100057f8:	b005883a 	mov	r2,r22
100057fc:	003f4506 	br	10005514 <__alt_data_end+0xf8005514>
10005800:	dc000915 	stw	r16,36(sp)
10005804:	d9800a17 	ldw	r6,40(sp)
10005808:	d9400917 	ldw	r5,36(sp)
1000580c:	e009883a 	mov	r4,fp
10005810:	00088d00 	call	100088d0 <__pow5mult>
10005814:	1021883a 	mov	r16,r2
10005818:	003f5a06 	br	10005584 <__alt_data_end+0xf8005584>
1000581c:	01c00044 	movi	r7,1
10005820:	d9c00b15 	stw	r7,44(sp)
10005824:	d8802217 	ldw	r2,136(sp)
10005828:	0081280e 	bge	zero,r2,10005ccc <_dtoa_r+0x11b0>
1000582c:	100d883a 	mov	r6,r2
10005830:	1021883a 	mov	r16,r2
10005834:	d8800c15 	stw	r2,48(sp)
10005838:	d8800615 	stw	r2,24(sp)
1000583c:	003d8806 	br	10004e60 <__alt_data_end+0xf8004e60>
10005840:	d8800617 	ldw	r2,24(sp)
10005844:	00be9b16 	blt	zero,r2,100052b4 <__alt_data_end+0xf80052b4>
10005848:	10010f1e 	bne	r2,zero,10005c88 <_dtoa_r+0x116c>
1000584c:	880b883a 	mov	r5,r17
10005850:	000d883a 	mov	r6,zero
10005854:	01d00534 	movhi	r7,16404
10005858:	8009883a 	mov	r4,r16
1000585c:	000dd840 	call	1000dd84 <__muldf3>
10005860:	900d883a 	mov	r6,r18
10005864:	980f883a 	mov	r7,r19
10005868:	1009883a 	mov	r4,r2
1000586c:	180b883a 	mov	r5,r3
10005870:	000dbb40 	call	1000dbb4 <__gedf2>
10005874:	002b883a 	mov	r21,zero
10005878:	0023883a 	mov	r17,zero
1000587c:	1000bf16 	blt	r2,zero,10005b7c <_dtoa_r+0x1060>
10005880:	d9802217 	ldw	r6,136(sp)
10005884:	ddc00717 	ldw	r23,28(sp)
10005888:	018c303a 	nor	r6,zero,r6
1000588c:	d9800515 	stw	r6,20(sp)
10005890:	a80b883a 	mov	r5,r21
10005894:	e009883a 	mov	r4,fp
10005898:	000827c0 	call	1000827c <_Bfree>
1000589c:	883e4926 	beq	r17,zero,100051c4 <__alt_data_end+0xf80051c4>
100058a0:	003fad06 	br	10005758 <__alt_data_end+0xf8005758>
100058a4:	d9c01117 	ldw	r7,68(sp)
100058a8:	3801bc26 	beq	r7,zero,10005f9c <_dtoa_r+0x1480>
100058ac:	10810cc4 	addi	r2,r2,1075
100058b0:	dd400a17 	ldw	r21,40(sp)
100058b4:	dd000817 	ldw	r20,32(sp)
100058b8:	003f0a06 	br	100054e4 <__alt_data_end+0xf80054e4>
100058bc:	00800704 	movi	r2,28
100058c0:	d9000817 	ldw	r4,32(sp)
100058c4:	a0a9883a 	add	r20,r20,r2
100058c8:	b0ad883a 	add	r22,r22,r2
100058cc:	2089883a 	add	r4,r4,r2
100058d0:	d9000815 	stw	r4,32(sp)
100058d4:	003f5106 	br	1000561c <__alt_data_end+0xf800561c>
100058d8:	d8c00317 	ldw	r3,12(sp)
100058dc:	b8c1fc0e 	bge	r23,r3,100060d0 <_dtoa_r+0x15b4>
100058e0:	0027883a 	mov	r19,zero
100058e4:	b805883a 	mov	r2,r23
100058e8:	003f3e06 	br	100055e4 <__alt_data_end+0xf80055e4>
100058ec:	880b883a 	mov	r5,r17
100058f0:	e009883a 	mov	r4,fp
100058f4:	000f883a 	mov	r7,zero
100058f8:	01800284 	movi	r6,10
100058fc:	00082a40 	call	100082a4 <__multadd>
10005900:	d9000c17 	ldw	r4,48(sp)
10005904:	1023883a 	mov	r17,r2
10005908:	0102040e 	bge	zero,r4,1000611c <_dtoa_r+0x1600>
1000590c:	d9000615 	stw	r4,24(sp)
10005910:	0500050e 	bge	zero,r20,10005928 <_dtoa_r+0xe0c>
10005914:	880b883a 	mov	r5,r17
10005918:	a00d883a 	mov	r6,r20
1000591c:	e009883a 	mov	r4,fp
10005920:	0008a100 	call	10008a10 <__lshift>
10005924:	1023883a 	mov	r17,r2
10005928:	9801241e 	bne	r19,zero,10005dbc <_dtoa_r+0x12a0>
1000592c:	8829883a 	mov	r20,r17
10005930:	d9000617 	ldw	r4,24(sp)
10005934:	dcc00717 	ldw	r19,28(sp)
10005938:	9480004c 	andi	r18,r18,1
1000593c:	20bfffc4 	addi	r2,r4,-1
10005940:	9885883a 	add	r2,r19,r2
10005944:	d8800415 	stw	r2,16(sp)
10005948:	dc800615 	stw	r18,24(sp)
1000594c:	a80b883a 	mov	r5,r21
10005950:	8009883a 	mov	r4,r16
10005954:	00048f40 	call	100048f4 <quorem>
10005958:	880b883a 	mov	r5,r17
1000595c:	8009883a 	mov	r4,r16
10005960:	102f883a 	mov	r23,r2
10005964:	0008b580 	call	10008b58 <__mcmp>
10005968:	a80b883a 	mov	r5,r21
1000596c:	a00d883a 	mov	r6,r20
10005970:	e009883a 	mov	r4,fp
10005974:	102d883a 	mov	r22,r2
10005978:	0008bb80 	call	10008bb8 <__mdiff>
1000597c:	1007883a 	mov	r3,r2
10005980:	10800317 	ldw	r2,12(r2)
10005984:	bc800c04 	addi	r18,r23,48
10005988:	180b883a 	mov	r5,r3
1000598c:	10004e1e 	bne	r2,zero,10005ac8 <_dtoa_r+0xfac>
10005990:	8009883a 	mov	r4,r16
10005994:	d8c01615 	stw	r3,88(sp)
10005998:	0008b580 	call	10008b58 <__mcmp>
1000599c:	d8c01617 	ldw	r3,88(sp)
100059a0:	e009883a 	mov	r4,fp
100059a4:	d8801615 	stw	r2,88(sp)
100059a8:	180b883a 	mov	r5,r3
100059ac:	000827c0 	call	1000827c <_Bfree>
100059b0:	d8801617 	ldw	r2,88(sp)
100059b4:	1000041e 	bne	r2,zero,100059c8 <_dtoa_r+0xeac>
100059b8:	d9800317 	ldw	r6,12(sp)
100059bc:	3000021e 	bne	r6,zero,100059c8 <_dtoa_r+0xeac>
100059c0:	d8c00617 	ldw	r3,24(sp)
100059c4:	18003726 	beq	r3,zero,10005aa4 <_dtoa_r+0xf88>
100059c8:	b0002016 	blt	r22,zero,10005a4c <_dtoa_r+0xf30>
100059cc:	b000041e 	bne	r22,zero,100059e0 <_dtoa_r+0xec4>
100059d0:	d9000317 	ldw	r4,12(sp)
100059d4:	2000021e 	bne	r4,zero,100059e0 <_dtoa_r+0xec4>
100059d8:	d8c00617 	ldw	r3,24(sp)
100059dc:	18001b26 	beq	r3,zero,10005a4c <_dtoa_r+0xf30>
100059e0:	00810716 	blt	zero,r2,10005e00 <_dtoa_r+0x12e4>
100059e4:	d8c00417 	ldw	r3,16(sp)
100059e8:	9d800044 	addi	r22,r19,1
100059ec:	9c800005 	stb	r18,0(r19)
100059f0:	b02f883a 	mov	r23,r22
100059f4:	98c10626 	beq	r19,r3,10005e10 <_dtoa_r+0x12f4>
100059f8:	800b883a 	mov	r5,r16
100059fc:	000f883a 	mov	r7,zero
10005a00:	01800284 	movi	r6,10
10005a04:	e009883a 	mov	r4,fp
10005a08:	00082a40 	call	100082a4 <__multadd>
10005a0c:	1021883a 	mov	r16,r2
10005a10:	000f883a 	mov	r7,zero
10005a14:	01800284 	movi	r6,10
10005a18:	880b883a 	mov	r5,r17
10005a1c:	e009883a 	mov	r4,fp
10005a20:	8d002526 	beq	r17,r20,10005ab8 <_dtoa_r+0xf9c>
10005a24:	00082a40 	call	100082a4 <__multadd>
10005a28:	a00b883a 	mov	r5,r20
10005a2c:	000f883a 	mov	r7,zero
10005a30:	01800284 	movi	r6,10
10005a34:	e009883a 	mov	r4,fp
10005a38:	1023883a 	mov	r17,r2
10005a3c:	00082a40 	call	100082a4 <__multadd>
10005a40:	1029883a 	mov	r20,r2
10005a44:	b027883a 	mov	r19,r22
10005a48:	003fc006 	br	1000594c <__alt_data_end+0xf800594c>
10005a4c:	9011883a 	mov	r8,r18
10005a50:	00800e0e 	bge	zero,r2,10005a8c <_dtoa_r+0xf70>
10005a54:	800b883a 	mov	r5,r16
10005a58:	01800044 	movi	r6,1
10005a5c:	e009883a 	mov	r4,fp
10005a60:	da001715 	stw	r8,92(sp)
10005a64:	0008a100 	call	10008a10 <__lshift>
10005a68:	a80b883a 	mov	r5,r21
10005a6c:	1009883a 	mov	r4,r2
10005a70:	1021883a 	mov	r16,r2
10005a74:	0008b580 	call	10008b58 <__mcmp>
10005a78:	da001717 	ldw	r8,92(sp)
10005a7c:	0081960e 	bge	zero,r2,100060d8 <_dtoa_r+0x15bc>
10005a80:	00800e44 	movi	r2,57
10005a84:	40817026 	beq	r8,r2,10006048 <_dtoa_r+0x152c>
10005a88:	ba000c44 	addi	r8,r23,49
10005a8c:	8825883a 	mov	r18,r17
10005a90:	9dc00044 	addi	r23,r19,1
10005a94:	9a000005 	stb	r8,0(r19)
10005a98:	a023883a 	mov	r17,r20
10005a9c:	dc000915 	stw	r16,36(sp)
10005aa0:	003f2406 	br	10005734 <__alt_data_end+0xf8005734>
10005aa4:	00800e44 	movi	r2,57
10005aa8:	9011883a 	mov	r8,r18
10005aac:	90816626 	beq	r18,r2,10006048 <_dtoa_r+0x152c>
10005ab0:	05bff516 	blt	zero,r22,10005a88 <__alt_data_end+0xf8005a88>
10005ab4:	003ff506 	br	10005a8c <__alt_data_end+0xf8005a8c>
10005ab8:	00082a40 	call	100082a4 <__multadd>
10005abc:	1023883a 	mov	r17,r2
10005ac0:	1029883a 	mov	r20,r2
10005ac4:	003fdf06 	br	10005a44 <__alt_data_end+0xf8005a44>
10005ac8:	e009883a 	mov	r4,fp
10005acc:	000827c0 	call	1000827c <_Bfree>
10005ad0:	00800044 	movi	r2,1
10005ad4:	003fbc06 	br	100059c8 <__alt_data_end+0xf80059c8>
10005ad8:	a80b883a 	mov	r5,r21
10005adc:	8009883a 	mov	r4,r16
10005ae0:	0008b580 	call	10008b58 <__mcmp>
10005ae4:	103edb0e 	bge	r2,zero,10005654 <__alt_data_end+0xf8005654>
10005ae8:	800b883a 	mov	r5,r16
10005aec:	000f883a 	mov	r7,zero
10005af0:	01800284 	movi	r6,10
10005af4:	e009883a 	mov	r4,fp
10005af8:	00082a40 	call	100082a4 <__multadd>
10005afc:	1021883a 	mov	r16,r2
10005b00:	d8800517 	ldw	r2,20(sp)
10005b04:	d8c00b17 	ldw	r3,44(sp)
10005b08:	10bfffc4 	addi	r2,r2,-1
10005b0c:	d8800515 	stw	r2,20(sp)
10005b10:	183f761e 	bne	r3,zero,100058ec <__alt_data_end+0xf80058ec>
10005b14:	d9000c17 	ldw	r4,48(sp)
10005b18:	0101730e 	bge	zero,r4,100060e8 <_dtoa_r+0x15cc>
10005b1c:	d9000615 	stw	r4,24(sp)
10005b20:	003ed006 	br	10005664 <__alt_data_end+0xf8005664>
10005b24:	00800084 	movi	r2,2
10005b28:	3081861e 	bne	r6,r2,10006144 <_dtoa_r+0x1628>
10005b2c:	d8000b15 	stw	zero,44(sp)
10005b30:	003f3c06 	br	10005824 <__alt_data_end+0xf8005824>
10005b34:	dc000917 	ldw	r16,36(sp)
10005b38:	003e9206 	br	10005584 <__alt_data_end+0xf8005584>
10005b3c:	d9c00317 	ldw	r7,12(sp)
10005b40:	00800084 	movi	r2,2
10005b44:	11fec50e 	bge	r2,r7,1000565c <__alt_data_end+0xf800565c>
10005b48:	d9000617 	ldw	r4,24(sp)
10005b4c:	20013c1e 	bne	r4,zero,10006040 <_dtoa_r+0x1524>
10005b50:	a80b883a 	mov	r5,r21
10005b54:	000f883a 	mov	r7,zero
10005b58:	01800144 	movi	r6,5
10005b5c:	e009883a 	mov	r4,fp
10005b60:	00082a40 	call	100082a4 <__multadd>
10005b64:	100b883a 	mov	r5,r2
10005b68:	8009883a 	mov	r4,r16
10005b6c:	102b883a 	mov	r21,r2
10005b70:	0008b580 	call	10008b58 <__mcmp>
10005b74:	dc000915 	stw	r16,36(sp)
10005b78:	00bf410e 	bge	zero,r2,10005880 <__alt_data_end+0xf8005880>
10005b7c:	d9c00717 	ldw	r7,28(sp)
10005b80:	00800c44 	movi	r2,49
10005b84:	38800005 	stb	r2,0(r7)
10005b88:	d8800517 	ldw	r2,20(sp)
10005b8c:	3dc00044 	addi	r23,r7,1
10005b90:	10800044 	addi	r2,r2,1
10005b94:	d8800515 	stw	r2,20(sp)
10005b98:	003f3d06 	br	10005890 <__alt_data_end+0xf8005890>
10005b9c:	d9800517 	ldw	r6,20(sp)
10005ba0:	d9c00717 	ldw	r7,28(sp)
10005ba4:	00800c44 	movi	r2,49
10005ba8:	31800044 	addi	r6,r6,1
10005bac:	d9800515 	stw	r6,20(sp)
10005bb0:	38800005 	stb	r2,0(r7)
10005bb4:	003edf06 	br	10005734 <__alt_data_end+0xf8005734>
10005bb8:	d8000b15 	stw	zero,44(sp)
10005bbc:	003c9f06 	br	10004e3c <__alt_data_end+0xf8004e3c>
10005bc0:	903e7e1e 	bne	r18,zero,100055bc <__alt_data_end+0xf80055bc>
10005bc4:	00800434 	movhi	r2,16
10005bc8:	10bfffc4 	addi	r2,r2,-1
10005bcc:	9884703a 	and	r2,r19,r2
10005bd0:	1000ea1e 	bne	r2,zero,10005f7c <_dtoa_r+0x1460>
10005bd4:	9cdffc2c 	andhi	r19,r19,32752
10005bd8:	9800e826 	beq	r19,zero,10005f7c <_dtoa_r+0x1460>
10005bdc:	d9c00817 	ldw	r7,32(sp)
10005be0:	b5800044 	addi	r22,r22,1
10005be4:	04c00044 	movi	r19,1
10005be8:	39c00044 	addi	r7,r7,1
10005bec:	d9c00815 	stw	r7,32(sp)
10005bf0:	d8800d17 	ldw	r2,52(sp)
10005bf4:	103e721e 	bne	r2,zero,100055c0 <__alt_data_end+0xf80055c0>
10005bf8:	00800044 	movi	r2,1
10005bfc:	003e7906 	br	100055e4 <__alt_data_end+0xf80055e4>
10005c00:	8009883a 	mov	r4,r16
10005c04:	000ef680 	call	1000ef68 <__floatsidf>
10005c08:	d9800f17 	ldw	r6,60(sp)
10005c0c:	d9c01017 	ldw	r7,64(sp)
10005c10:	1009883a 	mov	r4,r2
10005c14:	180b883a 	mov	r5,r3
10005c18:	000dd840 	call	1000dd84 <__muldf3>
10005c1c:	000d883a 	mov	r6,zero
10005c20:	01d00734 	movhi	r7,16412
10005c24:	1009883a 	mov	r4,r2
10005c28:	180b883a 	mov	r5,r3
10005c2c:	000c8b00 	call	1000c8b0 <__adddf3>
10005c30:	047f3034 	movhi	r17,64704
10005c34:	1021883a 	mov	r16,r2
10005c38:	1c63883a 	add	r17,r3,r17
10005c3c:	d9000f17 	ldw	r4,60(sp)
10005c40:	d9401017 	ldw	r5,64(sp)
10005c44:	000d883a 	mov	r6,zero
10005c48:	01d00534 	movhi	r7,16404
10005c4c:	000e5ec0 	call	1000e5ec <__subdf3>
10005c50:	800d883a 	mov	r6,r16
10005c54:	880f883a 	mov	r7,r17
10005c58:	1009883a 	mov	r4,r2
10005c5c:	180b883a 	mov	r5,r3
10005c60:	102b883a 	mov	r21,r2
10005c64:	1829883a 	mov	r20,r3
10005c68:	000dbb40 	call	1000dbb4 <__gedf2>
10005c6c:	00806c16 	blt	zero,r2,10005e20 <_dtoa_r+0x1304>
10005c70:	89e0003c 	xorhi	r7,r17,32768
10005c74:	800d883a 	mov	r6,r16
10005c78:	a809883a 	mov	r4,r21
10005c7c:	a00b883a 	mov	r5,r20
10005c80:	000dc900 	call	1000dc90 <__ledf2>
10005c84:	103d7e0e 	bge	r2,zero,10005280 <__alt_data_end+0xf8005280>
10005c88:	002b883a 	mov	r21,zero
10005c8c:	0023883a 	mov	r17,zero
10005c90:	003efb06 	br	10005880 <__alt_data_end+0xf8005880>
10005c94:	d8800717 	ldw	r2,28(sp)
10005c98:	003bd006 	br	10004bdc <__alt_data_end+0xf8004bdc>
10005c9c:	d9000a17 	ldw	r4,40(sp)
10005ca0:	d9800d17 	ldw	r6,52(sp)
10005ca4:	dd400a15 	stw	r21,40(sp)
10005ca8:	a905c83a 	sub	r2,r21,r4
10005cac:	308d883a 	add	r6,r6,r2
10005cb0:	d9800d15 	stw	r6,52(sp)
10005cb4:	002b883a 	mov	r21,zero
10005cb8:	003e0606 	br	100054d4 <__alt_data_end+0xf80054d4>
10005cbc:	9023883a 	mov	r17,r18
10005cc0:	9829883a 	mov	r20,r19
10005cc4:	04000084 	movi	r16,2
10005cc8:	003c9206 	br	10004f14 <__alt_data_end+0xf8004f14>
10005ccc:	04000044 	movi	r16,1
10005cd0:	dc000c15 	stw	r16,48(sp)
10005cd4:	dc000615 	stw	r16,24(sp)
10005cd8:	dc002215 	stw	r16,136(sp)
10005cdc:	e0001115 	stw	zero,68(fp)
10005ce0:	000b883a 	mov	r5,zero
10005ce4:	003c6906 	br	10004e8c <__alt_data_end+0xf8004e8c>
10005ce8:	3021883a 	mov	r16,r6
10005cec:	003ffb06 	br	10005cdc <__alt_data_end+0xf8005cdc>
10005cf0:	1000021e 	bne	r2,zero,10005cfc <_dtoa_r+0x11e0>
10005cf4:	4200004c 	andi	r8,r8,1
10005cf8:	403e7d1e 	bne	r8,zero,100056f0 <__alt_data_end+0xf80056f0>
10005cfc:	01000c04 	movi	r4,48
10005d00:	00000106 	br	10005d08 <_dtoa_r+0x11ec>
10005d04:	102f883a 	mov	r23,r2
10005d08:	b8bfffc4 	addi	r2,r23,-1
10005d0c:	10c00007 	ldb	r3,0(r2)
10005d10:	193ffc26 	beq	r3,r4,10005d04 <__alt_data_end+0xf8005d04>
10005d14:	003e8706 	br	10005734 <__alt_data_end+0xf8005734>
10005d18:	d8800517 	ldw	r2,20(sp)
10005d1c:	00a3c83a 	sub	r17,zero,r2
10005d20:	8800a426 	beq	r17,zero,10005fb4 <_dtoa_r+0x1498>
10005d24:	888003cc 	andi	r2,r17,15
10005d28:	100490fa 	slli	r2,r2,3
10005d2c:	00c40074 	movhi	r3,4097
10005d30:	18c89404 	addi	r3,r3,8784
10005d34:	1885883a 	add	r2,r3,r2
10005d38:	11800017 	ldw	r6,0(r2)
10005d3c:	11c00117 	ldw	r7,4(r2)
10005d40:	9009883a 	mov	r4,r18
10005d44:	980b883a 	mov	r5,r19
10005d48:	8823d13a 	srai	r17,r17,4
10005d4c:	000dd840 	call	1000dd84 <__muldf3>
10005d50:	d8800f15 	stw	r2,60(sp)
10005d54:	d8c01015 	stw	r3,64(sp)
10005d58:	8800e826 	beq	r17,zero,100060fc <_dtoa_r+0x15e0>
10005d5c:	05040074 	movhi	r20,4097
10005d60:	a5088a04 	addi	r20,r20,8744
10005d64:	04000084 	movi	r16,2
10005d68:	8980004c 	andi	r6,r17,1
10005d6c:	1009883a 	mov	r4,r2
10005d70:	8823d07a 	srai	r17,r17,1
10005d74:	180b883a 	mov	r5,r3
10005d78:	30000426 	beq	r6,zero,10005d8c <_dtoa_r+0x1270>
10005d7c:	a1800017 	ldw	r6,0(r20)
10005d80:	a1c00117 	ldw	r7,4(r20)
10005d84:	84000044 	addi	r16,r16,1
10005d88:	000dd840 	call	1000dd84 <__muldf3>
10005d8c:	a5000204 	addi	r20,r20,8
10005d90:	883ff51e 	bne	r17,zero,10005d68 <__alt_data_end+0xf8005d68>
10005d94:	d8800f15 	stw	r2,60(sp)
10005d98:	d8c01015 	stw	r3,64(sp)
10005d9c:	003c7606 	br	10004f78 <__alt_data_end+0xf8004f78>
10005da0:	00c00c04 	movi	r3,48
10005da4:	10c00005 	stb	r3,0(r2)
10005da8:	d8c00517 	ldw	r3,20(sp)
10005dac:	bd3fffc3 	ldbu	r20,-1(r23)
10005db0:	18c00044 	addi	r3,r3,1
10005db4:	d8c00515 	stw	r3,20(sp)
10005db8:	003db906 	br	100054a0 <__alt_data_end+0xf80054a0>
10005dbc:	89400117 	ldw	r5,4(r17)
10005dc0:	e009883a 	mov	r4,fp
10005dc4:	00081d40 	call	100081d4 <_Balloc>
10005dc8:	89800417 	ldw	r6,16(r17)
10005dcc:	89400304 	addi	r5,r17,12
10005dd0:	11000304 	addi	r4,r2,12
10005dd4:	31800084 	addi	r6,r6,2
10005dd8:	318d883a 	add	r6,r6,r6
10005ddc:	318d883a 	add	r6,r6,r6
10005de0:	1027883a 	mov	r19,r2
10005de4:	0007e080 	call	10007e08 <memcpy>
10005de8:	01800044 	movi	r6,1
10005dec:	980b883a 	mov	r5,r19
10005df0:	e009883a 	mov	r4,fp
10005df4:	0008a100 	call	10008a10 <__lshift>
10005df8:	1029883a 	mov	r20,r2
10005dfc:	003ecc06 	br	10005930 <__alt_data_end+0xf8005930>
10005e00:	00800e44 	movi	r2,57
10005e04:	90809026 	beq	r18,r2,10006048 <_dtoa_r+0x152c>
10005e08:	92000044 	addi	r8,r18,1
10005e0c:	003f1f06 	br	10005a8c <__alt_data_end+0xf8005a8c>
10005e10:	9011883a 	mov	r8,r18
10005e14:	8825883a 	mov	r18,r17
10005e18:	a023883a 	mov	r17,r20
10005e1c:	003e2906 	br	100056c4 <__alt_data_end+0xf80056c4>
10005e20:	002b883a 	mov	r21,zero
10005e24:	0023883a 	mov	r17,zero
10005e28:	003f5406 	br	10005b7c <__alt_data_end+0xf8005b7c>
10005e2c:	61bfffc4 	addi	r6,r12,-1
10005e30:	300490fa 	slli	r2,r6,3
10005e34:	00c40074 	movhi	r3,4097
10005e38:	18c89404 	addi	r3,r3,8784
10005e3c:	1885883a 	add	r2,r3,r2
10005e40:	11000017 	ldw	r4,0(r2)
10005e44:	11400117 	ldw	r5,4(r2)
10005e48:	d8800717 	ldw	r2,28(sp)
10005e4c:	880f883a 	mov	r7,r17
10005e50:	d9801215 	stw	r6,72(sp)
10005e54:	800d883a 	mov	r6,r16
10005e58:	db001615 	stw	r12,88(sp)
10005e5c:	15c00044 	addi	r23,r2,1
10005e60:	000dd840 	call	1000dd84 <__muldf3>
10005e64:	d9401017 	ldw	r5,64(sp)
10005e68:	d9000f17 	ldw	r4,60(sp)
10005e6c:	d8c01515 	stw	r3,84(sp)
10005e70:	d8801415 	stw	r2,80(sp)
10005e74:	000eee80 	call	1000eee8 <__fixdfsi>
10005e78:	1009883a 	mov	r4,r2
10005e7c:	1021883a 	mov	r16,r2
10005e80:	000ef680 	call	1000ef68 <__floatsidf>
10005e84:	d9000f17 	ldw	r4,60(sp)
10005e88:	d9401017 	ldw	r5,64(sp)
10005e8c:	100d883a 	mov	r6,r2
10005e90:	180f883a 	mov	r7,r3
10005e94:	000e5ec0 	call	1000e5ec <__subdf3>
10005e98:	1829883a 	mov	r20,r3
10005e9c:	d8c00717 	ldw	r3,28(sp)
10005ea0:	84000c04 	addi	r16,r16,48
10005ea4:	1023883a 	mov	r17,r2
10005ea8:	1c000005 	stb	r16,0(r3)
10005eac:	db001617 	ldw	r12,88(sp)
10005eb0:	00800044 	movi	r2,1
10005eb4:	60802226 	beq	r12,r2,10005f40 <_dtoa_r+0x1424>
10005eb8:	d9c00717 	ldw	r7,28(sp)
10005ebc:	8805883a 	mov	r2,r17
10005ec0:	b82b883a 	mov	r21,r23
10005ec4:	3b19883a 	add	r12,r7,r12
10005ec8:	6023883a 	mov	r17,r12
10005ecc:	a007883a 	mov	r3,r20
10005ed0:	dc800f15 	stw	r18,60(sp)
10005ed4:	000d883a 	mov	r6,zero
10005ed8:	01d00934 	movhi	r7,16420
10005edc:	1009883a 	mov	r4,r2
10005ee0:	180b883a 	mov	r5,r3
10005ee4:	000dd840 	call	1000dd84 <__muldf3>
10005ee8:	180b883a 	mov	r5,r3
10005eec:	1009883a 	mov	r4,r2
10005ef0:	1829883a 	mov	r20,r3
10005ef4:	1025883a 	mov	r18,r2
10005ef8:	000eee80 	call	1000eee8 <__fixdfsi>
10005efc:	1009883a 	mov	r4,r2
10005f00:	1021883a 	mov	r16,r2
10005f04:	000ef680 	call	1000ef68 <__floatsidf>
10005f08:	100d883a 	mov	r6,r2
10005f0c:	180f883a 	mov	r7,r3
10005f10:	9009883a 	mov	r4,r18
10005f14:	a00b883a 	mov	r5,r20
10005f18:	84000c04 	addi	r16,r16,48
10005f1c:	000e5ec0 	call	1000e5ec <__subdf3>
10005f20:	ad400044 	addi	r21,r21,1
10005f24:	ac3fffc5 	stb	r16,-1(r21)
10005f28:	ac7fea1e 	bne	r21,r17,10005ed4 <__alt_data_end+0xf8005ed4>
10005f2c:	1023883a 	mov	r17,r2
10005f30:	d8801217 	ldw	r2,72(sp)
10005f34:	dc800f17 	ldw	r18,60(sp)
10005f38:	1829883a 	mov	r20,r3
10005f3c:	b8af883a 	add	r23,r23,r2
10005f40:	d9001417 	ldw	r4,80(sp)
10005f44:	d9401517 	ldw	r5,84(sp)
10005f48:	000d883a 	mov	r6,zero
10005f4c:	01cff834 	movhi	r7,16352
10005f50:	000c8b00 	call	1000c8b0 <__adddf3>
10005f54:	880d883a 	mov	r6,r17
10005f58:	a00f883a 	mov	r7,r20
10005f5c:	1009883a 	mov	r4,r2
10005f60:	180b883a 	mov	r5,r3
10005f64:	000dc900 	call	1000dc90 <__ledf2>
10005f68:	10003e0e 	bge	r2,zero,10006064 <_dtoa_r+0x1548>
10005f6c:	d9001317 	ldw	r4,76(sp)
10005f70:	bd3fffc3 	ldbu	r20,-1(r23)
10005f74:	d9000515 	stw	r4,20(sp)
10005f78:	003d3b06 	br	10005468 <__alt_data_end+0xf8005468>
10005f7c:	0027883a 	mov	r19,zero
10005f80:	003f1b06 	br	10005bf0 <__alt_data_end+0xf8005bf0>
10005f84:	d8800817 	ldw	r2,32(sp)
10005f88:	11e9c83a 	sub	r20,r2,r7
10005f8c:	0005883a 	mov	r2,zero
10005f90:	003d5406 	br	100054e4 <__alt_data_end+0xf80054e4>
10005f94:	00800044 	movi	r2,1
10005f98:	003dc706 	br	100056b8 <__alt_data_end+0xf80056b8>
10005f9c:	d8c00217 	ldw	r3,8(sp)
10005fa0:	00800d84 	movi	r2,54
10005fa4:	dd400a17 	ldw	r21,40(sp)
10005fa8:	10c5c83a 	sub	r2,r2,r3
10005fac:	dd000817 	ldw	r20,32(sp)
10005fb0:	003d4c06 	br	100054e4 <__alt_data_end+0xf80054e4>
10005fb4:	dc800f15 	stw	r18,60(sp)
10005fb8:	dcc01015 	stw	r19,64(sp)
10005fbc:	04000084 	movi	r16,2
10005fc0:	003bed06 	br	10004f78 <__alt_data_end+0xf8004f78>
10005fc4:	d9000617 	ldw	r4,24(sp)
10005fc8:	203f0d26 	beq	r4,zero,10005c00 <__alt_data_end+0xf8005c00>
10005fcc:	d9800c17 	ldw	r6,48(sp)
10005fd0:	01bcab0e 	bge	zero,r6,10005280 <__alt_data_end+0xf8005280>
10005fd4:	d9401017 	ldw	r5,64(sp)
10005fd8:	d9000f17 	ldw	r4,60(sp)
10005fdc:	000d883a 	mov	r6,zero
10005fe0:	01d00934 	movhi	r7,16420
10005fe4:	000dd840 	call	1000dd84 <__muldf3>
10005fe8:	81000044 	addi	r4,r16,1
10005fec:	d8800f15 	stw	r2,60(sp)
10005ff0:	d8c01015 	stw	r3,64(sp)
10005ff4:	000ef680 	call	1000ef68 <__floatsidf>
10005ff8:	d9800f17 	ldw	r6,60(sp)
10005ffc:	d9c01017 	ldw	r7,64(sp)
10006000:	1009883a 	mov	r4,r2
10006004:	180b883a 	mov	r5,r3
10006008:	000dd840 	call	1000dd84 <__muldf3>
1000600c:	01d00734 	movhi	r7,16412
10006010:	000d883a 	mov	r6,zero
10006014:	1009883a 	mov	r4,r2
10006018:	180b883a 	mov	r5,r3
1000601c:	000c8b00 	call	1000c8b0 <__adddf3>
10006020:	d9c00517 	ldw	r7,20(sp)
10006024:	047f3034 	movhi	r17,64704
10006028:	1021883a 	mov	r16,r2
1000602c:	39ffffc4 	addi	r7,r7,-1
10006030:	d9c01315 	stw	r7,76(sp)
10006034:	1c63883a 	add	r17,r3,r17
10006038:	db000c17 	ldw	r12,48(sp)
1000603c:	003bea06 	br	10004fe8 <__alt_data_end+0xf8004fe8>
10006040:	dc000915 	stw	r16,36(sp)
10006044:	003e0e06 	br	10005880 <__alt_data_end+0xf8005880>
10006048:	01000e44 	movi	r4,57
1000604c:	8825883a 	mov	r18,r17
10006050:	9dc00044 	addi	r23,r19,1
10006054:	99000005 	stb	r4,0(r19)
10006058:	a023883a 	mov	r17,r20
1000605c:	dc000915 	stw	r16,36(sp)
10006060:	003da406 	br	100056f4 <__alt_data_end+0xf80056f4>
10006064:	d9801417 	ldw	r6,80(sp)
10006068:	d9c01517 	ldw	r7,84(sp)
1000606c:	0009883a 	mov	r4,zero
10006070:	014ff834 	movhi	r5,16352
10006074:	000e5ec0 	call	1000e5ec <__subdf3>
10006078:	880d883a 	mov	r6,r17
1000607c:	a00f883a 	mov	r7,r20
10006080:	1009883a 	mov	r4,r2
10006084:	180b883a 	mov	r5,r3
10006088:	000dbb40 	call	1000dbb4 <__gedf2>
1000608c:	00bc7c0e 	bge	zero,r2,10005280 <__alt_data_end+0xf8005280>
10006090:	01000c04 	movi	r4,48
10006094:	00000106 	br	1000609c <_dtoa_r+0x1580>
10006098:	102f883a 	mov	r23,r2
1000609c:	b8bfffc4 	addi	r2,r23,-1
100060a0:	10c00007 	ldb	r3,0(r2)
100060a4:	193ffc26 	beq	r3,r4,10006098 <__alt_data_end+0xf8006098>
100060a8:	d9801317 	ldw	r6,76(sp)
100060ac:	d9800515 	stw	r6,20(sp)
100060b0:	003c4406 	br	100051c4 <__alt_data_end+0xf80051c4>
100060b4:	d9801317 	ldw	r6,76(sp)
100060b8:	d9800515 	stw	r6,20(sp)
100060bc:	003cea06 	br	10005468 <__alt_data_end+0xf8005468>
100060c0:	dd800f17 	ldw	r22,60(sp)
100060c4:	dcc01017 	ldw	r19,64(sp)
100060c8:	dc801217 	ldw	r18,72(sp)
100060cc:	003c6c06 	br	10005280 <__alt_data_end+0xf8005280>
100060d0:	903e031e 	bne	r18,zero,100058e0 <__alt_data_end+0xf80058e0>
100060d4:	003ebb06 	br	10005bc4 <__alt_data_end+0xf8005bc4>
100060d8:	103e6c1e 	bne	r2,zero,10005a8c <__alt_data_end+0xf8005a8c>
100060dc:	4080004c 	andi	r2,r8,1
100060e0:	103e6a26 	beq	r2,zero,10005a8c <__alt_data_end+0xf8005a8c>
100060e4:	003e6606 	br	10005a80 <__alt_data_end+0xf8005a80>
100060e8:	d8c00317 	ldw	r3,12(sp)
100060ec:	00800084 	movi	r2,2
100060f0:	10c02916 	blt	r2,r3,10006198 <_dtoa_r+0x167c>
100060f4:	d9000c17 	ldw	r4,48(sp)
100060f8:	003e8806 	br	10005b1c <__alt_data_end+0xf8005b1c>
100060fc:	04000084 	movi	r16,2
10006100:	003b9d06 	br	10004f78 <__alt_data_end+0xf8004f78>
10006104:	d9001317 	ldw	r4,76(sp)
10006108:	d9000515 	stw	r4,20(sp)
1000610c:	003cd606 	br	10005468 <__alt_data_end+0xf8005468>
10006110:	d8801317 	ldw	r2,76(sp)
10006114:	d8800515 	stw	r2,20(sp)
10006118:	003c2a06 	br	100051c4 <__alt_data_end+0xf80051c4>
1000611c:	d9800317 	ldw	r6,12(sp)
10006120:	00800084 	movi	r2,2
10006124:	11801516 	blt	r2,r6,1000617c <_dtoa_r+0x1660>
10006128:	d9c00c17 	ldw	r7,48(sp)
1000612c:	d9c00615 	stw	r7,24(sp)
10006130:	003df706 	br	10005910 <__alt_data_end+0xf8005910>
10006134:	193d3926 	beq	r3,r4,1000561c <__alt_data_end+0xf800561c>
10006138:	00c00f04 	movi	r3,60
1000613c:	1885c83a 	sub	r2,r3,r2
10006140:	003ddf06 	br	100058c0 <__alt_data_end+0xf80058c0>
10006144:	e009883a 	mov	r4,fp
10006148:	e0001115 	stw	zero,68(fp)
1000614c:	000b883a 	mov	r5,zero
10006150:	00081d40 	call	100081d4 <_Balloc>
10006154:	d8800715 	stw	r2,28(sp)
10006158:	d8c00717 	ldw	r3,28(sp)
1000615c:	00bfffc4 	movi	r2,-1
10006160:	01000044 	movi	r4,1
10006164:	d8800c15 	stw	r2,48(sp)
10006168:	e0c01015 	stw	r3,64(fp)
1000616c:	d9000b15 	stw	r4,44(sp)
10006170:	d8800615 	stw	r2,24(sp)
10006174:	d8002215 	stw	zero,136(sp)
10006178:	003c4106 	br	10005280 <__alt_data_end+0xf8005280>
1000617c:	d8c00c17 	ldw	r3,48(sp)
10006180:	d8c00615 	stw	r3,24(sp)
10006184:	003e7006 	br	10005b48 <__alt_data_end+0xf8005b48>
10006188:	04400044 	movi	r17,1
1000618c:	003b2006 	br	10004e10 <__alt_data_end+0xf8004e10>
10006190:	000b883a 	mov	r5,zero
10006194:	003b3d06 	br	10004e8c <__alt_data_end+0xf8004e8c>
10006198:	d8800c17 	ldw	r2,48(sp)
1000619c:	d8800615 	stw	r2,24(sp)
100061a0:	003e6906 	br	10005b48 <__alt_data_end+0xf8005b48>

100061a4 <__sflush_r>:
100061a4:	2880030b 	ldhu	r2,12(r5)
100061a8:	defffb04 	addi	sp,sp,-20
100061ac:	dcc00315 	stw	r19,12(sp)
100061b0:	dc400115 	stw	r17,4(sp)
100061b4:	dfc00415 	stw	ra,16(sp)
100061b8:	dc800215 	stw	r18,8(sp)
100061bc:	dc000015 	stw	r16,0(sp)
100061c0:	10c0020c 	andi	r3,r2,8
100061c4:	2823883a 	mov	r17,r5
100061c8:	2027883a 	mov	r19,r4
100061cc:	1800311e 	bne	r3,zero,10006294 <__sflush_r+0xf0>
100061d0:	28c00117 	ldw	r3,4(r5)
100061d4:	10820014 	ori	r2,r2,2048
100061d8:	2880030d 	sth	r2,12(r5)
100061dc:	00c04b0e 	bge	zero,r3,1000630c <__sflush_r+0x168>
100061e0:	8a000a17 	ldw	r8,40(r17)
100061e4:	40002326 	beq	r8,zero,10006274 <__sflush_r+0xd0>
100061e8:	9c000017 	ldw	r16,0(r19)
100061ec:	10c4000c 	andi	r3,r2,4096
100061f0:	98000015 	stw	zero,0(r19)
100061f4:	18004826 	beq	r3,zero,10006318 <__sflush_r+0x174>
100061f8:	89801417 	ldw	r6,80(r17)
100061fc:	10c0010c 	andi	r3,r2,4
10006200:	18000626 	beq	r3,zero,1000621c <__sflush_r+0x78>
10006204:	88c00117 	ldw	r3,4(r17)
10006208:	88800c17 	ldw	r2,48(r17)
1000620c:	30cdc83a 	sub	r6,r6,r3
10006210:	10000226 	beq	r2,zero,1000621c <__sflush_r+0x78>
10006214:	88800f17 	ldw	r2,60(r17)
10006218:	308dc83a 	sub	r6,r6,r2
1000621c:	89400717 	ldw	r5,28(r17)
10006220:	000f883a 	mov	r7,zero
10006224:	9809883a 	mov	r4,r19
10006228:	403ee83a 	callr	r8
1000622c:	00ffffc4 	movi	r3,-1
10006230:	10c04426 	beq	r2,r3,10006344 <__sflush_r+0x1a0>
10006234:	88c0030b 	ldhu	r3,12(r17)
10006238:	89000417 	ldw	r4,16(r17)
1000623c:	88000115 	stw	zero,4(r17)
10006240:	197dffcc 	andi	r5,r3,63487
10006244:	8940030d 	sth	r5,12(r17)
10006248:	89000015 	stw	r4,0(r17)
1000624c:	18c4000c 	andi	r3,r3,4096
10006250:	18002c1e 	bne	r3,zero,10006304 <__sflush_r+0x160>
10006254:	89400c17 	ldw	r5,48(r17)
10006258:	9c000015 	stw	r16,0(r19)
1000625c:	28000526 	beq	r5,zero,10006274 <__sflush_r+0xd0>
10006260:	88801004 	addi	r2,r17,64
10006264:	28800226 	beq	r5,r2,10006270 <__sflush_r+0xcc>
10006268:	9809883a 	mov	r4,r19
1000626c:	00069200 	call	10006920 <_free_r>
10006270:	88000c15 	stw	zero,48(r17)
10006274:	0005883a 	mov	r2,zero
10006278:	dfc00417 	ldw	ra,16(sp)
1000627c:	dcc00317 	ldw	r19,12(sp)
10006280:	dc800217 	ldw	r18,8(sp)
10006284:	dc400117 	ldw	r17,4(sp)
10006288:	dc000017 	ldw	r16,0(sp)
1000628c:	dec00504 	addi	sp,sp,20
10006290:	f800283a 	ret
10006294:	2c800417 	ldw	r18,16(r5)
10006298:	903ff626 	beq	r18,zero,10006274 <__alt_data_end+0xf8006274>
1000629c:	2c000017 	ldw	r16,0(r5)
100062a0:	108000cc 	andi	r2,r2,3
100062a4:	2c800015 	stw	r18,0(r5)
100062a8:	84a1c83a 	sub	r16,r16,r18
100062ac:	1000131e 	bne	r2,zero,100062fc <__sflush_r+0x158>
100062b0:	28800517 	ldw	r2,20(r5)
100062b4:	88800215 	stw	r2,8(r17)
100062b8:	04000316 	blt	zero,r16,100062c8 <__sflush_r+0x124>
100062bc:	003fed06 	br	10006274 <__alt_data_end+0xf8006274>
100062c0:	90a5883a 	add	r18,r18,r2
100062c4:	043feb0e 	bge	zero,r16,10006274 <__alt_data_end+0xf8006274>
100062c8:	88800917 	ldw	r2,36(r17)
100062cc:	89400717 	ldw	r5,28(r17)
100062d0:	800f883a 	mov	r7,r16
100062d4:	900d883a 	mov	r6,r18
100062d8:	9809883a 	mov	r4,r19
100062dc:	103ee83a 	callr	r2
100062e0:	80a1c83a 	sub	r16,r16,r2
100062e4:	00bff616 	blt	zero,r2,100062c0 <__alt_data_end+0xf80062c0>
100062e8:	88c0030b 	ldhu	r3,12(r17)
100062ec:	00bfffc4 	movi	r2,-1
100062f0:	18c01014 	ori	r3,r3,64
100062f4:	88c0030d 	sth	r3,12(r17)
100062f8:	003fdf06 	br	10006278 <__alt_data_end+0xf8006278>
100062fc:	0005883a 	mov	r2,zero
10006300:	003fec06 	br	100062b4 <__alt_data_end+0xf80062b4>
10006304:	88801415 	stw	r2,80(r17)
10006308:	003fd206 	br	10006254 <__alt_data_end+0xf8006254>
1000630c:	28c00f17 	ldw	r3,60(r5)
10006310:	00ffb316 	blt	zero,r3,100061e0 <__alt_data_end+0xf80061e0>
10006314:	003fd706 	br	10006274 <__alt_data_end+0xf8006274>
10006318:	89400717 	ldw	r5,28(r17)
1000631c:	000d883a 	mov	r6,zero
10006320:	01c00044 	movi	r7,1
10006324:	9809883a 	mov	r4,r19
10006328:	403ee83a 	callr	r8
1000632c:	100d883a 	mov	r6,r2
10006330:	00bfffc4 	movi	r2,-1
10006334:	30801426 	beq	r6,r2,10006388 <__sflush_r+0x1e4>
10006338:	8880030b 	ldhu	r2,12(r17)
1000633c:	8a000a17 	ldw	r8,40(r17)
10006340:	003fae06 	br	100061fc <__alt_data_end+0xf80061fc>
10006344:	98c00017 	ldw	r3,0(r19)
10006348:	183fba26 	beq	r3,zero,10006234 <__alt_data_end+0xf8006234>
1000634c:	01000744 	movi	r4,29
10006350:	19000626 	beq	r3,r4,1000636c <__sflush_r+0x1c8>
10006354:	01000584 	movi	r4,22
10006358:	19000426 	beq	r3,r4,1000636c <__sflush_r+0x1c8>
1000635c:	88c0030b 	ldhu	r3,12(r17)
10006360:	18c01014 	ori	r3,r3,64
10006364:	88c0030d 	sth	r3,12(r17)
10006368:	003fc306 	br	10006278 <__alt_data_end+0xf8006278>
1000636c:	8880030b 	ldhu	r2,12(r17)
10006370:	88c00417 	ldw	r3,16(r17)
10006374:	88000115 	stw	zero,4(r17)
10006378:	10bdffcc 	andi	r2,r2,63487
1000637c:	8880030d 	sth	r2,12(r17)
10006380:	88c00015 	stw	r3,0(r17)
10006384:	003fb306 	br	10006254 <__alt_data_end+0xf8006254>
10006388:	98800017 	ldw	r2,0(r19)
1000638c:	103fea26 	beq	r2,zero,10006338 <__alt_data_end+0xf8006338>
10006390:	00c00744 	movi	r3,29
10006394:	10c00226 	beq	r2,r3,100063a0 <__sflush_r+0x1fc>
10006398:	00c00584 	movi	r3,22
1000639c:	10c0031e 	bne	r2,r3,100063ac <__sflush_r+0x208>
100063a0:	9c000015 	stw	r16,0(r19)
100063a4:	0005883a 	mov	r2,zero
100063a8:	003fb306 	br	10006278 <__alt_data_end+0xf8006278>
100063ac:	88c0030b 	ldhu	r3,12(r17)
100063b0:	3005883a 	mov	r2,r6
100063b4:	18c01014 	ori	r3,r3,64
100063b8:	88c0030d 	sth	r3,12(r17)
100063bc:	003fae06 	br	10006278 <__alt_data_end+0xf8006278>

100063c0 <_fflush_r>:
100063c0:	defffd04 	addi	sp,sp,-12
100063c4:	dc000115 	stw	r16,4(sp)
100063c8:	dfc00215 	stw	ra,8(sp)
100063cc:	2021883a 	mov	r16,r4
100063d0:	20000226 	beq	r4,zero,100063dc <_fflush_r+0x1c>
100063d4:	20800e17 	ldw	r2,56(r4)
100063d8:	10000c26 	beq	r2,zero,1000640c <_fflush_r+0x4c>
100063dc:	2880030f 	ldh	r2,12(r5)
100063e0:	1000051e 	bne	r2,zero,100063f8 <_fflush_r+0x38>
100063e4:	0005883a 	mov	r2,zero
100063e8:	dfc00217 	ldw	ra,8(sp)
100063ec:	dc000117 	ldw	r16,4(sp)
100063f0:	dec00304 	addi	sp,sp,12
100063f4:	f800283a 	ret
100063f8:	8009883a 	mov	r4,r16
100063fc:	dfc00217 	ldw	ra,8(sp)
10006400:	dc000117 	ldw	r16,4(sp)
10006404:	dec00304 	addi	sp,sp,12
10006408:	00061a41 	jmpi	100061a4 <__sflush_r>
1000640c:	d9400015 	stw	r5,0(sp)
10006410:	00067ac0 	call	100067ac <__sinit>
10006414:	d9400017 	ldw	r5,0(sp)
10006418:	003ff006 	br	100063dc <__alt_data_end+0xf80063dc>

1000641c <fflush>:
1000641c:	20000526 	beq	r4,zero,10006434 <fflush+0x18>
10006420:	00840074 	movhi	r2,4097
10006424:	108fc704 	addi	r2,r2,16156
10006428:	200b883a 	mov	r5,r4
1000642c:	11000017 	ldw	r4,0(r2)
10006430:	00063c01 	jmpi	100063c0 <_fflush_r>
10006434:	00840074 	movhi	r2,4097
10006438:	108fc604 	addi	r2,r2,16152
1000643c:	11000017 	ldw	r4,0(r2)
10006440:	01440034 	movhi	r5,4096
10006444:	2958f004 	addi	r5,r5,25536
10006448:	00071bc1 	jmpi	100071bc <_fwalk_reent>

1000644c <__fp_unlock>:
1000644c:	0005883a 	mov	r2,zero
10006450:	f800283a 	ret

10006454 <_cleanup_r>:
10006454:	01440074 	movhi	r5,4097
10006458:	296cd604 	addi	r5,r5,-19624
1000645c:	00071bc1 	jmpi	100071bc <_fwalk_reent>

10006460 <__sinit.part.1>:
10006460:	defff704 	addi	sp,sp,-36
10006464:	00c40034 	movhi	r3,4096
10006468:	dfc00815 	stw	ra,32(sp)
1000646c:	ddc00715 	stw	r23,28(sp)
10006470:	dd800615 	stw	r22,24(sp)
10006474:	dd400515 	stw	r21,20(sp)
10006478:	dd000415 	stw	r20,16(sp)
1000647c:	dcc00315 	stw	r19,12(sp)
10006480:	dc800215 	stw	r18,8(sp)
10006484:	dc400115 	stw	r17,4(sp)
10006488:	dc000015 	stw	r16,0(sp)
1000648c:	18d91504 	addi	r3,r3,25684
10006490:	24000117 	ldw	r16,4(r4)
10006494:	20c00f15 	stw	r3,60(r4)
10006498:	2080bb04 	addi	r2,r4,748
1000649c:	00c000c4 	movi	r3,3
100064a0:	20c0b915 	stw	r3,740(r4)
100064a4:	2080ba15 	stw	r2,744(r4)
100064a8:	2000b815 	stw	zero,736(r4)
100064ac:	05c00204 	movi	r23,8
100064b0:	00800104 	movi	r2,4
100064b4:	2025883a 	mov	r18,r4
100064b8:	b80d883a 	mov	r6,r23
100064bc:	81001704 	addi	r4,r16,92
100064c0:	000b883a 	mov	r5,zero
100064c4:	80000015 	stw	zero,0(r16)
100064c8:	80000115 	stw	zero,4(r16)
100064cc:	80000215 	stw	zero,8(r16)
100064d0:	8080030d 	sth	r2,12(r16)
100064d4:	80001915 	stw	zero,100(r16)
100064d8:	8000038d 	sth	zero,14(r16)
100064dc:	80000415 	stw	zero,16(r16)
100064e0:	80000515 	stw	zero,20(r16)
100064e4:	80000615 	stw	zero,24(r16)
100064e8:	00080ac0 	call	100080ac <memset>
100064ec:	05840074 	movhi	r22,4097
100064f0:	94400217 	ldw	r17,8(r18)
100064f4:	05440074 	movhi	r21,4097
100064f8:	05040074 	movhi	r20,4097
100064fc:	04c40074 	movhi	r19,4097
10006500:	b5a62e04 	addi	r22,r22,-26440
10006504:	ad664504 	addi	r21,r21,-26348
10006508:	a5266404 	addi	r20,r20,-26224
1000650c:	9ce67b04 	addi	r19,r19,-26132
10006510:	85800815 	stw	r22,32(r16)
10006514:	85400915 	stw	r21,36(r16)
10006518:	85000a15 	stw	r20,40(r16)
1000651c:	84c00b15 	stw	r19,44(r16)
10006520:	84000715 	stw	r16,28(r16)
10006524:	00800284 	movi	r2,10
10006528:	8880030d 	sth	r2,12(r17)
1000652c:	00800044 	movi	r2,1
10006530:	b80d883a 	mov	r6,r23
10006534:	89001704 	addi	r4,r17,92
10006538:	000b883a 	mov	r5,zero
1000653c:	88000015 	stw	zero,0(r17)
10006540:	88000115 	stw	zero,4(r17)
10006544:	88000215 	stw	zero,8(r17)
10006548:	88001915 	stw	zero,100(r17)
1000654c:	8880038d 	sth	r2,14(r17)
10006550:	88000415 	stw	zero,16(r17)
10006554:	88000515 	stw	zero,20(r17)
10006558:	88000615 	stw	zero,24(r17)
1000655c:	00080ac0 	call	100080ac <memset>
10006560:	94000317 	ldw	r16,12(r18)
10006564:	00800484 	movi	r2,18
10006568:	8c400715 	stw	r17,28(r17)
1000656c:	8d800815 	stw	r22,32(r17)
10006570:	8d400915 	stw	r21,36(r17)
10006574:	8d000a15 	stw	r20,40(r17)
10006578:	8cc00b15 	stw	r19,44(r17)
1000657c:	8080030d 	sth	r2,12(r16)
10006580:	00800084 	movi	r2,2
10006584:	80000015 	stw	zero,0(r16)
10006588:	80000115 	stw	zero,4(r16)
1000658c:	80000215 	stw	zero,8(r16)
10006590:	80001915 	stw	zero,100(r16)
10006594:	8080038d 	sth	r2,14(r16)
10006598:	80000415 	stw	zero,16(r16)
1000659c:	80000515 	stw	zero,20(r16)
100065a0:	80000615 	stw	zero,24(r16)
100065a4:	b80d883a 	mov	r6,r23
100065a8:	000b883a 	mov	r5,zero
100065ac:	81001704 	addi	r4,r16,92
100065b0:	00080ac0 	call	100080ac <memset>
100065b4:	00800044 	movi	r2,1
100065b8:	84000715 	stw	r16,28(r16)
100065bc:	85800815 	stw	r22,32(r16)
100065c0:	85400915 	stw	r21,36(r16)
100065c4:	85000a15 	stw	r20,40(r16)
100065c8:	84c00b15 	stw	r19,44(r16)
100065cc:	90800e15 	stw	r2,56(r18)
100065d0:	dfc00817 	ldw	ra,32(sp)
100065d4:	ddc00717 	ldw	r23,28(sp)
100065d8:	dd800617 	ldw	r22,24(sp)
100065dc:	dd400517 	ldw	r21,20(sp)
100065e0:	dd000417 	ldw	r20,16(sp)
100065e4:	dcc00317 	ldw	r19,12(sp)
100065e8:	dc800217 	ldw	r18,8(sp)
100065ec:	dc400117 	ldw	r17,4(sp)
100065f0:	dc000017 	ldw	r16,0(sp)
100065f4:	dec00904 	addi	sp,sp,36
100065f8:	f800283a 	ret

100065fc <__fp_lock>:
100065fc:	0005883a 	mov	r2,zero
10006600:	f800283a 	ret

10006604 <__sfmoreglue>:
10006604:	defffc04 	addi	sp,sp,-16
10006608:	dc800215 	stw	r18,8(sp)
1000660c:	2825883a 	mov	r18,r5
10006610:	dc000015 	stw	r16,0(sp)
10006614:	01401a04 	movi	r5,104
10006618:	2021883a 	mov	r16,r4
1000661c:	913fffc4 	addi	r4,r18,-1
10006620:	dfc00315 	stw	ra,12(sp)
10006624:	dc400115 	stw	r17,4(sp)
10006628:	000c8880 	call	1000c888 <__mulsi3>
1000662c:	8009883a 	mov	r4,r16
10006630:	11401d04 	addi	r5,r2,116
10006634:	1023883a 	mov	r17,r2
10006638:	00075180 	call	10007518 <_malloc_r>
1000663c:	1021883a 	mov	r16,r2
10006640:	10000726 	beq	r2,zero,10006660 <__sfmoreglue+0x5c>
10006644:	11000304 	addi	r4,r2,12
10006648:	10000015 	stw	zero,0(r2)
1000664c:	14800115 	stw	r18,4(r2)
10006650:	11000215 	stw	r4,8(r2)
10006654:	89801a04 	addi	r6,r17,104
10006658:	000b883a 	mov	r5,zero
1000665c:	00080ac0 	call	100080ac <memset>
10006660:	8005883a 	mov	r2,r16
10006664:	dfc00317 	ldw	ra,12(sp)
10006668:	dc800217 	ldw	r18,8(sp)
1000666c:	dc400117 	ldw	r17,4(sp)
10006670:	dc000017 	ldw	r16,0(sp)
10006674:	dec00404 	addi	sp,sp,16
10006678:	f800283a 	ret

1000667c <__sfp>:
1000667c:	defffb04 	addi	sp,sp,-20
10006680:	dc000015 	stw	r16,0(sp)
10006684:	04040074 	movhi	r16,4097
10006688:	840fc604 	addi	r16,r16,16152
1000668c:	dcc00315 	stw	r19,12(sp)
10006690:	2027883a 	mov	r19,r4
10006694:	81000017 	ldw	r4,0(r16)
10006698:	dfc00415 	stw	ra,16(sp)
1000669c:	dc800215 	stw	r18,8(sp)
100066a0:	20800e17 	ldw	r2,56(r4)
100066a4:	dc400115 	stw	r17,4(sp)
100066a8:	1000021e 	bne	r2,zero,100066b4 <__sfp+0x38>
100066ac:	00064600 	call	10006460 <__sinit.part.1>
100066b0:	81000017 	ldw	r4,0(r16)
100066b4:	2480b804 	addi	r18,r4,736
100066b8:	047fffc4 	movi	r17,-1
100066bc:	91000117 	ldw	r4,4(r18)
100066c0:	94000217 	ldw	r16,8(r18)
100066c4:	213fffc4 	addi	r4,r4,-1
100066c8:	20000a16 	blt	r4,zero,100066f4 <__sfp+0x78>
100066cc:	8080030f 	ldh	r2,12(r16)
100066d0:	10000c26 	beq	r2,zero,10006704 <__sfp+0x88>
100066d4:	80c01d04 	addi	r3,r16,116
100066d8:	00000206 	br	100066e4 <__sfp+0x68>
100066dc:	18bfe60f 	ldh	r2,-104(r3)
100066e0:	10000826 	beq	r2,zero,10006704 <__sfp+0x88>
100066e4:	213fffc4 	addi	r4,r4,-1
100066e8:	1c3ffd04 	addi	r16,r3,-12
100066ec:	18c01a04 	addi	r3,r3,104
100066f0:	247ffa1e 	bne	r4,r17,100066dc <__alt_data_end+0xf80066dc>
100066f4:	90800017 	ldw	r2,0(r18)
100066f8:	10001d26 	beq	r2,zero,10006770 <__sfp+0xf4>
100066fc:	1025883a 	mov	r18,r2
10006700:	003fee06 	br	100066bc <__alt_data_end+0xf80066bc>
10006704:	00bfffc4 	movi	r2,-1
10006708:	8080038d 	sth	r2,14(r16)
1000670c:	00800044 	movi	r2,1
10006710:	8080030d 	sth	r2,12(r16)
10006714:	80001915 	stw	zero,100(r16)
10006718:	80000015 	stw	zero,0(r16)
1000671c:	80000215 	stw	zero,8(r16)
10006720:	80000115 	stw	zero,4(r16)
10006724:	80000415 	stw	zero,16(r16)
10006728:	80000515 	stw	zero,20(r16)
1000672c:	80000615 	stw	zero,24(r16)
10006730:	01800204 	movi	r6,8
10006734:	000b883a 	mov	r5,zero
10006738:	81001704 	addi	r4,r16,92
1000673c:	00080ac0 	call	100080ac <memset>
10006740:	8005883a 	mov	r2,r16
10006744:	80000c15 	stw	zero,48(r16)
10006748:	80000d15 	stw	zero,52(r16)
1000674c:	80001115 	stw	zero,68(r16)
10006750:	80001215 	stw	zero,72(r16)
10006754:	dfc00417 	ldw	ra,16(sp)
10006758:	dcc00317 	ldw	r19,12(sp)
1000675c:	dc800217 	ldw	r18,8(sp)
10006760:	dc400117 	ldw	r17,4(sp)
10006764:	dc000017 	ldw	r16,0(sp)
10006768:	dec00504 	addi	sp,sp,20
1000676c:	f800283a 	ret
10006770:	01400104 	movi	r5,4
10006774:	9809883a 	mov	r4,r19
10006778:	00066040 	call	10006604 <__sfmoreglue>
1000677c:	90800015 	stw	r2,0(r18)
10006780:	103fde1e 	bne	r2,zero,100066fc <__alt_data_end+0xf80066fc>
10006784:	00800304 	movi	r2,12
10006788:	98800015 	stw	r2,0(r19)
1000678c:	0005883a 	mov	r2,zero
10006790:	003ff006 	br	10006754 <__alt_data_end+0xf8006754>

10006794 <_cleanup>:
10006794:	00840074 	movhi	r2,4097
10006798:	108fc604 	addi	r2,r2,16152
1000679c:	11000017 	ldw	r4,0(r2)
100067a0:	01440074 	movhi	r5,4097
100067a4:	296cd604 	addi	r5,r5,-19624
100067a8:	00071bc1 	jmpi	100071bc <_fwalk_reent>

100067ac <__sinit>:
100067ac:	20800e17 	ldw	r2,56(r4)
100067b0:	10000126 	beq	r2,zero,100067b8 <__sinit+0xc>
100067b4:	f800283a 	ret
100067b8:	00064601 	jmpi	10006460 <__sinit.part.1>

100067bc <__sfp_lock_acquire>:
100067bc:	f800283a 	ret

100067c0 <__sfp_lock_release>:
100067c0:	f800283a 	ret

100067c4 <__sinit_lock_acquire>:
100067c4:	f800283a 	ret

100067c8 <__sinit_lock_release>:
100067c8:	f800283a 	ret

100067cc <__fp_lock_all>:
100067cc:	00840074 	movhi	r2,4097
100067d0:	108fc704 	addi	r2,r2,16156
100067d4:	11000017 	ldw	r4,0(r2)
100067d8:	01440034 	movhi	r5,4096
100067dc:	29597f04 	addi	r5,r5,26108
100067e0:	00070f81 	jmpi	100070f8 <_fwalk>

100067e4 <__fp_unlock_all>:
100067e4:	00840074 	movhi	r2,4097
100067e8:	108fc704 	addi	r2,r2,16156
100067ec:	11000017 	ldw	r4,0(r2)
100067f0:	01440034 	movhi	r5,4096
100067f4:	29591304 	addi	r5,r5,25676
100067f8:	00070f81 	jmpi	100070f8 <_fwalk>

100067fc <_malloc_trim_r>:
100067fc:	defffb04 	addi	sp,sp,-20
10006800:	dcc00315 	stw	r19,12(sp)
10006804:	04c40074 	movhi	r19,4097
10006808:	dc800215 	stw	r18,8(sp)
1000680c:	dc400115 	stw	r17,4(sp)
10006810:	dc000015 	stw	r16,0(sp)
10006814:	dfc00415 	stw	ra,16(sp)
10006818:	2821883a 	mov	r16,r5
1000681c:	9cca4204 	addi	r19,r19,10504
10006820:	2025883a 	mov	r18,r4
10006824:	000f73c0 	call	1000f73c <__malloc_lock>
10006828:	98800217 	ldw	r2,8(r19)
1000682c:	14400117 	ldw	r17,4(r2)
10006830:	00bfff04 	movi	r2,-4
10006834:	88a2703a 	and	r17,r17,r2
10006838:	8c21c83a 	sub	r16,r17,r16
1000683c:	8403fbc4 	addi	r16,r16,4079
10006840:	8020d33a 	srli	r16,r16,12
10006844:	0083ffc4 	movi	r2,4095
10006848:	843fffc4 	addi	r16,r16,-1
1000684c:	8020933a 	slli	r16,r16,12
10006850:	1400060e 	bge	r2,r16,1000686c <_malloc_trim_r+0x70>
10006854:	000b883a 	mov	r5,zero
10006858:	9009883a 	mov	r4,r18
1000685c:	00098640 	call	10009864 <_sbrk_r>
10006860:	98c00217 	ldw	r3,8(r19)
10006864:	1c47883a 	add	r3,r3,r17
10006868:	10c00a26 	beq	r2,r3,10006894 <_malloc_trim_r+0x98>
1000686c:	9009883a 	mov	r4,r18
10006870:	000f7600 	call	1000f760 <__malloc_unlock>
10006874:	0005883a 	mov	r2,zero
10006878:	dfc00417 	ldw	ra,16(sp)
1000687c:	dcc00317 	ldw	r19,12(sp)
10006880:	dc800217 	ldw	r18,8(sp)
10006884:	dc400117 	ldw	r17,4(sp)
10006888:	dc000017 	ldw	r16,0(sp)
1000688c:	dec00504 	addi	sp,sp,20
10006890:	f800283a 	ret
10006894:	040bc83a 	sub	r5,zero,r16
10006898:	9009883a 	mov	r4,r18
1000689c:	00098640 	call	10009864 <_sbrk_r>
100068a0:	00ffffc4 	movi	r3,-1
100068a4:	10c00d26 	beq	r2,r3,100068dc <_malloc_trim_r+0xe0>
100068a8:	00c40074 	movhi	r3,4097
100068ac:	18d69f04 	addi	r3,r3,23164
100068b0:	18800017 	ldw	r2,0(r3)
100068b4:	99000217 	ldw	r4,8(r19)
100068b8:	8c23c83a 	sub	r17,r17,r16
100068bc:	8c400054 	ori	r17,r17,1
100068c0:	1421c83a 	sub	r16,r2,r16
100068c4:	24400115 	stw	r17,4(r4)
100068c8:	9009883a 	mov	r4,r18
100068cc:	1c000015 	stw	r16,0(r3)
100068d0:	000f7600 	call	1000f760 <__malloc_unlock>
100068d4:	00800044 	movi	r2,1
100068d8:	003fe706 	br	10006878 <__alt_data_end+0xf8006878>
100068dc:	000b883a 	mov	r5,zero
100068e0:	9009883a 	mov	r4,r18
100068e4:	00098640 	call	10009864 <_sbrk_r>
100068e8:	99000217 	ldw	r4,8(r19)
100068ec:	014003c4 	movi	r5,15
100068f0:	1107c83a 	sub	r3,r2,r4
100068f4:	28ffdd0e 	bge	r5,r3,1000686c <__alt_data_end+0xf800686c>
100068f8:	01440074 	movhi	r5,4097
100068fc:	294fc904 	addi	r5,r5,16164
10006900:	29400017 	ldw	r5,0(r5)
10006904:	18c00054 	ori	r3,r3,1
10006908:	20c00115 	stw	r3,4(r4)
1000690c:	00c40074 	movhi	r3,4097
10006910:	1145c83a 	sub	r2,r2,r5
10006914:	18d69f04 	addi	r3,r3,23164
10006918:	18800015 	stw	r2,0(r3)
1000691c:	003fd306 	br	1000686c <__alt_data_end+0xf800686c>

10006920 <_free_r>:
10006920:	28004126 	beq	r5,zero,10006a28 <_free_r+0x108>
10006924:	defffd04 	addi	sp,sp,-12
10006928:	dc400115 	stw	r17,4(sp)
1000692c:	dc000015 	stw	r16,0(sp)
10006930:	2023883a 	mov	r17,r4
10006934:	2821883a 	mov	r16,r5
10006938:	dfc00215 	stw	ra,8(sp)
1000693c:	000f73c0 	call	1000f73c <__malloc_lock>
10006940:	81ffff17 	ldw	r7,-4(r16)
10006944:	00bfff84 	movi	r2,-2
10006948:	01040074 	movhi	r4,4097
1000694c:	81bffe04 	addi	r6,r16,-8
10006950:	3884703a 	and	r2,r7,r2
10006954:	210a4204 	addi	r4,r4,10504
10006958:	308b883a 	add	r5,r6,r2
1000695c:	2a400117 	ldw	r9,4(r5)
10006960:	22000217 	ldw	r8,8(r4)
10006964:	00ffff04 	movi	r3,-4
10006968:	48c6703a 	and	r3,r9,r3
1000696c:	2a005726 	beq	r5,r8,10006acc <_free_r+0x1ac>
10006970:	28c00115 	stw	r3,4(r5)
10006974:	39c0004c 	andi	r7,r7,1
10006978:	3800091e 	bne	r7,zero,100069a0 <_free_r+0x80>
1000697c:	823ffe17 	ldw	r8,-8(r16)
10006980:	22400204 	addi	r9,r4,8
10006984:	320dc83a 	sub	r6,r6,r8
10006988:	31c00217 	ldw	r7,8(r6)
1000698c:	1205883a 	add	r2,r2,r8
10006990:	3a406526 	beq	r7,r9,10006b28 <_free_r+0x208>
10006994:	32000317 	ldw	r8,12(r6)
10006998:	3a000315 	stw	r8,12(r7)
1000699c:	41c00215 	stw	r7,8(r8)
100069a0:	28cf883a 	add	r7,r5,r3
100069a4:	39c00117 	ldw	r7,4(r7)
100069a8:	39c0004c 	andi	r7,r7,1
100069ac:	38003a26 	beq	r7,zero,10006a98 <_free_r+0x178>
100069b0:	10c00054 	ori	r3,r2,1
100069b4:	30c00115 	stw	r3,4(r6)
100069b8:	3087883a 	add	r3,r6,r2
100069bc:	18800015 	stw	r2,0(r3)
100069c0:	00c07fc4 	movi	r3,511
100069c4:	18801936 	bltu	r3,r2,10006a2c <_free_r+0x10c>
100069c8:	1004d0fa 	srli	r2,r2,3
100069cc:	01c00044 	movi	r7,1
100069d0:	21400117 	ldw	r5,4(r4)
100069d4:	10c00044 	addi	r3,r2,1
100069d8:	18c7883a 	add	r3,r3,r3
100069dc:	1005d0ba 	srai	r2,r2,2
100069e0:	18c7883a 	add	r3,r3,r3
100069e4:	18c7883a 	add	r3,r3,r3
100069e8:	1907883a 	add	r3,r3,r4
100069ec:	3884983a 	sll	r2,r7,r2
100069f0:	19c00017 	ldw	r7,0(r3)
100069f4:	1a3ffe04 	addi	r8,r3,-8
100069f8:	1144b03a 	or	r2,r2,r5
100069fc:	32000315 	stw	r8,12(r6)
10006a00:	31c00215 	stw	r7,8(r6)
10006a04:	20800115 	stw	r2,4(r4)
10006a08:	19800015 	stw	r6,0(r3)
10006a0c:	39800315 	stw	r6,12(r7)
10006a10:	8809883a 	mov	r4,r17
10006a14:	dfc00217 	ldw	ra,8(sp)
10006a18:	dc400117 	ldw	r17,4(sp)
10006a1c:	dc000017 	ldw	r16,0(sp)
10006a20:	dec00304 	addi	sp,sp,12
10006a24:	000f7601 	jmpi	1000f760 <__malloc_unlock>
10006a28:	f800283a 	ret
10006a2c:	100ad27a 	srli	r5,r2,9
10006a30:	00c00104 	movi	r3,4
10006a34:	19404a36 	bltu	r3,r5,10006b60 <_free_r+0x240>
10006a38:	100ad1ba 	srli	r5,r2,6
10006a3c:	28c00e44 	addi	r3,r5,57
10006a40:	18c7883a 	add	r3,r3,r3
10006a44:	29400e04 	addi	r5,r5,56
10006a48:	18c7883a 	add	r3,r3,r3
10006a4c:	18c7883a 	add	r3,r3,r3
10006a50:	1909883a 	add	r4,r3,r4
10006a54:	20c00017 	ldw	r3,0(r4)
10006a58:	01c40074 	movhi	r7,4097
10006a5c:	213ffe04 	addi	r4,r4,-8
10006a60:	39ca4204 	addi	r7,r7,10504
10006a64:	20c04426 	beq	r4,r3,10006b78 <_free_r+0x258>
10006a68:	01ffff04 	movi	r7,-4
10006a6c:	19400117 	ldw	r5,4(r3)
10006a70:	29ca703a 	and	r5,r5,r7
10006a74:	1140022e 	bgeu	r2,r5,10006a80 <_free_r+0x160>
10006a78:	18c00217 	ldw	r3,8(r3)
10006a7c:	20fffb1e 	bne	r4,r3,10006a6c <__alt_data_end+0xf8006a6c>
10006a80:	19000317 	ldw	r4,12(r3)
10006a84:	31000315 	stw	r4,12(r6)
10006a88:	30c00215 	stw	r3,8(r6)
10006a8c:	21800215 	stw	r6,8(r4)
10006a90:	19800315 	stw	r6,12(r3)
10006a94:	003fde06 	br	10006a10 <__alt_data_end+0xf8006a10>
10006a98:	29c00217 	ldw	r7,8(r5)
10006a9c:	10c5883a 	add	r2,r2,r3
10006aa0:	00c40074 	movhi	r3,4097
10006aa4:	18ca4404 	addi	r3,r3,10512
10006aa8:	38c03b26 	beq	r7,r3,10006b98 <_free_r+0x278>
10006aac:	2a000317 	ldw	r8,12(r5)
10006ab0:	11400054 	ori	r5,r2,1
10006ab4:	3087883a 	add	r3,r6,r2
10006ab8:	3a000315 	stw	r8,12(r7)
10006abc:	41c00215 	stw	r7,8(r8)
10006ac0:	31400115 	stw	r5,4(r6)
10006ac4:	18800015 	stw	r2,0(r3)
10006ac8:	003fbd06 	br	100069c0 <__alt_data_end+0xf80069c0>
10006acc:	39c0004c 	andi	r7,r7,1
10006ad0:	10c5883a 	add	r2,r2,r3
10006ad4:	3800071e 	bne	r7,zero,10006af4 <_free_r+0x1d4>
10006ad8:	81fffe17 	ldw	r7,-8(r16)
10006adc:	31cdc83a 	sub	r6,r6,r7
10006ae0:	30c00317 	ldw	r3,12(r6)
10006ae4:	31400217 	ldw	r5,8(r6)
10006ae8:	11c5883a 	add	r2,r2,r7
10006aec:	28c00315 	stw	r3,12(r5)
10006af0:	19400215 	stw	r5,8(r3)
10006af4:	10c00054 	ori	r3,r2,1
10006af8:	30c00115 	stw	r3,4(r6)
10006afc:	00c40074 	movhi	r3,4097
10006b00:	18cfca04 	addi	r3,r3,16168
10006b04:	18c00017 	ldw	r3,0(r3)
10006b08:	21800215 	stw	r6,8(r4)
10006b0c:	10ffc036 	bltu	r2,r3,10006a10 <__alt_data_end+0xf8006a10>
10006b10:	00840074 	movhi	r2,4097
10006b14:	10969704 	addi	r2,r2,23132
10006b18:	11400017 	ldw	r5,0(r2)
10006b1c:	8809883a 	mov	r4,r17
10006b20:	00067fc0 	call	100067fc <_malloc_trim_r>
10006b24:	003fba06 	br	10006a10 <__alt_data_end+0xf8006a10>
10006b28:	28c9883a 	add	r4,r5,r3
10006b2c:	21000117 	ldw	r4,4(r4)
10006b30:	2100004c 	andi	r4,r4,1
10006b34:	2000391e 	bne	r4,zero,10006c1c <_free_r+0x2fc>
10006b38:	29c00217 	ldw	r7,8(r5)
10006b3c:	29000317 	ldw	r4,12(r5)
10006b40:	1885883a 	add	r2,r3,r2
10006b44:	10c00054 	ori	r3,r2,1
10006b48:	39000315 	stw	r4,12(r7)
10006b4c:	21c00215 	stw	r7,8(r4)
10006b50:	30c00115 	stw	r3,4(r6)
10006b54:	308d883a 	add	r6,r6,r2
10006b58:	30800015 	stw	r2,0(r6)
10006b5c:	003fac06 	br	10006a10 <__alt_data_end+0xf8006a10>
10006b60:	00c00504 	movi	r3,20
10006b64:	19401536 	bltu	r3,r5,10006bbc <_free_r+0x29c>
10006b68:	28c01704 	addi	r3,r5,92
10006b6c:	18c7883a 	add	r3,r3,r3
10006b70:	294016c4 	addi	r5,r5,91
10006b74:	003fb406 	br	10006a48 <__alt_data_end+0xf8006a48>
10006b78:	280bd0ba 	srai	r5,r5,2
10006b7c:	00c00044 	movi	r3,1
10006b80:	38800117 	ldw	r2,4(r7)
10006b84:	194a983a 	sll	r5,r3,r5
10006b88:	2007883a 	mov	r3,r4
10006b8c:	2884b03a 	or	r2,r5,r2
10006b90:	38800115 	stw	r2,4(r7)
10006b94:	003fbb06 	br	10006a84 <__alt_data_end+0xf8006a84>
10006b98:	21800515 	stw	r6,20(r4)
10006b9c:	21800415 	stw	r6,16(r4)
10006ba0:	10c00054 	ori	r3,r2,1
10006ba4:	31c00315 	stw	r7,12(r6)
10006ba8:	31c00215 	stw	r7,8(r6)
10006bac:	30c00115 	stw	r3,4(r6)
10006bb0:	308d883a 	add	r6,r6,r2
10006bb4:	30800015 	stw	r2,0(r6)
10006bb8:	003f9506 	br	10006a10 <__alt_data_end+0xf8006a10>
10006bbc:	00c01504 	movi	r3,84
10006bc0:	19400536 	bltu	r3,r5,10006bd8 <_free_r+0x2b8>
10006bc4:	100ad33a 	srli	r5,r2,12
10006bc8:	28c01bc4 	addi	r3,r5,111
10006bcc:	18c7883a 	add	r3,r3,r3
10006bd0:	29401b84 	addi	r5,r5,110
10006bd4:	003f9c06 	br	10006a48 <__alt_data_end+0xf8006a48>
10006bd8:	00c05504 	movi	r3,340
10006bdc:	19400536 	bltu	r3,r5,10006bf4 <_free_r+0x2d4>
10006be0:	100ad3fa 	srli	r5,r2,15
10006be4:	28c01e04 	addi	r3,r5,120
10006be8:	18c7883a 	add	r3,r3,r3
10006bec:	29401dc4 	addi	r5,r5,119
10006bf0:	003f9506 	br	10006a48 <__alt_data_end+0xf8006a48>
10006bf4:	00c15504 	movi	r3,1364
10006bf8:	19400536 	bltu	r3,r5,10006c10 <_free_r+0x2f0>
10006bfc:	100ad4ba 	srli	r5,r2,18
10006c00:	28c01f44 	addi	r3,r5,125
10006c04:	18c7883a 	add	r3,r3,r3
10006c08:	29401f04 	addi	r5,r5,124
10006c0c:	003f8e06 	br	10006a48 <__alt_data_end+0xf8006a48>
10006c10:	00c03f84 	movi	r3,254
10006c14:	01401f84 	movi	r5,126
10006c18:	003f8b06 	br	10006a48 <__alt_data_end+0xf8006a48>
10006c1c:	10c00054 	ori	r3,r2,1
10006c20:	30c00115 	stw	r3,4(r6)
10006c24:	308d883a 	add	r6,r6,r2
10006c28:	30800015 	stw	r2,0(r6)
10006c2c:	003f7806 	br	10006a10 <__alt_data_end+0xf8006a10>

10006c30 <__sfvwrite_r>:
10006c30:	30800217 	ldw	r2,8(r6)
10006c34:	10006726 	beq	r2,zero,10006dd4 <__sfvwrite_r+0x1a4>
10006c38:	28c0030b 	ldhu	r3,12(r5)
10006c3c:	defff404 	addi	sp,sp,-48
10006c40:	dd400715 	stw	r21,28(sp)
10006c44:	dd000615 	stw	r20,24(sp)
10006c48:	dc000215 	stw	r16,8(sp)
10006c4c:	dfc00b15 	stw	ra,44(sp)
10006c50:	df000a15 	stw	fp,40(sp)
10006c54:	ddc00915 	stw	r23,36(sp)
10006c58:	dd800815 	stw	r22,32(sp)
10006c5c:	dcc00515 	stw	r19,20(sp)
10006c60:	dc800415 	stw	r18,16(sp)
10006c64:	dc400315 	stw	r17,12(sp)
10006c68:	1880020c 	andi	r2,r3,8
10006c6c:	2821883a 	mov	r16,r5
10006c70:	202b883a 	mov	r21,r4
10006c74:	3029883a 	mov	r20,r6
10006c78:	10002726 	beq	r2,zero,10006d18 <__sfvwrite_r+0xe8>
10006c7c:	28800417 	ldw	r2,16(r5)
10006c80:	10002526 	beq	r2,zero,10006d18 <__sfvwrite_r+0xe8>
10006c84:	1880008c 	andi	r2,r3,2
10006c88:	a4400017 	ldw	r17,0(r20)
10006c8c:	10002a26 	beq	r2,zero,10006d38 <__sfvwrite_r+0x108>
10006c90:	05a00034 	movhi	r22,32768
10006c94:	0027883a 	mov	r19,zero
10006c98:	0025883a 	mov	r18,zero
10006c9c:	b5bf0004 	addi	r22,r22,-1024
10006ca0:	980d883a 	mov	r6,r19
10006ca4:	a809883a 	mov	r4,r21
10006ca8:	90004626 	beq	r18,zero,10006dc4 <__sfvwrite_r+0x194>
10006cac:	900f883a 	mov	r7,r18
10006cb0:	b480022e 	bgeu	r22,r18,10006cbc <__sfvwrite_r+0x8c>
10006cb4:	01e00034 	movhi	r7,32768
10006cb8:	39ff0004 	addi	r7,r7,-1024
10006cbc:	80800917 	ldw	r2,36(r16)
10006cc0:	81400717 	ldw	r5,28(r16)
10006cc4:	103ee83a 	callr	r2
10006cc8:	00805a0e 	bge	zero,r2,10006e34 <__sfvwrite_r+0x204>
10006ccc:	a0c00217 	ldw	r3,8(r20)
10006cd0:	98a7883a 	add	r19,r19,r2
10006cd4:	90a5c83a 	sub	r18,r18,r2
10006cd8:	1885c83a 	sub	r2,r3,r2
10006cdc:	a0800215 	stw	r2,8(r20)
10006ce0:	103fef1e 	bne	r2,zero,10006ca0 <__alt_data_end+0xf8006ca0>
10006ce4:	0005883a 	mov	r2,zero
10006ce8:	dfc00b17 	ldw	ra,44(sp)
10006cec:	df000a17 	ldw	fp,40(sp)
10006cf0:	ddc00917 	ldw	r23,36(sp)
10006cf4:	dd800817 	ldw	r22,32(sp)
10006cf8:	dd400717 	ldw	r21,28(sp)
10006cfc:	dd000617 	ldw	r20,24(sp)
10006d00:	dcc00517 	ldw	r19,20(sp)
10006d04:	dc800417 	ldw	r18,16(sp)
10006d08:	dc400317 	ldw	r17,12(sp)
10006d0c:	dc000217 	ldw	r16,8(sp)
10006d10:	dec00c04 	addi	sp,sp,48
10006d14:	f800283a 	ret
10006d18:	800b883a 	mov	r5,r16
10006d1c:	a809883a 	mov	r4,r21
10006d20:	00047a00 	call	100047a0 <__swsetup_r>
10006d24:	1000ee1e 	bne	r2,zero,100070e0 <__sfvwrite_r+0x4b0>
10006d28:	80c0030b 	ldhu	r3,12(r16)
10006d2c:	a4400017 	ldw	r17,0(r20)
10006d30:	1880008c 	andi	r2,r3,2
10006d34:	103fd61e 	bne	r2,zero,10006c90 <__alt_data_end+0xf8006c90>
10006d38:	1880004c 	andi	r2,r3,1
10006d3c:	1000421e 	bne	r2,zero,10006e48 <__sfvwrite_r+0x218>
10006d40:	0039883a 	mov	fp,zero
10006d44:	0025883a 	mov	r18,zero
10006d48:	90001a26 	beq	r18,zero,10006db4 <__sfvwrite_r+0x184>
10006d4c:	1880800c 	andi	r2,r3,512
10006d50:	84c00217 	ldw	r19,8(r16)
10006d54:	10002126 	beq	r2,zero,10006ddc <__sfvwrite_r+0x1ac>
10006d58:	982f883a 	mov	r23,r19
10006d5c:	94c09636 	bltu	r18,r19,10006fb8 <__sfvwrite_r+0x388>
10006d60:	1881200c 	andi	r2,r3,1152
10006d64:	1000a11e 	bne	r2,zero,10006fec <__sfvwrite_r+0x3bc>
10006d68:	81000017 	ldw	r4,0(r16)
10006d6c:	b80d883a 	mov	r6,r23
10006d70:	e00b883a 	mov	r5,fp
10006d74:	0007f500 	call	10007f50 <memmove>
10006d78:	80c00217 	ldw	r3,8(r16)
10006d7c:	81000017 	ldw	r4,0(r16)
10006d80:	9005883a 	mov	r2,r18
10006d84:	1ce7c83a 	sub	r19,r3,r19
10006d88:	25cf883a 	add	r7,r4,r23
10006d8c:	84c00215 	stw	r19,8(r16)
10006d90:	81c00015 	stw	r7,0(r16)
10006d94:	a0c00217 	ldw	r3,8(r20)
10006d98:	e0b9883a 	add	fp,fp,r2
10006d9c:	90a5c83a 	sub	r18,r18,r2
10006da0:	18a7c83a 	sub	r19,r3,r2
10006da4:	a4c00215 	stw	r19,8(r20)
10006da8:	983fce26 	beq	r19,zero,10006ce4 <__alt_data_end+0xf8006ce4>
10006dac:	80c0030b 	ldhu	r3,12(r16)
10006db0:	903fe61e 	bne	r18,zero,10006d4c <__alt_data_end+0xf8006d4c>
10006db4:	8f000017 	ldw	fp,0(r17)
10006db8:	8c800117 	ldw	r18,4(r17)
10006dbc:	8c400204 	addi	r17,r17,8
10006dc0:	003fe106 	br	10006d48 <__alt_data_end+0xf8006d48>
10006dc4:	8cc00017 	ldw	r19,0(r17)
10006dc8:	8c800117 	ldw	r18,4(r17)
10006dcc:	8c400204 	addi	r17,r17,8
10006dd0:	003fb306 	br	10006ca0 <__alt_data_end+0xf8006ca0>
10006dd4:	0005883a 	mov	r2,zero
10006dd8:	f800283a 	ret
10006ddc:	81000017 	ldw	r4,0(r16)
10006de0:	80800417 	ldw	r2,16(r16)
10006de4:	11005a36 	bltu	r2,r4,10006f50 <__sfvwrite_r+0x320>
10006de8:	85c00517 	ldw	r23,20(r16)
10006dec:	95c05836 	bltu	r18,r23,10006f50 <__sfvwrite_r+0x320>
10006df0:	00a00034 	movhi	r2,32768
10006df4:	10bfffc4 	addi	r2,r2,-1
10006df8:	9009883a 	mov	r4,r18
10006dfc:	1480012e 	bgeu	r2,r18,10006e04 <__sfvwrite_r+0x1d4>
10006e00:	1009883a 	mov	r4,r2
10006e04:	b80b883a 	mov	r5,r23
10006e08:	000c6d40 	call	1000c6d4 <__divsi3>
10006e0c:	b80b883a 	mov	r5,r23
10006e10:	1009883a 	mov	r4,r2
10006e14:	000c8880 	call	1000c888 <__mulsi3>
10006e18:	81400717 	ldw	r5,28(r16)
10006e1c:	80c00917 	ldw	r3,36(r16)
10006e20:	100f883a 	mov	r7,r2
10006e24:	e00d883a 	mov	r6,fp
10006e28:	a809883a 	mov	r4,r21
10006e2c:	183ee83a 	callr	r3
10006e30:	00bfd816 	blt	zero,r2,10006d94 <__alt_data_end+0xf8006d94>
10006e34:	8080030b 	ldhu	r2,12(r16)
10006e38:	10801014 	ori	r2,r2,64
10006e3c:	8080030d 	sth	r2,12(r16)
10006e40:	00bfffc4 	movi	r2,-1
10006e44:	003fa806 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006e48:	0027883a 	mov	r19,zero
10006e4c:	0011883a 	mov	r8,zero
10006e50:	0039883a 	mov	fp,zero
10006e54:	0025883a 	mov	r18,zero
10006e58:	90001f26 	beq	r18,zero,10006ed8 <__sfvwrite_r+0x2a8>
10006e5c:	40005a26 	beq	r8,zero,10006fc8 <__sfvwrite_r+0x398>
10006e60:	982d883a 	mov	r22,r19
10006e64:	94c0012e 	bgeu	r18,r19,10006e6c <__sfvwrite_r+0x23c>
10006e68:	902d883a 	mov	r22,r18
10006e6c:	81000017 	ldw	r4,0(r16)
10006e70:	80800417 	ldw	r2,16(r16)
10006e74:	b02f883a 	mov	r23,r22
10006e78:	81c00517 	ldw	r7,20(r16)
10006e7c:	1100032e 	bgeu	r2,r4,10006e8c <__sfvwrite_r+0x25c>
10006e80:	80c00217 	ldw	r3,8(r16)
10006e84:	38c7883a 	add	r3,r7,r3
10006e88:	1d801816 	blt	r3,r22,10006eec <__sfvwrite_r+0x2bc>
10006e8c:	b1c03e16 	blt	r22,r7,10006f88 <__sfvwrite_r+0x358>
10006e90:	80800917 	ldw	r2,36(r16)
10006e94:	81400717 	ldw	r5,28(r16)
10006e98:	e00d883a 	mov	r6,fp
10006e9c:	da000115 	stw	r8,4(sp)
10006ea0:	a809883a 	mov	r4,r21
10006ea4:	103ee83a 	callr	r2
10006ea8:	102f883a 	mov	r23,r2
10006eac:	da000117 	ldw	r8,4(sp)
10006eb0:	00bfe00e 	bge	zero,r2,10006e34 <__alt_data_end+0xf8006e34>
10006eb4:	9de7c83a 	sub	r19,r19,r23
10006eb8:	98001f26 	beq	r19,zero,10006f38 <__sfvwrite_r+0x308>
10006ebc:	a0800217 	ldw	r2,8(r20)
10006ec0:	e5f9883a 	add	fp,fp,r23
10006ec4:	95e5c83a 	sub	r18,r18,r23
10006ec8:	15efc83a 	sub	r23,r2,r23
10006ecc:	a5c00215 	stw	r23,8(r20)
10006ed0:	b83f8426 	beq	r23,zero,10006ce4 <__alt_data_end+0xf8006ce4>
10006ed4:	903fe11e 	bne	r18,zero,10006e5c <__alt_data_end+0xf8006e5c>
10006ed8:	8f000017 	ldw	fp,0(r17)
10006edc:	8c800117 	ldw	r18,4(r17)
10006ee0:	0011883a 	mov	r8,zero
10006ee4:	8c400204 	addi	r17,r17,8
10006ee8:	003fdb06 	br	10006e58 <__alt_data_end+0xf8006e58>
10006eec:	180d883a 	mov	r6,r3
10006ef0:	e00b883a 	mov	r5,fp
10006ef4:	da000115 	stw	r8,4(sp)
10006ef8:	d8c00015 	stw	r3,0(sp)
10006efc:	0007f500 	call	10007f50 <memmove>
10006f00:	d8c00017 	ldw	r3,0(sp)
10006f04:	80800017 	ldw	r2,0(r16)
10006f08:	800b883a 	mov	r5,r16
10006f0c:	a809883a 	mov	r4,r21
10006f10:	10c5883a 	add	r2,r2,r3
10006f14:	80800015 	stw	r2,0(r16)
10006f18:	d8c00015 	stw	r3,0(sp)
10006f1c:	00063c00 	call	100063c0 <_fflush_r>
10006f20:	d8c00017 	ldw	r3,0(sp)
10006f24:	da000117 	ldw	r8,4(sp)
10006f28:	103fc21e 	bne	r2,zero,10006e34 <__alt_data_end+0xf8006e34>
10006f2c:	182f883a 	mov	r23,r3
10006f30:	9de7c83a 	sub	r19,r19,r23
10006f34:	983fe11e 	bne	r19,zero,10006ebc <__alt_data_end+0xf8006ebc>
10006f38:	800b883a 	mov	r5,r16
10006f3c:	a809883a 	mov	r4,r21
10006f40:	00063c00 	call	100063c0 <_fflush_r>
10006f44:	103fbb1e 	bne	r2,zero,10006e34 <__alt_data_end+0xf8006e34>
10006f48:	0011883a 	mov	r8,zero
10006f4c:	003fdb06 	br	10006ebc <__alt_data_end+0xf8006ebc>
10006f50:	94c0012e 	bgeu	r18,r19,10006f58 <__sfvwrite_r+0x328>
10006f54:	9027883a 	mov	r19,r18
10006f58:	980d883a 	mov	r6,r19
10006f5c:	e00b883a 	mov	r5,fp
10006f60:	0007f500 	call	10007f50 <memmove>
10006f64:	80800217 	ldw	r2,8(r16)
10006f68:	80c00017 	ldw	r3,0(r16)
10006f6c:	14c5c83a 	sub	r2,r2,r19
10006f70:	1cc7883a 	add	r3,r3,r19
10006f74:	80800215 	stw	r2,8(r16)
10006f78:	80c00015 	stw	r3,0(r16)
10006f7c:	10004326 	beq	r2,zero,1000708c <__sfvwrite_r+0x45c>
10006f80:	9805883a 	mov	r2,r19
10006f84:	003f8306 	br	10006d94 <__alt_data_end+0xf8006d94>
10006f88:	b00d883a 	mov	r6,r22
10006f8c:	e00b883a 	mov	r5,fp
10006f90:	da000115 	stw	r8,4(sp)
10006f94:	0007f500 	call	10007f50 <memmove>
10006f98:	80800217 	ldw	r2,8(r16)
10006f9c:	80c00017 	ldw	r3,0(r16)
10006fa0:	da000117 	ldw	r8,4(sp)
10006fa4:	1585c83a 	sub	r2,r2,r22
10006fa8:	1dad883a 	add	r22,r3,r22
10006fac:	80800215 	stw	r2,8(r16)
10006fb0:	85800015 	stw	r22,0(r16)
10006fb4:	003fbf06 	br	10006eb4 <__alt_data_end+0xf8006eb4>
10006fb8:	81000017 	ldw	r4,0(r16)
10006fbc:	9027883a 	mov	r19,r18
10006fc0:	902f883a 	mov	r23,r18
10006fc4:	003f6906 	br	10006d6c <__alt_data_end+0xf8006d6c>
10006fc8:	900d883a 	mov	r6,r18
10006fcc:	01400284 	movi	r5,10
10006fd0:	e009883a 	mov	r4,fp
10006fd4:	0007d240 	call	10007d24 <memchr>
10006fd8:	10003e26 	beq	r2,zero,100070d4 <__sfvwrite_r+0x4a4>
10006fdc:	10800044 	addi	r2,r2,1
10006fe0:	1727c83a 	sub	r19,r2,fp
10006fe4:	02000044 	movi	r8,1
10006fe8:	003f9d06 	br	10006e60 <__alt_data_end+0xf8006e60>
10006fec:	80800517 	ldw	r2,20(r16)
10006ff0:	81400417 	ldw	r5,16(r16)
10006ff4:	81c00017 	ldw	r7,0(r16)
10006ff8:	10a7883a 	add	r19,r2,r2
10006ffc:	9885883a 	add	r2,r19,r2
10007000:	1026d7fa 	srli	r19,r2,31
10007004:	396dc83a 	sub	r22,r7,r5
10007008:	b1000044 	addi	r4,r22,1
1000700c:	9885883a 	add	r2,r19,r2
10007010:	1027d07a 	srai	r19,r2,1
10007014:	2485883a 	add	r2,r4,r18
10007018:	980d883a 	mov	r6,r19
1000701c:	9880022e 	bgeu	r19,r2,10007028 <__sfvwrite_r+0x3f8>
10007020:	1027883a 	mov	r19,r2
10007024:	100d883a 	mov	r6,r2
10007028:	18c1000c 	andi	r3,r3,1024
1000702c:	18001c26 	beq	r3,zero,100070a0 <__sfvwrite_r+0x470>
10007030:	300b883a 	mov	r5,r6
10007034:	a809883a 	mov	r4,r21
10007038:	00075180 	call	10007518 <_malloc_r>
1000703c:	102f883a 	mov	r23,r2
10007040:	10002926 	beq	r2,zero,100070e8 <__sfvwrite_r+0x4b8>
10007044:	81400417 	ldw	r5,16(r16)
10007048:	b00d883a 	mov	r6,r22
1000704c:	1009883a 	mov	r4,r2
10007050:	0007e080 	call	10007e08 <memcpy>
10007054:	8080030b 	ldhu	r2,12(r16)
10007058:	00fedfc4 	movi	r3,-1153
1000705c:	10c4703a 	and	r2,r2,r3
10007060:	10802014 	ori	r2,r2,128
10007064:	8080030d 	sth	r2,12(r16)
10007068:	bd89883a 	add	r4,r23,r22
1000706c:	9d8fc83a 	sub	r7,r19,r22
10007070:	85c00415 	stw	r23,16(r16)
10007074:	84c00515 	stw	r19,20(r16)
10007078:	81000015 	stw	r4,0(r16)
1000707c:	9027883a 	mov	r19,r18
10007080:	81c00215 	stw	r7,8(r16)
10007084:	902f883a 	mov	r23,r18
10007088:	003f3806 	br	10006d6c <__alt_data_end+0xf8006d6c>
1000708c:	800b883a 	mov	r5,r16
10007090:	a809883a 	mov	r4,r21
10007094:	00063c00 	call	100063c0 <_fflush_r>
10007098:	103fb926 	beq	r2,zero,10006f80 <__alt_data_end+0xf8006f80>
1000709c:	003f6506 	br	10006e34 <__alt_data_end+0xf8006e34>
100070a0:	a809883a 	mov	r4,r21
100070a4:	000928c0 	call	1000928c <_realloc_r>
100070a8:	102f883a 	mov	r23,r2
100070ac:	103fee1e 	bne	r2,zero,10007068 <__alt_data_end+0xf8007068>
100070b0:	81400417 	ldw	r5,16(r16)
100070b4:	a809883a 	mov	r4,r21
100070b8:	00069200 	call	10006920 <_free_r>
100070bc:	8080030b 	ldhu	r2,12(r16)
100070c0:	00ffdfc4 	movi	r3,-129
100070c4:	1884703a 	and	r2,r3,r2
100070c8:	00c00304 	movi	r3,12
100070cc:	a8c00015 	stw	r3,0(r21)
100070d0:	003f5906 	br	10006e38 <__alt_data_end+0xf8006e38>
100070d4:	94c00044 	addi	r19,r18,1
100070d8:	02000044 	movi	r8,1
100070dc:	003f6006 	br	10006e60 <__alt_data_end+0xf8006e60>
100070e0:	00bfffc4 	movi	r2,-1
100070e4:	003f0006 	br	10006ce8 <__alt_data_end+0xf8006ce8>
100070e8:	00800304 	movi	r2,12
100070ec:	a8800015 	stw	r2,0(r21)
100070f0:	8080030b 	ldhu	r2,12(r16)
100070f4:	003f5006 	br	10006e38 <__alt_data_end+0xf8006e38>

100070f8 <_fwalk>:
100070f8:	defff704 	addi	sp,sp,-36
100070fc:	dd000415 	stw	r20,16(sp)
10007100:	dfc00815 	stw	ra,32(sp)
10007104:	ddc00715 	stw	r23,28(sp)
10007108:	dd800615 	stw	r22,24(sp)
1000710c:	dd400515 	stw	r21,20(sp)
10007110:	dcc00315 	stw	r19,12(sp)
10007114:	dc800215 	stw	r18,8(sp)
10007118:	dc400115 	stw	r17,4(sp)
1000711c:	dc000015 	stw	r16,0(sp)
10007120:	2500b804 	addi	r20,r4,736
10007124:	a0002326 	beq	r20,zero,100071b4 <_fwalk+0xbc>
10007128:	282b883a 	mov	r21,r5
1000712c:	002f883a 	mov	r23,zero
10007130:	05800044 	movi	r22,1
10007134:	04ffffc4 	movi	r19,-1
10007138:	a4400117 	ldw	r17,4(r20)
1000713c:	a4800217 	ldw	r18,8(r20)
10007140:	8c7fffc4 	addi	r17,r17,-1
10007144:	88000d16 	blt	r17,zero,1000717c <_fwalk+0x84>
10007148:	94000304 	addi	r16,r18,12
1000714c:	94800384 	addi	r18,r18,14
10007150:	8080000b 	ldhu	r2,0(r16)
10007154:	8c7fffc4 	addi	r17,r17,-1
10007158:	813ffd04 	addi	r4,r16,-12
1000715c:	b080042e 	bgeu	r22,r2,10007170 <_fwalk+0x78>
10007160:	9080000f 	ldh	r2,0(r18)
10007164:	14c00226 	beq	r2,r19,10007170 <_fwalk+0x78>
10007168:	a83ee83a 	callr	r21
1000716c:	b8aeb03a 	or	r23,r23,r2
10007170:	84001a04 	addi	r16,r16,104
10007174:	94801a04 	addi	r18,r18,104
10007178:	8cfff51e 	bne	r17,r19,10007150 <__alt_data_end+0xf8007150>
1000717c:	a5000017 	ldw	r20,0(r20)
10007180:	a03fed1e 	bne	r20,zero,10007138 <__alt_data_end+0xf8007138>
10007184:	b805883a 	mov	r2,r23
10007188:	dfc00817 	ldw	ra,32(sp)
1000718c:	ddc00717 	ldw	r23,28(sp)
10007190:	dd800617 	ldw	r22,24(sp)
10007194:	dd400517 	ldw	r21,20(sp)
10007198:	dd000417 	ldw	r20,16(sp)
1000719c:	dcc00317 	ldw	r19,12(sp)
100071a0:	dc800217 	ldw	r18,8(sp)
100071a4:	dc400117 	ldw	r17,4(sp)
100071a8:	dc000017 	ldw	r16,0(sp)
100071ac:	dec00904 	addi	sp,sp,36
100071b0:	f800283a 	ret
100071b4:	002f883a 	mov	r23,zero
100071b8:	003ff206 	br	10007184 <__alt_data_end+0xf8007184>

100071bc <_fwalk_reent>:
100071bc:	defff704 	addi	sp,sp,-36
100071c0:	dd000415 	stw	r20,16(sp)
100071c4:	dfc00815 	stw	ra,32(sp)
100071c8:	ddc00715 	stw	r23,28(sp)
100071cc:	dd800615 	stw	r22,24(sp)
100071d0:	dd400515 	stw	r21,20(sp)
100071d4:	dcc00315 	stw	r19,12(sp)
100071d8:	dc800215 	stw	r18,8(sp)
100071dc:	dc400115 	stw	r17,4(sp)
100071e0:	dc000015 	stw	r16,0(sp)
100071e4:	2500b804 	addi	r20,r4,736
100071e8:	a0002326 	beq	r20,zero,10007278 <_fwalk_reent+0xbc>
100071ec:	282b883a 	mov	r21,r5
100071f0:	2027883a 	mov	r19,r4
100071f4:	002f883a 	mov	r23,zero
100071f8:	05800044 	movi	r22,1
100071fc:	04bfffc4 	movi	r18,-1
10007200:	a4400117 	ldw	r17,4(r20)
10007204:	a4000217 	ldw	r16,8(r20)
10007208:	8c7fffc4 	addi	r17,r17,-1
1000720c:	88000c16 	blt	r17,zero,10007240 <_fwalk_reent+0x84>
10007210:	84000304 	addi	r16,r16,12
10007214:	8080000b 	ldhu	r2,0(r16)
10007218:	8c7fffc4 	addi	r17,r17,-1
1000721c:	817ffd04 	addi	r5,r16,-12
10007220:	b080052e 	bgeu	r22,r2,10007238 <_fwalk_reent+0x7c>
10007224:	8080008f 	ldh	r2,2(r16)
10007228:	9809883a 	mov	r4,r19
1000722c:	14800226 	beq	r2,r18,10007238 <_fwalk_reent+0x7c>
10007230:	a83ee83a 	callr	r21
10007234:	b8aeb03a 	or	r23,r23,r2
10007238:	84001a04 	addi	r16,r16,104
1000723c:	8cbff51e 	bne	r17,r18,10007214 <__alt_data_end+0xf8007214>
10007240:	a5000017 	ldw	r20,0(r20)
10007244:	a03fee1e 	bne	r20,zero,10007200 <__alt_data_end+0xf8007200>
10007248:	b805883a 	mov	r2,r23
1000724c:	dfc00817 	ldw	ra,32(sp)
10007250:	ddc00717 	ldw	r23,28(sp)
10007254:	dd800617 	ldw	r22,24(sp)
10007258:	dd400517 	ldw	r21,20(sp)
1000725c:	dd000417 	ldw	r20,16(sp)
10007260:	dcc00317 	ldw	r19,12(sp)
10007264:	dc800217 	ldw	r18,8(sp)
10007268:	dc400117 	ldw	r17,4(sp)
1000726c:	dc000017 	ldw	r16,0(sp)
10007270:	dec00904 	addi	sp,sp,36
10007274:	f800283a 	ret
10007278:	002f883a 	mov	r23,zero
1000727c:	003ff206 	br	10007248 <__alt_data_end+0xf8007248>

10007280 <_setlocale_r>:
10007280:	30001b26 	beq	r6,zero,100072f0 <_setlocale_r+0x70>
10007284:	01440074 	movhi	r5,4097
10007288:	defffe04 	addi	sp,sp,-8
1000728c:	29487a04 	addi	r5,r5,8680
10007290:	3009883a 	mov	r4,r6
10007294:	dc000015 	stw	r16,0(sp)
10007298:	dfc00115 	stw	ra,4(sp)
1000729c:	3021883a 	mov	r16,r6
100072a0:	00099f40 	call	100099f4 <strcmp>
100072a4:	1000061e 	bne	r2,zero,100072c0 <_setlocale_r+0x40>
100072a8:	00840074 	movhi	r2,4097
100072ac:	10887904 	addi	r2,r2,8676
100072b0:	dfc00117 	ldw	ra,4(sp)
100072b4:	dc000017 	ldw	r16,0(sp)
100072b8:	dec00204 	addi	sp,sp,8
100072bc:	f800283a 	ret
100072c0:	01440074 	movhi	r5,4097
100072c4:	29487904 	addi	r5,r5,8676
100072c8:	8009883a 	mov	r4,r16
100072cc:	00099f40 	call	100099f4 <strcmp>
100072d0:	103ff526 	beq	r2,zero,100072a8 <__alt_data_end+0xf80072a8>
100072d4:	01440074 	movhi	r5,4097
100072d8:	29486404 	addi	r5,r5,8592
100072dc:	8009883a 	mov	r4,r16
100072e0:	00099f40 	call	100099f4 <strcmp>
100072e4:	103ff026 	beq	r2,zero,100072a8 <__alt_data_end+0xf80072a8>
100072e8:	0005883a 	mov	r2,zero
100072ec:	003ff006 	br	100072b0 <__alt_data_end+0xf80072b0>
100072f0:	00840074 	movhi	r2,4097
100072f4:	10887904 	addi	r2,r2,8676
100072f8:	f800283a 	ret

100072fc <__locale_charset>:
100072fc:	00840074 	movhi	r2,4097
10007300:	108a2c04 	addi	r2,r2,10416
10007304:	f800283a 	ret

10007308 <__locale_mb_cur_max>:
10007308:	00840074 	movhi	r2,4097
1000730c:	108fc804 	addi	r2,r2,16160
10007310:	10800017 	ldw	r2,0(r2)
10007314:	f800283a 	ret

10007318 <__locale_msgcharset>:
10007318:	00840074 	movhi	r2,4097
1000731c:	108a2404 	addi	r2,r2,10384
10007320:	f800283a 	ret

10007324 <__locale_cjk_lang>:
10007324:	0005883a 	mov	r2,zero
10007328:	f800283a 	ret

1000732c <_localeconv_r>:
1000732c:	00840074 	movhi	r2,4097
10007330:	108a3404 	addi	r2,r2,10448
10007334:	f800283a 	ret

10007338 <setlocale>:
10007338:	00840074 	movhi	r2,4097
1000733c:	108fc704 	addi	r2,r2,16156
10007340:	280d883a 	mov	r6,r5
10007344:	200b883a 	mov	r5,r4
10007348:	11000017 	ldw	r4,0(r2)
1000734c:	00072801 	jmpi	10007280 <_setlocale_r>

10007350 <localeconv>:
10007350:	00840074 	movhi	r2,4097
10007354:	108a3404 	addi	r2,r2,10448
10007358:	f800283a 	ret

1000735c <__smakebuf_r>:
1000735c:	2880030b 	ldhu	r2,12(r5)
10007360:	10c0008c 	andi	r3,r2,2
10007364:	1800411e 	bne	r3,zero,1000746c <__smakebuf_r+0x110>
10007368:	deffec04 	addi	sp,sp,-80
1000736c:	dc000f15 	stw	r16,60(sp)
10007370:	2821883a 	mov	r16,r5
10007374:	2940038f 	ldh	r5,14(r5)
10007378:	dc401015 	stw	r17,64(sp)
1000737c:	dfc01315 	stw	ra,76(sp)
10007380:	dcc01215 	stw	r19,72(sp)
10007384:	dc801115 	stw	r18,68(sp)
10007388:	2023883a 	mov	r17,r4
1000738c:	28001c16 	blt	r5,zero,10007400 <__smakebuf_r+0xa4>
10007390:	d80d883a 	mov	r6,sp
10007394:	000b6640 	call	1000b664 <_fstat_r>
10007398:	10001816 	blt	r2,zero,100073fc <__smakebuf_r+0xa0>
1000739c:	d8800117 	ldw	r2,4(sp)
100073a0:	00e00014 	movui	r3,32768
100073a4:	10bc000c 	andi	r2,r2,61440
100073a8:	14c80020 	cmpeqi	r19,r2,8192
100073ac:	10c03726 	beq	r2,r3,1000748c <__smakebuf_r+0x130>
100073b0:	80c0030b 	ldhu	r3,12(r16)
100073b4:	18c20014 	ori	r3,r3,2048
100073b8:	80c0030d 	sth	r3,12(r16)
100073bc:	00c80004 	movi	r3,8192
100073c0:	10c0521e 	bne	r2,r3,1000750c <__smakebuf_r+0x1b0>
100073c4:	8140038f 	ldh	r5,14(r16)
100073c8:	8809883a 	mov	r4,r17
100073cc:	000b6c00 	call	1000b6c0 <_isatty_r>
100073d0:	10004c26 	beq	r2,zero,10007504 <__smakebuf_r+0x1a8>
100073d4:	8080030b 	ldhu	r2,12(r16)
100073d8:	80c010c4 	addi	r3,r16,67
100073dc:	80c00015 	stw	r3,0(r16)
100073e0:	10800054 	ori	r2,r2,1
100073e4:	8080030d 	sth	r2,12(r16)
100073e8:	00800044 	movi	r2,1
100073ec:	80c00415 	stw	r3,16(r16)
100073f0:	80800515 	stw	r2,20(r16)
100073f4:	04810004 	movi	r18,1024
100073f8:	00000706 	br	10007418 <__smakebuf_r+0xbc>
100073fc:	8080030b 	ldhu	r2,12(r16)
10007400:	10c0200c 	andi	r3,r2,128
10007404:	18001f1e 	bne	r3,zero,10007484 <__smakebuf_r+0x128>
10007408:	04810004 	movi	r18,1024
1000740c:	10820014 	ori	r2,r2,2048
10007410:	8080030d 	sth	r2,12(r16)
10007414:	0027883a 	mov	r19,zero
10007418:	900b883a 	mov	r5,r18
1000741c:	8809883a 	mov	r4,r17
10007420:	00075180 	call	10007518 <_malloc_r>
10007424:	10002c26 	beq	r2,zero,100074d8 <__smakebuf_r+0x17c>
10007428:	80c0030b 	ldhu	r3,12(r16)
1000742c:	01040034 	movhi	r4,4096
10007430:	21191504 	addi	r4,r4,25684
10007434:	89000f15 	stw	r4,60(r17)
10007438:	18c02014 	ori	r3,r3,128
1000743c:	80c0030d 	sth	r3,12(r16)
10007440:	80800015 	stw	r2,0(r16)
10007444:	80800415 	stw	r2,16(r16)
10007448:	84800515 	stw	r18,20(r16)
1000744c:	98001a1e 	bne	r19,zero,100074b8 <__smakebuf_r+0x15c>
10007450:	dfc01317 	ldw	ra,76(sp)
10007454:	dcc01217 	ldw	r19,72(sp)
10007458:	dc801117 	ldw	r18,68(sp)
1000745c:	dc401017 	ldw	r17,64(sp)
10007460:	dc000f17 	ldw	r16,60(sp)
10007464:	dec01404 	addi	sp,sp,80
10007468:	f800283a 	ret
1000746c:	288010c4 	addi	r2,r5,67
10007470:	28800015 	stw	r2,0(r5)
10007474:	28800415 	stw	r2,16(r5)
10007478:	00800044 	movi	r2,1
1000747c:	28800515 	stw	r2,20(r5)
10007480:	f800283a 	ret
10007484:	04801004 	movi	r18,64
10007488:	003fe006 	br	1000740c <__alt_data_end+0xf800740c>
1000748c:	81000a17 	ldw	r4,40(r16)
10007490:	00c40074 	movhi	r3,4097
10007494:	18e66404 	addi	r3,r3,-26224
10007498:	20ffc51e 	bne	r4,r3,100073b0 <__alt_data_end+0xf80073b0>
1000749c:	8080030b 	ldhu	r2,12(r16)
100074a0:	04810004 	movi	r18,1024
100074a4:	84801315 	stw	r18,76(r16)
100074a8:	1484b03a 	or	r2,r2,r18
100074ac:	8080030d 	sth	r2,12(r16)
100074b0:	0027883a 	mov	r19,zero
100074b4:	003fd806 	br	10007418 <__alt_data_end+0xf8007418>
100074b8:	8140038f 	ldh	r5,14(r16)
100074bc:	8809883a 	mov	r4,r17
100074c0:	000b6c00 	call	1000b6c0 <_isatty_r>
100074c4:	103fe226 	beq	r2,zero,10007450 <__alt_data_end+0xf8007450>
100074c8:	8080030b 	ldhu	r2,12(r16)
100074cc:	10800054 	ori	r2,r2,1
100074d0:	8080030d 	sth	r2,12(r16)
100074d4:	003fde06 	br	10007450 <__alt_data_end+0xf8007450>
100074d8:	8080030b 	ldhu	r2,12(r16)
100074dc:	10c0800c 	andi	r3,r2,512
100074e0:	183fdb1e 	bne	r3,zero,10007450 <__alt_data_end+0xf8007450>
100074e4:	10800094 	ori	r2,r2,2
100074e8:	80c010c4 	addi	r3,r16,67
100074ec:	8080030d 	sth	r2,12(r16)
100074f0:	00800044 	movi	r2,1
100074f4:	80c00015 	stw	r3,0(r16)
100074f8:	80c00415 	stw	r3,16(r16)
100074fc:	80800515 	stw	r2,20(r16)
10007500:	003fd306 	br	10007450 <__alt_data_end+0xf8007450>
10007504:	04810004 	movi	r18,1024
10007508:	003fc306 	br	10007418 <__alt_data_end+0xf8007418>
1000750c:	0027883a 	mov	r19,zero
10007510:	04810004 	movi	r18,1024
10007514:	003fc006 	br	10007418 <__alt_data_end+0xf8007418>

10007518 <_malloc_r>:
10007518:	defff504 	addi	sp,sp,-44
1000751c:	dc800315 	stw	r18,12(sp)
10007520:	dfc00a15 	stw	ra,40(sp)
10007524:	df000915 	stw	fp,36(sp)
10007528:	ddc00815 	stw	r23,32(sp)
1000752c:	dd800715 	stw	r22,28(sp)
10007530:	dd400615 	stw	r21,24(sp)
10007534:	dd000515 	stw	r20,20(sp)
10007538:	dcc00415 	stw	r19,16(sp)
1000753c:	dc400215 	stw	r17,8(sp)
10007540:	dc000115 	stw	r16,4(sp)
10007544:	288002c4 	addi	r2,r5,11
10007548:	00c00584 	movi	r3,22
1000754c:	2025883a 	mov	r18,r4
10007550:	18807f2e 	bgeu	r3,r2,10007750 <_malloc_r+0x238>
10007554:	047ffe04 	movi	r17,-8
10007558:	1462703a 	and	r17,r2,r17
1000755c:	8800a316 	blt	r17,zero,100077ec <_malloc_r+0x2d4>
10007560:	8940a236 	bltu	r17,r5,100077ec <_malloc_r+0x2d4>
10007564:	000f73c0 	call	1000f73c <__malloc_lock>
10007568:	00807dc4 	movi	r2,503
1000756c:	1441e92e 	bgeu	r2,r17,10007d14 <_malloc_r+0x7fc>
10007570:	8804d27a 	srli	r2,r17,9
10007574:	1000a126 	beq	r2,zero,100077fc <_malloc_r+0x2e4>
10007578:	00c00104 	movi	r3,4
1000757c:	18811e36 	bltu	r3,r2,100079f8 <_malloc_r+0x4e0>
10007580:	8804d1ba 	srli	r2,r17,6
10007584:	12000e44 	addi	r8,r2,57
10007588:	11c00e04 	addi	r7,r2,56
1000758c:	4209883a 	add	r4,r8,r8
10007590:	04c40074 	movhi	r19,4097
10007594:	2109883a 	add	r4,r4,r4
10007598:	9cca4204 	addi	r19,r19,10504
1000759c:	2109883a 	add	r4,r4,r4
100075a0:	9909883a 	add	r4,r19,r4
100075a4:	24000117 	ldw	r16,4(r4)
100075a8:	213ffe04 	addi	r4,r4,-8
100075ac:	24009726 	beq	r4,r16,1000780c <_malloc_r+0x2f4>
100075b0:	80800117 	ldw	r2,4(r16)
100075b4:	01bfff04 	movi	r6,-4
100075b8:	014003c4 	movi	r5,15
100075bc:	1184703a 	and	r2,r2,r6
100075c0:	1447c83a 	sub	r3,r2,r17
100075c4:	28c00716 	blt	r5,r3,100075e4 <_malloc_r+0xcc>
100075c8:	1800920e 	bge	r3,zero,10007814 <_malloc_r+0x2fc>
100075cc:	84000317 	ldw	r16,12(r16)
100075d0:	24008e26 	beq	r4,r16,1000780c <_malloc_r+0x2f4>
100075d4:	80800117 	ldw	r2,4(r16)
100075d8:	1184703a 	and	r2,r2,r6
100075dc:	1447c83a 	sub	r3,r2,r17
100075e0:	28fff90e 	bge	r5,r3,100075c8 <__alt_data_end+0xf80075c8>
100075e4:	3809883a 	mov	r4,r7
100075e8:	01840074 	movhi	r6,4097
100075ec:	9c000417 	ldw	r16,16(r19)
100075f0:	318a4204 	addi	r6,r6,10504
100075f4:	32000204 	addi	r8,r6,8
100075f8:	82013426 	beq	r16,r8,10007acc <_malloc_r+0x5b4>
100075fc:	80c00117 	ldw	r3,4(r16)
10007600:	00bfff04 	movi	r2,-4
10007604:	188e703a 	and	r7,r3,r2
10007608:	3c45c83a 	sub	r2,r7,r17
1000760c:	00c003c4 	movi	r3,15
10007610:	18811f16 	blt	r3,r2,10007a90 <_malloc_r+0x578>
10007614:	32000515 	stw	r8,20(r6)
10007618:	32000415 	stw	r8,16(r6)
1000761c:	10007f0e 	bge	r2,zero,1000781c <_malloc_r+0x304>
10007620:	00807fc4 	movi	r2,511
10007624:	11c0fd36 	bltu	r2,r7,10007a1c <_malloc_r+0x504>
10007628:	3806d0fa 	srli	r3,r7,3
1000762c:	01c00044 	movi	r7,1
10007630:	30800117 	ldw	r2,4(r6)
10007634:	19400044 	addi	r5,r3,1
10007638:	294b883a 	add	r5,r5,r5
1000763c:	1807d0ba 	srai	r3,r3,2
10007640:	294b883a 	add	r5,r5,r5
10007644:	294b883a 	add	r5,r5,r5
10007648:	298b883a 	add	r5,r5,r6
1000764c:	38c6983a 	sll	r3,r7,r3
10007650:	29c00017 	ldw	r7,0(r5)
10007654:	2a7ffe04 	addi	r9,r5,-8
10007658:	1886b03a 	or	r3,r3,r2
1000765c:	82400315 	stw	r9,12(r16)
10007660:	81c00215 	stw	r7,8(r16)
10007664:	30c00115 	stw	r3,4(r6)
10007668:	2c000015 	stw	r16,0(r5)
1000766c:	3c000315 	stw	r16,12(r7)
10007670:	2005d0ba 	srai	r2,r4,2
10007674:	01400044 	movi	r5,1
10007678:	288a983a 	sll	r5,r5,r2
1000767c:	19406f36 	bltu	r3,r5,1000783c <_malloc_r+0x324>
10007680:	28c4703a 	and	r2,r5,r3
10007684:	10000a1e 	bne	r2,zero,100076b0 <_malloc_r+0x198>
10007688:	00bfff04 	movi	r2,-4
1000768c:	294b883a 	add	r5,r5,r5
10007690:	2088703a 	and	r4,r4,r2
10007694:	28c4703a 	and	r2,r5,r3
10007698:	21000104 	addi	r4,r4,4
1000769c:	1000041e 	bne	r2,zero,100076b0 <_malloc_r+0x198>
100076a0:	294b883a 	add	r5,r5,r5
100076a4:	28c4703a 	and	r2,r5,r3
100076a8:	21000104 	addi	r4,r4,4
100076ac:	103ffc26 	beq	r2,zero,100076a0 <__alt_data_end+0xf80076a0>
100076b0:	02bfff04 	movi	r10,-4
100076b4:	024003c4 	movi	r9,15
100076b8:	21800044 	addi	r6,r4,1
100076bc:	318d883a 	add	r6,r6,r6
100076c0:	318d883a 	add	r6,r6,r6
100076c4:	318d883a 	add	r6,r6,r6
100076c8:	998d883a 	add	r6,r19,r6
100076cc:	333ffe04 	addi	r12,r6,-8
100076d0:	2017883a 	mov	r11,r4
100076d4:	31800104 	addi	r6,r6,4
100076d8:	34000017 	ldw	r16,0(r6)
100076dc:	31fffd04 	addi	r7,r6,-12
100076e0:	81c0041e 	bne	r16,r7,100076f4 <_malloc_r+0x1dc>
100076e4:	0000fb06 	br	10007ad4 <_malloc_r+0x5bc>
100076e8:	1801030e 	bge	r3,zero,10007af8 <_malloc_r+0x5e0>
100076ec:	84000317 	ldw	r16,12(r16)
100076f0:	81c0f826 	beq	r16,r7,10007ad4 <_malloc_r+0x5bc>
100076f4:	80800117 	ldw	r2,4(r16)
100076f8:	1284703a 	and	r2,r2,r10
100076fc:	1447c83a 	sub	r3,r2,r17
10007700:	48fff90e 	bge	r9,r3,100076e8 <__alt_data_end+0xf80076e8>
10007704:	80800317 	ldw	r2,12(r16)
10007708:	81000217 	ldw	r4,8(r16)
1000770c:	89400054 	ori	r5,r17,1
10007710:	81400115 	stw	r5,4(r16)
10007714:	20800315 	stw	r2,12(r4)
10007718:	11000215 	stw	r4,8(r2)
1000771c:	8463883a 	add	r17,r16,r17
10007720:	9c400515 	stw	r17,20(r19)
10007724:	9c400415 	stw	r17,16(r19)
10007728:	18800054 	ori	r2,r3,1
1000772c:	88800115 	stw	r2,4(r17)
10007730:	8a000315 	stw	r8,12(r17)
10007734:	8a000215 	stw	r8,8(r17)
10007738:	88e3883a 	add	r17,r17,r3
1000773c:	88c00015 	stw	r3,0(r17)
10007740:	9009883a 	mov	r4,r18
10007744:	000f7600 	call	1000f760 <__malloc_unlock>
10007748:	80800204 	addi	r2,r16,8
1000774c:	00001b06 	br	100077bc <_malloc_r+0x2a4>
10007750:	04400404 	movi	r17,16
10007754:	89402536 	bltu	r17,r5,100077ec <_malloc_r+0x2d4>
10007758:	000f73c0 	call	1000f73c <__malloc_lock>
1000775c:	00800184 	movi	r2,6
10007760:	01000084 	movi	r4,2
10007764:	04c40074 	movhi	r19,4097
10007768:	1085883a 	add	r2,r2,r2
1000776c:	9cca4204 	addi	r19,r19,10504
10007770:	1085883a 	add	r2,r2,r2
10007774:	9885883a 	add	r2,r19,r2
10007778:	14000117 	ldw	r16,4(r2)
1000777c:	10fffe04 	addi	r3,r2,-8
10007780:	80c0d926 	beq	r16,r3,10007ae8 <_malloc_r+0x5d0>
10007784:	80c00117 	ldw	r3,4(r16)
10007788:	81000317 	ldw	r4,12(r16)
1000778c:	00bfff04 	movi	r2,-4
10007790:	1884703a 	and	r2,r3,r2
10007794:	81400217 	ldw	r5,8(r16)
10007798:	8085883a 	add	r2,r16,r2
1000779c:	10c00117 	ldw	r3,4(r2)
100077a0:	29000315 	stw	r4,12(r5)
100077a4:	21400215 	stw	r5,8(r4)
100077a8:	18c00054 	ori	r3,r3,1
100077ac:	10c00115 	stw	r3,4(r2)
100077b0:	9009883a 	mov	r4,r18
100077b4:	000f7600 	call	1000f760 <__malloc_unlock>
100077b8:	80800204 	addi	r2,r16,8
100077bc:	dfc00a17 	ldw	ra,40(sp)
100077c0:	df000917 	ldw	fp,36(sp)
100077c4:	ddc00817 	ldw	r23,32(sp)
100077c8:	dd800717 	ldw	r22,28(sp)
100077cc:	dd400617 	ldw	r21,24(sp)
100077d0:	dd000517 	ldw	r20,20(sp)
100077d4:	dcc00417 	ldw	r19,16(sp)
100077d8:	dc800317 	ldw	r18,12(sp)
100077dc:	dc400217 	ldw	r17,8(sp)
100077e0:	dc000117 	ldw	r16,4(sp)
100077e4:	dec00b04 	addi	sp,sp,44
100077e8:	f800283a 	ret
100077ec:	00800304 	movi	r2,12
100077f0:	90800015 	stw	r2,0(r18)
100077f4:	0005883a 	mov	r2,zero
100077f8:	003ff006 	br	100077bc <__alt_data_end+0xf80077bc>
100077fc:	01002004 	movi	r4,128
10007800:	02001004 	movi	r8,64
10007804:	01c00fc4 	movi	r7,63
10007808:	003f6106 	br	10007590 <__alt_data_end+0xf8007590>
1000780c:	4009883a 	mov	r4,r8
10007810:	003f7506 	br	100075e8 <__alt_data_end+0xf80075e8>
10007814:	81000317 	ldw	r4,12(r16)
10007818:	003fde06 	br	10007794 <__alt_data_end+0xf8007794>
1000781c:	81c5883a 	add	r2,r16,r7
10007820:	11400117 	ldw	r5,4(r2)
10007824:	9009883a 	mov	r4,r18
10007828:	29400054 	ori	r5,r5,1
1000782c:	11400115 	stw	r5,4(r2)
10007830:	000f7600 	call	1000f760 <__malloc_unlock>
10007834:	80800204 	addi	r2,r16,8
10007838:	003fe006 	br	100077bc <__alt_data_end+0xf80077bc>
1000783c:	9c000217 	ldw	r16,8(r19)
10007840:	00bfff04 	movi	r2,-4
10007844:	85800117 	ldw	r22,4(r16)
10007848:	b0ac703a 	and	r22,r22,r2
1000784c:	b4400336 	bltu	r22,r17,1000785c <_malloc_r+0x344>
10007850:	b445c83a 	sub	r2,r22,r17
10007854:	00c003c4 	movi	r3,15
10007858:	18805d16 	blt	r3,r2,100079d0 <_malloc_r+0x4b8>
1000785c:	05c40074 	movhi	r23,4097
10007860:	00840074 	movhi	r2,4097
10007864:	10969704 	addi	r2,r2,23132
10007868:	bdcfc904 	addi	r23,r23,16164
1000786c:	15400017 	ldw	r21,0(r2)
10007870:	b8c00017 	ldw	r3,0(r23)
10007874:	00bfffc4 	movi	r2,-1
10007878:	858d883a 	add	r6,r16,r22
1000787c:	8d6b883a 	add	r21,r17,r21
10007880:	1880ea26 	beq	r3,r2,10007c2c <_malloc_r+0x714>
10007884:	ad4403c4 	addi	r21,r21,4111
10007888:	00bc0004 	movi	r2,-4096
1000788c:	a8aa703a 	and	r21,r21,r2
10007890:	a80b883a 	mov	r5,r21
10007894:	9009883a 	mov	r4,r18
10007898:	d9800015 	stw	r6,0(sp)
1000789c:	00098640 	call	10009864 <_sbrk_r>
100078a0:	1029883a 	mov	r20,r2
100078a4:	00bfffc4 	movi	r2,-1
100078a8:	d9800017 	ldw	r6,0(sp)
100078ac:	a080e826 	beq	r20,r2,10007c50 <_malloc_r+0x738>
100078b0:	a180a636 	bltu	r20,r6,10007b4c <_malloc_r+0x634>
100078b4:	07040074 	movhi	fp,4097
100078b8:	e7169f04 	addi	fp,fp,23164
100078bc:	e0800017 	ldw	r2,0(fp)
100078c0:	a887883a 	add	r3,r21,r2
100078c4:	e0c00015 	stw	r3,0(fp)
100078c8:	3500e626 	beq	r6,r20,10007c64 <_malloc_r+0x74c>
100078cc:	b9000017 	ldw	r4,0(r23)
100078d0:	00bfffc4 	movi	r2,-1
100078d4:	2080ee26 	beq	r4,r2,10007c90 <_malloc_r+0x778>
100078d8:	a185c83a 	sub	r2,r20,r6
100078dc:	10c5883a 	add	r2,r2,r3
100078e0:	e0800015 	stw	r2,0(fp)
100078e4:	a0c001cc 	andi	r3,r20,7
100078e8:	1800bc26 	beq	r3,zero,10007bdc <_malloc_r+0x6c4>
100078ec:	a0e9c83a 	sub	r20,r20,r3
100078f0:	00840204 	movi	r2,4104
100078f4:	a5000204 	addi	r20,r20,8
100078f8:	10c7c83a 	sub	r3,r2,r3
100078fc:	a545883a 	add	r2,r20,r21
10007900:	1083ffcc 	andi	r2,r2,4095
10007904:	18abc83a 	sub	r21,r3,r2
10007908:	a80b883a 	mov	r5,r21
1000790c:	9009883a 	mov	r4,r18
10007910:	00098640 	call	10009864 <_sbrk_r>
10007914:	00ffffc4 	movi	r3,-1
10007918:	10c0e126 	beq	r2,r3,10007ca0 <_malloc_r+0x788>
1000791c:	1505c83a 	sub	r2,r2,r20
10007920:	1545883a 	add	r2,r2,r21
10007924:	10800054 	ori	r2,r2,1
10007928:	e0c00017 	ldw	r3,0(fp)
1000792c:	9d000215 	stw	r20,8(r19)
10007930:	a0800115 	stw	r2,4(r20)
10007934:	a8c7883a 	add	r3,r21,r3
10007938:	e0c00015 	stw	r3,0(fp)
1000793c:	84c00e26 	beq	r16,r19,10007978 <_malloc_r+0x460>
10007940:	018003c4 	movi	r6,15
10007944:	3580a72e 	bgeu	r6,r22,10007be4 <_malloc_r+0x6cc>
10007948:	81400117 	ldw	r5,4(r16)
1000794c:	013ffe04 	movi	r4,-8
10007950:	b0bffd04 	addi	r2,r22,-12
10007954:	1104703a 	and	r2,r2,r4
10007958:	2900004c 	andi	r4,r5,1
1000795c:	2088b03a 	or	r4,r4,r2
10007960:	81000115 	stw	r4,4(r16)
10007964:	01400144 	movi	r5,5
10007968:	8089883a 	add	r4,r16,r2
1000796c:	21400115 	stw	r5,4(r4)
10007970:	21400215 	stw	r5,8(r4)
10007974:	3080cd36 	bltu	r6,r2,10007cac <_malloc_r+0x794>
10007978:	00840074 	movhi	r2,4097
1000797c:	10969604 	addi	r2,r2,23128
10007980:	11000017 	ldw	r4,0(r2)
10007984:	20c0012e 	bgeu	r4,r3,1000798c <_malloc_r+0x474>
10007988:	10c00015 	stw	r3,0(r2)
1000798c:	00840074 	movhi	r2,4097
10007990:	10969504 	addi	r2,r2,23124
10007994:	11000017 	ldw	r4,0(r2)
10007998:	9c000217 	ldw	r16,8(r19)
1000799c:	20c0012e 	bgeu	r4,r3,100079a4 <_malloc_r+0x48c>
100079a0:	10c00015 	stw	r3,0(r2)
100079a4:	80c00117 	ldw	r3,4(r16)
100079a8:	00bfff04 	movi	r2,-4
100079ac:	1886703a 	and	r3,r3,r2
100079b0:	1c45c83a 	sub	r2,r3,r17
100079b4:	1c400236 	bltu	r3,r17,100079c0 <_malloc_r+0x4a8>
100079b8:	00c003c4 	movi	r3,15
100079bc:	18800416 	blt	r3,r2,100079d0 <_malloc_r+0x4b8>
100079c0:	9009883a 	mov	r4,r18
100079c4:	000f7600 	call	1000f760 <__malloc_unlock>
100079c8:	0005883a 	mov	r2,zero
100079cc:	003f7b06 	br	100077bc <__alt_data_end+0xf80077bc>
100079d0:	88c00054 	ori	r3,r17,1
100079d4:	80c00115 	stw	r3,4(r16)
100079d8:	8463883a 	add	r17,r16,r17
100079dc:	10800054 	ori	r2,r2,1
100079e0:	9c400215 	stw	r17,8(r19)
100079e4:	88800115 	stw	r2,4(r17)
100079e8:	9009883a 	mov	r4,r18
100079ec:	000f7600 	call	1000f760 <__malloc_unlock>
100079f0:	80800204 	addi	r2,r16,8
100079f4:	003f7106 	br	100077bc <__alt_data_end+0xf80077bc>
100079f8:	00c00504 	movi	r3,20
100079fc:	18804a2e 	bgeu	r3,r2,10007b28 <_malloc_r+0x610>
10007a00:	00c01504 	movi	r3,84
10007a04:	18806e36 	bltu	r3,r2,10007bc0 <_malloc_r+0x6a8>
10007a08:	8804d33a 	srli	r2,r17,12
10007a0c:	12001bc4 	addi	r8,r2,111
10007a10:	11c01b84 	addi	r7,r2,110
10007a14:	4209883a 	add	r4,r8,r8
10007a18:	003edd06 	br	10007590 <__alt_data_end+0xf8007590>
10007a1c:	3804d27a 	srli	r2,r7,9
10007a20:	00c00104 	movi	r3,4
10007a24:	1880442e 	bgeu	r3,r2,10007b38 <_malloc_r+0x620>
10007a28:	00c00504 	movi	r3,20
10007a2c:	18808136 	bltu	r3,r2,10007c34 <_malloc_r+0x71c>
10007a30:	11401704 	addi	r5,r2,92
10007a34:	10c016c4 	addi	r3,r2,91
10007a38:	294b883a 	add	r5,r5,r5
10007a3c:	294b883a 	add	r5,r5,r5
10007a40:	294b883a 	add	r5,r5,r5
10007a44:	994b883a 	add	r5,r19,r5
10007a48:	28800017 	ldw	r2,0(r5)
10007a4c:	01840074 	movhi	r6,4097
10007a50:	297ffe04 	addi	r5,r5,-8
10007a54:	318a4204 	addi	r6,r6,10504
10007a58:	28806526 	beq	r5,r2,10007bf0 <_malloc_r+0x6d8>
10007a5c:	01bfff04 	movi	r6,-4
10007a60:	10c00117 	ldw	r3,4(r2)
10007a64:	1986703a 	and	r3,r3,r6
10007a68:	38c0022e 	bgeu	r7,r3,10007a74 <_malloc_r+0x55c>
10007a6c:	10800217 	ldw	r2,8(r2)
10007a70:	28bffb1e 	bne	r5,r2,10007a60 <__alt_data_end+0xf8007a60>
10007a74:	11400317 	ldw	r5,12(r2)
10007a78:	98c00117 	ldw	r3,4(r19)
10007a7c:	81400315 	stw	r5,12(r16)
10007a80:	80800215 	stw	r2,8(r16)
10007a84:	2c000215 	stw	r16,8(r5)
10007a88:	14000315 	stw	r16,12(r2)
10007a8c:	003ef806 	br	10007670 <__alt_data_end+0xf8007670>
10007a90:	88c00054 	ori	r3,r17,1
10007a94:	80c00115 	stw	r3,4(r16)
10007a98:	8463883a 	add	r17,r16,r17
10007a9c:	34400515 	stw	r17,20(r6)
10007aa0:	34400415 	stw	r17,16(r6)
10007aa4:	10c00054 	ori	r3,r2,1
10007aa8:	8a000315 	stw	r8,12(r17)
10007aac:	8a000215 	stw	r8,8(r17)
10007ab0:	88c00115 	stw	r3,4(r17)
10007ab4:	88a3883a 	add	r17,r17,r2
10007ab8:	88800015 	stw	r2,0(r17)
10007abc:	9009883a 	mov	r4,r18
10007ac0:	000f7600 	call	1000f760 <__malloc_unlock>
10007ac4:	80800204 	addi	r2,r16,8
10007ac8:	003f3c06 	br	100077bc <__alt_data_end+0xf80077bc>
10007acc:	30c00117 	ldw	r3,4(r6)
10007ad0:	003ee706 	br	10007670 <__alt_data_end+0xf8007670>
10007ad4:	5ac00044 	addi	r11,r11,1
10007ad8:	588000cc 	andi	r2,r11,3
10007adc:	31800204 	addi	r6,r6,8
10007ae0:	103efd1e 	bne	r2,zero,100076d8 <__alt_data_end+0xf80076d8>
10007ae4:	00002406 	br	10007b78 <_malloc_r+0x660>
10007ae8:	14000317 	ldw	r16,12(r2)
10007aec:	143f251e 	bne	r2,r16,10007784 <__alt_data_end+0xf8007784>
10007af0:	21000084 	addi	r4,r4,2
10007af4:	003ebc06 	br	100075e8 <__alt_data_end+0xf80075e8>
10007af8:	8085883a 	add	r2,r16,r2
10007afc:	10c00117 	ldw	r3,4(r2)
10007b00:	81000317 	ldw	r4,12(r16)
10007b04:	81400217 	ldw	r5,8(r16)
10007b08:	18c00054 	ori	r3,r3,1
10007b0c:	10c00115 	stw	r3,4(r2)
10007b10:	29000315 	stw	r4,12(r5)
10007b14:	21400215 	stw	r5,8(r4)
10007b18:	9009883a 	mov	r4,r18
10007b1c:	000f7600 	call	1000f760 <__malloc_unlock>
10007b20:	80800204 	addi	r2,r16,8
10007b24:	003f2506 	br	100077bc <__alt_data_end+0xf80077bc>
10007b28:	12001704 	addi	r8,r2,92
10007b2c:	11c016c4 	addi	r7,r2,91
10007b30:	4209883a 	add	r4,r8,r8
10007b34:	003e9606 	br	10007590 <__alt_data_end+0xf8007590>
10007b38:	3804d1ba 	srli	r2,r7,6
10007b3c:	11400e44 	addi	r5,r2,57
10007b40:	10c00e04 	addi	r3,r2,56
10007b44:	294b883a 	add	r5,r5,r5
10007b48:	003fbc06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007b4c:	84ff5926 	beq	r16,r19,100078b4 <__alt_data_end+0xf80078b4>
10007b50:	00840074 	movhi	r2,4097
10007b54:	108a4204 	addi	r2,r2,10504
10007b58:	14000217 	ldw	r16,8(r2)
10007b5c:	00bfff04 	movi	r2,-4
10007b60:	80c00117 	ldw	r3,4(r16)
10007b64:	1886703a 	and	r3,r3,r2
10007b68:	003f9106 	br	100079b0 <__alt_data_end+0xf80079b0>
10007b6c:	60800217 	ldw	r2,8(r12)
10007b70:	213fffc4 	addi	r4,r4,-1
10007b74:	1300651e 	bne	r2,r12,10007d0c <_malloc_r+0x7f4>
10007b78:	208000cc 	andi	r2,r4,3
10007b7c:	633ffe04 	addi	r12,r12,-8
10007b80:	103ffa1e 	bne	r2,zero,10007b6c <__alt_data_end+0xf8007b6c>
10007b84:	98800117 	ldw	r2,4(r19)
10007b88:	0146303a 	nor	r3,zero,r5
10007b8c:	1884703a 	and	r2,r3,r2
10007b90:	98800115 	stw	r2,4(r19)
10007b94:	294b883a 	add	r5,r5,r5
10007b98:	117f2836 	bltu	r2,r5,1000783c <__alt_data_end+0xf800783c>
10007b9c:	283f2726 	beq	r5,zero,1000783c <__alt_data_end+0xf800783c>
10007ba0:	2886703a 	and	r3,r5,r2
10007ba4:	5809883a 	mov	r4,r11
10007ba8:	183ec31e 	bne	r3,zero,100076b8 <__alt_data_end+0xf80076b8>
10007bac:	294b883a 	add	r5,r5,r5
10007bb0:	2886703a 	and	r3,r5,r2
10007bb4:	21000104 	addi	r4,r4,4
10007bb8:	183ffc26 	beq	r3,zero,10007bac <__alt_data_end+0xf8007bac>
10007bbc:	003ebe06 	br	100076b8 <__alt_data_end+0xf80076b8>
10007bc0:	00c05504 	movi	r3,340
10007bc4:	18801236 	bltu	r3,r2,10007c10 <_malloc_r+0x6f8>
10007bc8:	8804d3fa 	srli	r2,r17,15
10007bcc:	12001e04 	addi	r8,r2,120
10007bd0:	11c01dc4 	addi	r7,r2,119
10007bd4:	4209883a 	add	r4,r8,r8
10007bd8:	003e6d06 	br	10007590 <__alt_data_end+0xf8007590>
10007bdc:	00c40004 	movi	r3,4096
10007be0:	003f4606 	br	100078fc <__alt_data_end+0xf80078fc>
10007be4:	00800044 	movi	r2,1
10007be8:	a0800115 	stw	r2,4(r20)
10007bec:	003f7406 	br	100079c0 <__alt_data_end+0xf80079c0>
10007bf0:	1805d0ba 	srai	r2,r3,2
10007bf4:	01c00044 	movi	r7,1
10007bf8:	30c00117 	ldw	r3,4(r6)
10007bfc:	388e983a 	sll	r7,r7,r2
10007c00:	2805883a 	mov	r2,r5
10007c04:	38c6b03a 	or	r3,r7,r3
10007c08:	30c00115 	stw	r3,4(r6)
10007c0c:	003f9b06 	br	10007a7c <__alt_data_end+0xf8007a7c>
10007c10:	00c15504 	movi	r3,1364
10007c14:	18801a36 	bltu	r3,r2,10007c80 <_malloc_r+0x768>
10007c18:	8804d4ba 	srli	r2,r17,18
10007c1c:	12001f44 	addi	r8,r2,125
10007c20:	11c01f04 	addi	r7,r2,124
10007c24:	4209883a 	add	r4,r8,r8
10007c28:	003e5906 	br	10007590 <__alt_data_end+0xf8007590>
10007c2c:	ad400404 	addi	r21,r21,16
10007c30:	003f1706 	br	10007890 <__alt_data_end+0xf8007890>
10007c34:	00c01504 	movi	r3,84
10007c38:	18802336 	bltu	r3,r2,10007cc8 <_malloc_r+0x7b0>
10007c3c:	3804d33a 	srli	r2,r7,12
10007c40:	11401bc4 	addi	r5,r2,111
10007c44:	10c01b84 	addi	r3,r2,110
10007c48:	294b883a 	add	r5,r5,r5
10007c4c:	003f7b06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007c50:	9c000217 	ldw	r16,8(r19)
10007c54:	00bfff04 	movi	r2,-4
10007c58:	80c00117 	ldw	r3,4(r16)
10007c5c:	1886703a 	and	r3,r3,r2
10007c60:	003f5306 	br	100079b0 <__alt_data_end+0xf80079b0>
10007c64:	3083ffcc 	andi	r2,r6,4095
10007c68:	103f181e 	bne	r2,zero,100078cc <__alt_data_end+0xf80078cc>
10007c6c:	99000217 	ldw	r4,8(r19)
10007c70:	b545883a 	add	r2,r22,r21
10007c74:	10800054 	ori	r2,r2,1
10007c78:	20800115 	stw	r2,4(r4)
10007c7c:	003f3e06 	br	10007978 <__alt_data_end+0xf8007978>
10007c80:	01003f84 	movi	r4,254
10007c84:	02001fc4 	movi	r8,127
10007c88:	01c01f84 	movi	r7,126
10007c8c:	003e4006 	br	10007590 <__alt_data_end+0xf8007590>
10007c90:	00840074 	movhi	r2,4097
10007c94:	108fc904 	addi	r2,r2,16164
10007c98:	15000015 	stw	r20,0(r2)
10007c9c:	003f1106 	br	100078e4 <__alt_data_end+0xf80078e4>
10007ca0:	00800044 	movi	r2,1
10007ca4:	002b883a 	mov	r21,zero
10007ca8:	003f1f06 	br	10007928 <__alt_data_end+0xf8007928>
10007cac:	81400204 	addi	r5,r16,8
10007cb0:	9009883a 	mov	r4,r18
10007cb4:	00069200 	call	10006920 <_free_r>
10007cb8:	00840074 	movhi	r2,4097
10007cbc:	10969f04 	addi	r2,r2,23164
10007cc0:	10c00017 	ldw	r3,0(r2)
10007cc4:	003f2c06 	br	10007978 <__alt_data_end+0xf8007978>
10007cc8:	00c05504 	movi	r3,340
10007ccc:	18800536 	bltu	r3,r2,10007ce4 <_malloc_r+0x7cc>
10007cd0:	3804d3fa 	srli	r2,r7,15
10007cd4:	11401e04 	addi	r5,r2,120
10007cd8:	10c01dc4 	addi	r3,r2,119
10007cdc:	294b883a 	add	r5,r5,r5
10007ce0:	003f5606 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007ce4:	00c15504 	movi	r3,1364
10007ce8:	18800536 	bltu	r3,r2,10007d00 <_malloc_r+0x7e8>
10007cec:	3804d4ba 	srli	r2,r7,18
10007cf0:	11401f44 	addi	r5,r2,125
10007cf4:	10c01f04 	addi	r3,r2,124
10007cf8:	294b883a 	add	r5,r5,r5
10007cfc:	003f4f06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007d00:	01403f84 	movi	r5,254
10007d04:	00c01f84 	movi	r3,126
10007d08:	003f4c06 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007d0c:	98800117 	ldw	r2,4(r19)
10007d10:	003fa006 	br	10007b94 <__alt_data_end+0xf8007b94>
10007d14:	8808d0fa 	srli	r4,r17,3
10007d18:	20800044 	addi	r2,r4,1
10007d1c:	1085883a 	add	r2,r2,r2
10007d20:	003e9006 	br	10007764 <__alt_data_end+0xf8007764>

10007d24 <memchr>:
10007d24:	208000cc 	andi	r2,r4,3
10007d28:	280f883a 	mov	r7,r5
10007d2c:	10003426 	beq	r2,zero,10007e00 <memchr+0xdc>
10007d30:	30bfffc4 	addi	r2,r6,-1
10007d34:	30001a26 	beq	r6,zero,10007da0 <memchr+0x7c>
10007d38:	20c00003 	ldbu	r3,0(r4)
10007d3c:	29803fcc 	andi	r6,r5,255
10007d40:	30c0051e 	bne	r6,r3,10007d58 <memchr+0x34>
10007d44:	00001806 	br	10007da8 <memchr+0x84>
10007d48:	10001526 	beq	r2,zero,10007da0 <memchr+0x7c>
10007d4c:	20c00003 	ldbu	r3,0(r4)
10007d50:	10bfffc4 	addi	r2,r2,-1
10007d54:	30c01426 	beq	r6,r3,10007da8 <memchr+0x84>
10007d58:	21000044 	addi	r4,r4,1
10007d5c:	20c000cc 	andi	r3,r4,3
10007d60:	183ff91e 	bne	r3,zero,10007d48 <__alt_data_end+0xf8007d48>
10007d64:	020000c4 	movi	r8,3
10007d68:	40801136 	bltu	r8,r2,10007db0 <memchr+0x8c>
10007d6c:	10000c26 	beq	r2,zero,10007da0 <memchr+0x7c>
10007d70:	20c00003 	ldbu	r3,0(r4)
10007d74:	29403fcc 	andi	r5,r5,255
10007d78:	28c00b26 	beq	r5,r3,10007da8 <memchr+0x84>
10007d7c:	20c00044 	addi	r3,r4,1
10007d80:	39803fcc 	andi	r6,r7,255
10007d84:	2089883a 	add	r4,r4,r2
10007d88:	00000306 	br	10007d98 <memchr+0x74>
10007d8c:	18c00044 	addi	r3,r3,1
10007d90:	197fffc3 	ldbu	r5,-1(r3)
10007d94:	31400526 	beq	r6,r5,10007dac <memchr+0x88>
10007d98:	1805883a 	mov	r2,r3
10007d9c:	20fffb1e 	bne	r4,r3,10007d8c <__alt_data_end+0xf8007d8c>
10007da0:	0005883a 	mov	r2,zero
10007da4:	f800283a 	ret
10007da8:	2005883a 	mov	r2,r4
10007dac:	f800283a 	ret
10007db0:	28c03fcc 	andi	r3,r5,255
10007db4:	1812923a 	slli	r9,r3,8
10007db8:	02ffbff4 	movhi	r11,65279
10007dbc:	02a02074 	movhi	r10,32897
10007dc0:	48d2b03a 	or	r9,r9,r3
10007dc4:	4806943a 	slli	r3,r9,16
10007dc8:	5affbfc4 	addi	r11,r11,-257
10007dcc:	52a02004 	addi	r10,r10,-32640
10007dd0:	48d2b03a 	or	r9,r9,r3
10007dd4:	20c00017 	ldw	r3,0(r4)
10007dd8:	48c6f03a 	xor	r3,r9,r3
10007ddc:	1acd883a 	add	r6,r3,r11
10007de0:	00c6303a 	nor	r3,zero,r3
10007de4:	30c6703a 	and	r3,r6,r3
10007de8:	1a86703a 	and	r3,r3,r10
10007dec:	183fe01e 	bne	r3,zero,10007d70 <__alt_data_end+0xf8007d70>
10007df0:	10bfff04 	addi	r2,r2,-4
10007df4:	21000104 	addi	r4,r4,4
10007df8:	40bff636 	bltu	r8,r2,10007dd4 <__alt_data_end+0xf8007dd4>
10007dfc:	003fdb06 	br	10007d6c <__alt_data_end+0xf8007d6c>
10007e00:	3005883a 	mov	r2,r6
10007e04:	003fd706 	br	10007d64 <__alt_data_end+0xf8007d64>

10007e08 <memcpy>:
10007e08:	defffd04 	addi	sp,sp,-12
10007e0c:	dfc00215 	stw	ra,8(sp)
10007e10:	dc400115 	stw	r17,4(sp)
10007e14:	dc000015 	stw	r16,0(sp)
10007e18:	00c003c4 	movi	r3,15
10007e1c:	2005883a 	mov	r2,r4
10007e20:	1980452e 	bgeu	r3,r6,10007f38 <memcpy+0x130>
10007e24:	2906b03a 	or	r3,r5,r4
10007e28:	18c000cc 	andi	r3,r3,3
10007e2c:	1800441e 	bne	r3,zero,10007f40 <memcpy+0x138>
10007e30:	347ffc04 	addi	r17,r6,-16
10007e34:	8822d13a 	srli	r17,r17,4
10007e38:	28c00104 	addi	r3,r5,4
10007e3c:	23400104 	addi	r13,r4,4
10007e40:	8820913a 	slli	r16,r17,4
10007e44:	2b000204 	addi	r12,r5,8
10007e48:	22c00204 	addi	r11,r4,8
10007e4c:	84000504 	addi	r16,r16,20
10007e50:	2a800304 	addi	r10,r5,12
10007e54:	22400304 	addi	r9,r4,12
10007e58:	2c21883a 	add	r16,r5,r16
10007e5c:	2811883a 	mov	r8,r5
10007e60:	200f883a 	mov	r7,r4
10007e64:	41000017 	ldw	r4,0(r8)
10007e68:	1fc00017 	ldw	ra,0(r3)
10007e6c:	63c00017 	ldw	r15,0(r12)
10007e70:	39000015 	stw	r4,0(r7)
10007e74:	53800017 	ldw	r14,0(r10)
10007e78:	6fc00015 	stw	ra,0(r13)
10007e7c:	5bc00015 	stw	r15,0(r11)
10007e80:	4b800015 	stw	r14,0(r9)
10007e84:	18c00404 	addi	r3,r3,16
10007e88:	39c00404 	addi	r7,r7,16
10007e8c:	42000404 	addi	r8,r8,16
10007e90:	6b400404 	addi	r13,r13,16
10007e94:	63000404 	addi	r12,r12,16
10007e98:	5ac00404 	addi	r11,r11,16
10007e9c:	52800404 	addi	r10,r10,16
10007ea0:	4a400404 	addi	r9,r9,16
10007ea4:	1c3fef1e 	bne	r3,r16,10007e64 <__alt_data_end+0xf8007e64>
10007ea8:	89c00044 	addi	r7,r17,1
10007eac:	380e913a 	slli	r7,r7,4
10007eb0:	310003cc 	andi	r4,r6,15
10007eb4:	02c000c4 	movi	r11,3
10007eb8:	11c7883a 	add	r3,r2,r7
10007ebc:	29cb883a 	add	r5,r5,r7
10007ec0:	5900212e 	bgeu	r11,r4,10007f48 <memcpy+0x140>
10007ec4:	1813883a 	mov	r9,r3
10007ec8:	2811883a 	mov	r8,r5
10007ecc:	200f883a 	mov	r7,r4
10007ed0:	42800017 	ldw	r10,0(r8)
10007ed4:	4a400104 	addi	r9,r9,4
10007ed8:	39ffff04 	addi	r7,r7,-4
10007edc:	4abfff15 	stw	r10,-4(r9)
10007ee0:	42000104 	addi	r8,r8,4
10007ee4:	59fffa36 	bltu	r11,r7,10007ed0 <__alt_data_end+0xf8007ed0>
10007ee8:	213fff04 	addi	r4,r4,-4
10007eec:	2008d0ba 	srli	r4,r4,2
10007ef0:	318000cc 	andi	r6,r6,3
10007ef4:	21000044 	addi	r4,r4,1
10007ef8:	2109883a 	add	r4,r4,r4
10007efc:	2109883a 	add	r4,r4,r4
10007f00:	1907883a 	add	r3,r3,r4
10007f04:	290b883a 	add	r5,r5,r4
10007f08:	30000626 	beq	r6,zero,10007f24 <memcpy+0x11c>
10007f0c:	198d883a 	add	r6,r3,r6
10007f10:	29c00003 	ldbu	r7,0(r5)
10007f14:	18c00044 	addi	r3,r3,1
10007f18:	29400044 	addi	r5,r5,1
10007f1c:	19ffffc5 	stb	r7,-1(r3)
10007f20:	19bffb1e 	bne	r3,r6,10007f10 <__alt_data_end+0xf8007f10>
10007f24:	dfc00217 	ldw	ra,8(sp)
10007f28:	dc400117 	ldw	r17,4(sp)
10007f2c:	dc000017 	ldw	r16,0(sp)
10007f30:	dec00304 	addi	sp,sp,12
10007f34:	f800283a 	ret
10007f38:	2007883a 	mov	r3,r4
10007f3c:	003ff206 	br	10007f08 <__alt_data_end+0xf8007f08>
10007f40:	2007883a 	mov	r3,r4
10007f44:	003ff106 	br	10007f0c <__alt_data_end+0xf8007f0c>
10007f48:	200d883a 	mov	r6,r4
10007f4c:	003fee06 	br	10007f08 <__alt_data_end+0xf8007f08>

10007f50 <memmove>:
10007f50:	2005883a 	mov	r2,r4
10007f54:	29000b2e 	bgeu	r5,r4,10007f84 <memmove+0x34>
10007f58:	298f883a 	add	r7,r5,r6
10007f5c:	21c0092e 	bgeu	r4,r7,10007f84 <memmove+0x34>
10007f60:	2187883a 	add	r3,r4,r6
10007f64:	198bc83a 	sub	r5,r3,r6
10007f68:	30004826 	beq	r6,zero,1000808c <memmove+0x13c>
10007f6c:	39ffffc4 	addi	r7,r7,-1
10007f70:	39000003 	ldbu	r4,0(r7)
10007f74:	18ffffc4 	addi	r3,r3,-1
10007f78:	19000005 	stb	r4,0(r3)
10007f7c:	28fffb1e 	bne	r5,r3,10007f6c <__alt_data_end+0xf8007f6c>
10007f80:	f800283a 	ret
10007f84:	00c003c4 	movi	r3,15
10007f88:	1980412e 	bgeu	r3,r6,10008090 <memmove+0x140>
10007f8c:	2886b03a 	or	r3,r5,r2
10007f90:	18c000cc 	andi	r3,r3,3
10007f94:	1800401e 	bne	r3,zero,10008098 <memmove+0x148>
10007f98:	33fffc04 	addi	r15,r6,-16
10007f9c:	781ed13a 	srli	r15,r15,4
10007fa0:	28c00104 	addi	r3,r5,4
10007fa4:	13400104 	addi	r13,r2,4
10007fa8:	781c913a 	slli	r14,r15,4
10007fac:	2b000204 	addi	r12,r5,8
10007fb0:	12c00204 	addi	r11,r2,8
10007fb4:	73800504 	addi	r14,r14,20
10007fb8:	2a800304 	addi	r10,r5,12
10007fbc:	12400304 	addi	r9,r2,12
10007fc0:	2b9d883a 	add	r14,r5,r14
10007fc4:	2811883a 	mov	r8,r5
10007fc8:	100f883a 	mov	r7,r2
10007fcc:	41000017 	ldw	r4,0(r8)
10007fd0:	39c00404 	addi	r7,r7,16
10007fd4:	18c00404 	addi	r3,r3,16
10007fd8:	393ffc15 	stw	r4,-16(r7)
10007fdc:	193ffc17 	ldw	r4,-16(r3)
10007fe0:	6b400404 	addi	r13,r13,16
10007fe4:	5ac00404 	addi	r11,r11,16
10007fe8:	693ffc15 	stw	r4,-16(r13)
10007fec:	61000017 	ldw	r4,0(r12)
10007ff0:	4a400404 	addi	r9,r9,16
10007ff4:	42000404 	addi	r8,r8,16
10007ff8:	593ffc15 	stw	r4,-16(r11)
10007ffc:	51000017 	ldw	r4,0(r10)
10008000:	63000404 	addi	r12,r12,16
10008004:	52800404 	addi	r10,r10,16
10008008:	493ffc15 	stw	r4,-16(r9)
1000800c:	1bbfef1e 	bne	r3,r14,10007fcc <__alt_data_end+0xf8007fcc>
10008010:	79000044 	addi	r4,r15,1
10008014:	2008913a 	slli	r4,r4,4
10008018:	328003cc 	andi	r10,r6,15
1000801c:	02c000c4 	movi	r11,3
10008020:	1107883a 	add	r3,r2,r4
10008024:	290b883a 	add	r5,r5,r4
10008028:	5a801e2e 	bgeu	r11,r10,100080a4 <memmove+0x154>
1000802c:	1813883a 	mov	r9,r3
10008030:	2811883a 	mov	r8,r5
10008034:	500f883a 	mov	r7,r10
10008038:	41000017 	ldw	r4,0(r8)
1000803c:	4a400104 	addi	r9,r9,4
10008040:	39ffff04 	addi	r7,r7,-4
10008044:	493fff15 	stw	r4,-4(r9)
10008048:	42000104 	addi	r8,r8,4
1000804c:	59fffa36 	bltu	r11,r7,10008038 <__alt_data_end+0xf8008038>
10008050:	513fff04 	addi	r4,r10,-4
10008054:	2008d0ba 	srli	r4,r4,2
10008058:	318000cc 	andi	r6,r6,3
1000805c:	21000044 	addi	r4,r4,1
10008060:	2109883a 	add	r4,r4,r4
10008064:	2109883a 	add	r4,r4,r4
10008068:	1907883a 	add	r3,r3,r4
1000806c:	290b883a 	add	r5,r5,r4
10008070:	30000b26 	beq	r6,zero,100080a0 <memmove+0x150>
10008074:	198d883a 	add	r6,r3,r6
10008078:	29c00003 	ldbu	r7,0(r5)
1000807c:	18c00044 	addi	r3,r3,1
10008080:	29400044 	addi	r5,r5,1
10008084:	19ffffc5 	stb	r7,-1(r3)
10008088:	19bffb1e 	bne	r3,r6,10008078 <__alt_data_end+0xf8008078>
1000808c:	f800283a 	ret
10008090:	1007883a 	mov	r3,r2
10008094:	003ff606 	br	10008070 <__alt_data_end+0xf8008070>
10008098:	1007883a 	mov	r3,r2
1000809c:	003ff506 	br	10008074 <__alt_data_end+0xf8008074>
100080a0:	f800283a 	ret
100080a4:	500d883a 	mov	r6,r10
100080a8:	003ff106 	br	10008070 <__alt_data_end+0xf8008070>

100080ac <memset>:
100080ac:	20c000cc 	andi	r3,r4,3
100080b0:	2005883a 	mov	r2,r4
100080b4:	18004426 	beq	r3,zero,100081c8 <memset+0x11c>
100080b8:	31ffffc4 	addi	r7,r6,-1
100080bc:	30004026 	beq	r6,zero,100081c0 <memset+0x114>
100080c0:	2813883a 	mov	r9,r5
100080c4:	200d883a 	mov	r6,r4
100080c8:	2007883a 	mov	r3,r4
100080cc:	00000406 	br	100080e0 <memset+0x34>
100080d0:	3a3fffc4 	addi	r8,r7,-1
100080d4:	31800044 	addi	r6,r6,1
100080d8:	38003926 	beq	r7,zero,100081c0 <memset+0x114>
100080dc:	400f883a 	mov	r7,r8
100080e0:	18c00044 	addi	r3,r3,1
100080e4:	32400005 	stb	r9,0(r6)
100080e8:	1a0000cc 	andi	r8,r3,3
100080ec:	403ff81e 	bne	r8,zero,100080d0 <__alt_data_end+0xf80080d0>
100080f0:	010000c4 	movi	r4,3
100080f4:	21c02d2e 	bgeu	r4,r7,100081ac <memset+0x100>
100080f8:	29003fcc 	andi	r4,r5,255
100080fc:	200c923a 	slli	r6,r4,8
10008100:	3108b03a 	or	r4,r6,r4
10008104:	200c943a 	slli	r6,r4,16
10008108:	218cb03a 	or	r6,r4,r6
1000810c:	010003c4 	movi	r4,15
10008110:	21c0182e 	bgeu	r4,r7,10008174 <memset+0xc8>
10008114:	3b3ffc04 	addi	r12,r7,-16
10008118:	6018d13a 	srli	r12,r12,4
1000811c:	1a000104 	addi	r8,r3,4
10008120:	1ac00204 	addi	r11,r3,8
10008124:	6008913a 	slli	r4,r12,4
10008128:	1a800304 	addi	r10,r3,12
1000812c:	1813883a 	mov	r9,r3
10008130:	21000504 	addi	r4,r4,20
10008134:	1909883a 	add	r4,r3,r4
10008138:	49800015 	stw	r6,0(r9)
1000813c:	41800015 	stw	r6,0(r8)
10008140:	59800015 	stw	r6,0(r11)
10008144:	51800015 	stw	r6,0(r10)
10008148:	42000404 	addi	r8,r8,16
1000814c:	4a400404 	addi	r9,r9,16
10008150:	5ac00404 	addi	r11,r11,16
10008154:	52800404 	addi	r10,r10,16
10008158:	413ff71e 	bne	r8,r4,10008138 <__alt_data_end+0xf8008138>
1000815c:	63000044 	addi	r12,r12,1
10008160:	6018913a 	slli	r12,r12,4
10008164:	39c003cc 	andi	r7,r7,15
10008168:	010000c4 	movi	r4,3
1000816c:	1b07883a 	add	r3,r3,r12
10008170:	21c00e2e 	bgeu	r4,r7,100081ac <memset+0x100>
10008174:	1813883a 	mov	r9,r3
10008178:	3811883a 	mov	r8,r7
1000817c:	010000c4 	movi	r4,3
10008180:	49800015 	stw	r6,0(r9)
10008184:	423fff04 	addi	r8,r8,-4
10008188:	4a400104 	addi	r9,r9,4
1000818c:	223ffc36 	bltu	r4,r8,10008180 <__alt_data_end+0xf8008180>
10008190:	393fff04 	addi	r4,r7,-4
10008194:	2008d0ba 	srli	r4,r4,2
10008198:	39c000cc 	andi	r7,r7,3
1000819c:	21000044 	addi	r4,r4,1
100081a0:	2109883a 	add	r4,r4,r4
100081a4:	2109883a 	add	r4,r4,r4
100081a8:	1907883a 	add	r3,r3,r4
100081ac:	38000526 	beq	r7,zero,100081c4 <memset+0x118>
100081b0:	19cf883a 	add	r7,r3,r7
100081b4:	19400005 	stb	r5,0(r3)
100081b8:	18c00044 	addi	r3,r3,1
100081bc:	38fffd1e 	bne	r7,r3,100081b4 <__alt_data_end+0xf80081b4>
100081c0:	f800283a 	ret
100081c4:	f800283a 	ret
100081c8:	2007883a 	mov	r3,r4
100081cc:	300f883a 	mov	r7,r6
100081d0:	003fc706 	br	100080f0 <__alt_data_end+0xf80080f0>

100081d4 <_Balloc>:
100081d4:	20801317 	ldw	r2,76(r4)
100081d8:	defffc04 	addi	sp,sp,-16
100081dc:	dc400115 	stw	r17,4(sp)
100081e0:	dc000015 	stw	r16,0(sp)
100081e4:	dfc00315 	stw	ra,12(sp)
100081e8:	dc800215 	stw	r18,8(sp)
100081ec:	2023883a 	mov	r17,r4
100081f0:	2821883a 	mov	r16,r5
100081f4:	10000f26 	beq	r2,zero,10008234 <_Balloc+0x60>
100081f8:	8407883a 	add	r3,r16,r16
100081fc:	18c7883a 	add	r3,r3,r3
10008200:	10c7883a 	add	r3,r2,r3
10008204:	18800017 	ldw	r2,0(r3)
10008208:	10001126 	beq	r2,zero,10008250 <_Balloc+0x7c>
1000820c:	11000017 	ldw	r4,0(r2)
10008210:	19000015 	stw	r4,0(r3)
10008214:	10000415 	stw	zero,16(r2)
10008218:	10000315 	stw	zero,12(r2)
1000821c:	dfc00317 	ldw	ra,12(sp)
10008220:	dc800217 	ldw	r18,8(sp)
10008224:	dc400117 	ldw	r17,4(sp)
10008228:	dc000017 	ldw	r16,0(sp)
1000822c:	dec00404 	addi	sp,sp,16
10008230:	f800283a 	ret
10008234:	01800844 	movi	r6,33
10008238:	01400104 	movi	r5,4
1000823c:	000b27c0 	call	1000b27c <_calloc_r>
10008240:	88801315 	stw	r2,76(r17)
10008244:	103fec1e 	bne	r2,zero,100081f8 <__alt_data_end+0xf80081f8>
10008248:	0005883a 	mov	r2,zero
1000824c:	003ff306 	br	1000821c <__alt_data_end+0xf800821c>
10008250:	01400044 	movi	r5,1
10008254:	2c24983a 	sll	r18,r5,r16
10008258:	8809883a 	mov	r4,r17
1000825c:	91800144 	addi	r6,r18,5
10008260:	318d883a 	add	r6,r6,r6
10008264:	318d883a 	add	r6,r6,r6
10008268:	000b27c0 	call	1000b27c <_calloc_r>
1000826c:	103ff626 	beq	r2,zero,10008248 <__alt_data_end+0xf8008248>
10008270:	14000115 	stw	r16,4(r2)
10008274:	14800215 	stw	r18,8(r2)
10008278:	003fe606 	br	10008214 <__alt_data_end+0xf8008214>

1000827c <_Bfree>:
1000827c:	28000826 	beq	r5,zero,100082a0 <_Bfree+0x24>
10008280:	28c00117 	ldw	r3,4(r5)
10008284:	20801317 	ldw	r2,76(r4)
10008288:	18c7883a 	add	r3,r3,r3
1000828c:	18c7883a 	add	r3,r3,r3
10008290:	10c5883a 	add	r2,r2,r3
10008294:	10c00017 	ldw	r3,0(r2)
10008298:	28c00015 	stw	r3,0(r5)
1000829c:	11400015 	stw	r5,0(r2)
100082a0:	f800283a 	ret

100082a4 <__multadd>:
100082a4:	defff704 	addi	sp,sp,-36
100082a8:	dc800215 	stw	r18,8(sp)
100082ac:	2c800417 	ldw	r18,16(r5)
100082b0:	dd800615 	stw	r22,24(sp)
100082b4:	dd400515 	stw	r21,20(sp)
100082b8:	dd000415 	stw	r20,16(sp)
100082bc:	dcc00315 	stw	r19,12(sp)
100082c0:	dc400115 	stw	r17,4(sp)
100082c4:	dc000015 	stw	r16,0(sp)
100082c8:	dfc00815 	stw	ra,32(sp)
100082cc:	ddc00715 	stw	r23,28(sp)
100082d0:	2827883a 	mov	r19,r5
100082d4:	2029883a 	mov	r20,r4
100082d8:	3023883a 	mov	r17,r6
100082dc:	3821883a 	mov	r16,r7
100082e0:	2d400504 	addi	r21,r5,20
100082e4:	002d883a 	mov	r22,zero
100082e8:	adc00017 	ldw	r23,0(r21)
100082ec:	880b883a 	mov	r5,r17
100082f0:	ad400104 	addi	r21,r21,4
100082f4:	b93fffcc 	andi	r4,r23,65535
100082f8:	000c8880 	call	1000c888 <__mulsi3>
100082fc:	b808d43a 	srli	r4,r23,16
10008300:	880b883a 	mov	r5,r17
10008304:	1421883a 	add	r16,r2,r16
10008308:	000c8880 	call	1000c888 <__mulsi3>
1000830c:	800ed43a 	srli	r7,r16,16
10008310:	80ffffcc 	andi	r3,r16,65535
10008314:	b5800044 	addi	r22,r22,1
10008318:	11c5883a 	add	r2,r2,r7
1000831c:	100e943a 	slli	r7,r2,16
10008320:	1020d43a 	srli	r16,r2,16
10008324:	38c7883a 	add	r3,r7,r3
10008328:	a8ffff15 	stw	r3,-4(r21)
1000832c:	b4bfee16 	blt	r22,r18,100082e8 <__alt_data_end+0xf80082e8>
10008330:	80000926 	beq	r16,zero,10008358 <__multadd+0xb4>
10008334:	98800217 	ldw	r2,8(r19)
10008338:	9080130e 	bge	r18,r2,10008388 <__multadd+0xe4>
1000833c:	90800144 	addi	r2,r18,5
10008340:	1085883a 	add	r2,r2,r2
10008344:	1085883a 	add	r2,r2,r2
10008348:	9885883a 	add	r2,r19,r2
1000834c:	14000015 	stw	r16,0(r2)
10008350:	94800044 	addi	r18,r18,1
10008354:	9c800415 	stw	r18,16(r19)
10008358:	9805883a 	mov	r2,r19
1000835c:	dfc00817 	ldw	ra,32(sp)
10008360:	ddc00717 	ldw	r23,28(sp)
10008364:	dd800617 	ldw	r22,24(sp)
10008368:	dd400517 	ldw	r21,20(sp)
1000836c:	dd000417 	ldw	r20,16(sp)
10008370:	dcc00317 	ldw	r19,12(sp)
10008374:	dc800217 	ldw	r18,8(sp)
10008378:	dc400117 	ldw	r17,4(sp)
1000837c:	dc000017 	ldw	r16,0(sp)
10008380:	dec00904 	addi	sp,sp,36
10008384:	f800283a 	ret
10008388:	99400117 	ldw	r5,4(r19)
1000838c:	a009883a 	mov	r4,r20
10008390:	29400044 	addi	r5,r5,1
10008394:	00081d40 	call	100081d4 <_Balloc>
10008398:	99800417 	ldw	r6,16(r19)
1000839c:	99400304 	addi	r5,r19,12
100083a0:	11000304 	addi	r4,r2,12
100083a4:	31800084 	addi	r6,r6,2
100083a8:	318d883a 	add	r6,r6,r6
100083ac:	318d883a 	add	r6,r6,r6
100083b0:	1023883a 	mov	r17,r2
100083b4:	0007e080 	call	10007e08 <memcpy>
100083b8:	98000a26 	beq	r19,zero,100083e4 <__multadd+0x140>
100083bc:	98c00117 	ldw	r3,4(r19)
100083c0:	a0801317 	ldw	r2,76(r20)
100083c4:	18c7883a 	add	r3,r3,r3
100083c8:	18c7883a 	add	r3,r3,r3
100083cc:	10c5883a 	add	r2,r2,r3
100083d0:	10c00017 	ldw	r3,0(r2)
100083d4:	98c00015 	stw	r3,0(r19)
100083d8:	14c00015 	stw	r19,0(r2)
100083dc:	8827883a 	mov	r19,r17
100083e0:	003fd606 	br	1000833c <__alt_data_end+0xf800833c>
100083e4:	8827883a 	mov	r19,r17
100083e8:	003fd406 	br	1000833c <__alt_data_end+0xf800833c>

100083ec <__s2b>:
100083ec:	defff904 	addi	sp,sp,-28
100083f0:	dc400115 	stw	r17,4(sp)
100083f4:	dc000015 	stw	r16,0(sp)
100083f8:	2023883a 	mov	r17,r4
100083fc:	2821883a 	mov	r16,r5
10008400:	39000204 	addi	r4,r7,8
10008404:	01400244 	movi	r5,9
10008408:	dcc00315 	stw	r19,12(sp)
1000840c:	dc800215 	stw	r18,8(sp)
10008410:	dfc00615 	stw	ra,24(sp)
10008414:	dd400515 	stw	r21,20(sp)
10008418:	dd000415 	stw	r20,16(sp)
1000841c:	3825883a 	mov	r18,r7
10008420:	3027883a 	mov	r19,r6
10008424:	000c6d40 	call	1000c6d4 <__divsi3>
10008428:	00c00044 	movi	r3,1
1000842c:	000b883a 	mov	r5,zero
10008430:	1880030e 	bge	r3,r2,10008440 <__s2b+0x54>
10008434:	18c7883a 	add	r3,r3,r3
10008438:	29400044 	addi	r5,r5,1
1000843c:	18bffd16 	blt	r3,r2,10008434 <__alt_data_end+0xf8008434>
10008440:	8809883a 	mov	r4,r17
10008444:	00081d40 	call	100081d4 <_Balloc>
10008448:	d8c00717 	ldw	r3,28(sp)
1000844c:	10c00515 	stw	r3,20(r2)
10008450:	00c00044 	movi	r3,1
10008454:	10c00415 	stw	r3,16(r2)
10008458:	00c00244 	movi	r3,9
1000845c:	1cc0210e 	bge	r3,r19,100084e4 <__s2b+0xf8>
10008460:	80eb883a 	add	r21,r16,r3
10008464:	a829883a 	mov	r20,r21
10008468:	84e1883a 	add	r16,r16,r19
1000846c:	a1c00007 	ldb	r7,0(r20)
10008470:	01800284 	movi	r6,10
10008474:	a5000044 	addi	r20,r20,1
10008478:	100b883a 	mov	r5,r2
1000847c:	39fff404 	addi	r7,r7,-48
10008480:	8809883a 	mov	r4,r17
10008484:	00082a40 	call	100082a4 <__multadd>
10008488:	a43ff81e 	bne	r20,r16,1000846c <__alt_data_end+0xf800846c>
1000848c:	ace1883a 	add	r16,r21,r19
10008490:	843ffe04 	addi	r16,r16,-8
10008494:	9c800a0e 	bge	r19,r18,100084c0 <__s2b+0xd4>
10008498:	94e5c83a 	sub	r18,r18,r19
1000849c:	84a5883a 	add	r18,r16,r18
100084a0:	81c00007 	ldb	r7,0(r16)
100084a4:	01800284 	movi	r6,10
100084a8:	84000044 	addi	r16,r16,1
100084ac:	100b883a 	mov	r5,r2
100084b0:	39fff404 	addi	r7,r7,-48
100084b4:	8809883a 	mov	r4,r17
100084b8:	00082a40 	call	100082a4 <__multadd>
100084bc:	84bff81e 	bne	r16,r18,100084a0 <__alt_data_end+0xf80084a0>
100084c0:	dfc00617 	ldw	ra,24(sp)
100084c4:	dd400517 	ldw	r21,20(sp)
100084c8:	dd000417 	ldw	r20,16(sp)
100084cc:	dcc00317 	ldw	r19,12(sp)
100084d0:	dc800217 	ldw	r18,8(sp)
100084d4:	dc400117 	ldw	r17,4(sp)
100084d8:	dc000017 	ldw	r16,0(sp)
100084dc:	dec00704 	addi	sp,sp,28
100084e0:	f800283a 	ret
100084e4:	84000284 	addi	r16,r16,10
100084e8:	1827883a 	mov	r19,r3
100084ec:	003fe906 	br	10008494 <__alt_data_end+0xf8008494>

100084f0 <__hi0bits>:
100084f0:	20bfffec 	andhi	r2,r4,65535
100084f4:	1000141e 	bne	r2,zero,10008548 <__hi0bits+0x58>
100084f8:	2008943a 	slli	r4,r4,16
100084fc:	00800404 	movi	r2,16
10008500:	20ffc02c 	andhi	r3,r4,65280
10008504:	1800021e 	bne	r3,zero,10008510 <__hi0bits+0x20>
10008508:	2008923a 	slli	r4,r4,8
1000850c:	10800204 	addi	r2,r2,8
10008510:	20fc002c 	andhi	r3,r4,61440
10008514:	1800021e 	bne	r3,zero,10008520 <__hi0bits+0x30>
10008518:	2008913a 	slli	r4,r4,4
1000851c:	10800104 	addi	r2,r2,4
10008520:	20f0002c 	andhi	r3,r4,49152
10008524:	1800031e 	bne	r3,zero,10008534 <__hi0bits+0x44>
10008528:	2109883a 	add	r4,r4,r4
1000852c:	10800084 	addi	r2,r2,2
10008530:	2109883a 	add	r4,r4,r4
10008534:	20000316 	blt	r4,zero,10008544 <__hi0bits+0x54>
10008538:	2110002c 	andhi	r4,r4,16384
1000853c:	2000041e 	bne	r4,zero,10008550 <__hi0bits+0x60>
10008540:	00800804 	movi	r2,32
10008544:	f800283a 	ret
10008548:	0005883a 	mov	r2,zero
1000854c:	003fec06 	br	10008500 <__alt_data_end+0xf8008500>
10008550:	10800044 	addi	r2,r2,1
10008554:	f800283a 	ret

10008558 <__lo0bits>:
10008558:	20c00017 	ldw	r3,0(r4)
1000855c:	188001cc 	andi	r2,r3,7
10008560:	10000826 	beq	r2,zero,10008584 <__lo0bits+0x2c>
10008564:	1880004c 	andi	r2,r3,1
10008568:	1000211e 	bne	r2,zero,100085f0 <__lo0bits+0x98>
1000856c:	1880008c 	andi	r2,r3,2
10008570:	1000211e 	bne	r2,zero,100085f8 <__lo0bits+0xa0>
10008574:	1806d0ba 	srli	r3,r3,2
10008578:	00800084 	movi	r2,2
1000857c:	20c00015 	stw	r3,0(r4)
10008580:	f800283a 	ret
10008584:	18bfffcc 	andi	r2,r3,65535
10008588:	10001326 	beq	r2,zero,100085d8 <__lo0bits+0x80>
1000858c:	0005883a 	mov	r2,zero
10008590:	19403fcc 	andi	r5,r3,255
10008594:	2800021e 	bne	r5,zero,100085a0 <__lo0bits+0x48>
10008598:	1806d23a 	srli	r3,r3,8
1000859c:	10800204 	addi	r2,r2,8
100085a0:	194003cc 	andi	r5,r3,15
100085a4:	2800021e 	bne	r5,zero,100085b0 <__lo0bits+0x58>
100085a8:	1806d13a 	srli	r3,r3,4
100085ac:	10800104 	addi	r2,r2,4
100085b0:	194000cc 	andi	r5,r3,3
100085b4:	2800021e 	bne	r5,zero,100085c0 <__lo0bits+0x68>
100085b8:	1806d0ba 	srli	r3,r3,2
100085bc:	10800084 	addi	r2,r2,2
100085c0:	1940004c 	andi	r5,r3,1
100085c4:	2800081e 	bne	r5,zero,100085e8 <__lo0bits+0x90>
100085c8:	1806d07a 	srli	r3,r3,1
100085cc:	1800051e 	bne	r3,zero,100085e4 <__lo0bits+0x8c>
100085d0:	00800804 	movi	r2,32
100085d4:	f800283a 	ret
100085d8:	1806d43a 	srli	r3,r3,16
100085dc:	00800404 	movi	r2,16
100085e0:	003feb06 	br	10008590 <__alt_data_end+0xf8008590>
100085e4:	10800044 	addi	r2,r2,1
100085e8:	20c00015 	stw	r3,0(r4)
100085ec:	f800283a 	ret
100085f0:	0005883a 	mov	r2,zero
100085f4:	f800283a 	ret
100085f8:	1806d07a 	srli	r3,r3,1
100085fc:	00800044 	movi	r2,1
10008600:	20c00015 	stw	r3,0(r4)
10008604:	f800283a 	ret

10008608 <__i2b>:
10008608:	defffd04 	addi	sp,sp,-12
1000860c:	dc000015 	stw	r16,0(sp)
10008610:	04000044 	movi	r16,1
10008614:	dc400115 	stw	r17,4(sp)
10008618:	2823883a 	mov	r17,r5
1000861c:	800b883a 	mov	r5,r16
10008620:	dfc00215 	stw	ra,8(sp)
10008624:	00081d40 	call	100081d4 <_Balloc>
10008628:	14400515 	stw	r17,20(r2)
1000862c:	14000415 	stw	r16,16(r2)
10008630:	dfc00217 	ldw	ra,8(sp)
10008634:	dc400117 	ldw	r17,4(sp)
10008638:	dc000017 	ldw	r16,0(sp)
1000863c:	dec00304 	addi	sp,sp,12
10008640:	f800283a 	ret

10008644 <__multiply>:
10008644:	deffef04 	addi	sp,sp,-68
10008648:	dc400815 	stw	r17,32(sp)
1000864c:	dc000715 	stw	r16,28(sp)
10008650:	34400417 	ldw	r17,16(r6)
10008654:	2c000417 	ldw	r16,16(r5)
10008658:	dd800d15 	stw	r22,52(sp)
1000865c:	dc800915 	stw	r18,36(sp)
10008660:	dfc01015 	stw	ra,64(sp)
10008664:	df000f15 	stw	fp,60(sp)
10008668:	ddc00e15 	stw	r23,56(sp)
1000866c:	dd400c15 	stw	r21,48(sp)
10008670:	dd000b15 	stw	r20,44(sp)
10008674:	dcc00a15 	stw	r19,40(sp)
10008678:	2825883a 	mov	r18,r5
1000867c:	302d883a 	mov	r22,r6
10008680:	8440050e 	bge	r16,r17,10008698 <__multiply+0x54>
10008684:	8007883a 	mov	r3,r16
10008688:	3025883a 	mov	r18,r6
1000868c:	8821883a 	mov	r16,r17
10008690:	282d883a 	mov	r22,r5
10008694:	1823883a 	mov	r17,r3
10008698:	90800217 	ldw	r2,8(r18)
1000869c:	8447883a 	add	r3,r16,r17
100086a0:	d8c00215 	stw	r3,8(sp)
100086a4:	91400117 	ldw	r5,4(r18)
100086a8:	10c0010e 	bge	r2,r3,100086b0 <__multiply+0x6c>
100086ac:	29400044 	addi	r5,r5,1
100086b0:	00081d40 	call	100081d4 <_Balloc>
100086b4:	d8c00217 	ldw	r3,8(sp)
100086b8:	d8800615 	stw	r2,24(sp)
100086bc:	18eb883a 	add	r21,r3,r3
100086c0:	ad6b883a 	add	r21,r21,r21
100086c4:	10c00504 	addi	r3,r2,20
100086c8:	1d6b883a 	add	r21,r3,r21
100086cc:	d8c00115 	stw	r3,4(sp)
100086d0:	dd400315 	stw	r21,12(sp)
100086d4:	1805883a 	mov	r2,r3
100086d8:	1d40042e 	bgeu	r3,r21,100086ec <__multiply+0xa8>
100086dc:	d8c00317 	ldw	r3,12(sp)
100086e0:	10000015 	stw	zero,0(r2)
100086e4:	10800104 	addi	r2,r2,4
100086e8:	10fffc36 	bltu	r2,r3,100086dc <__alt_data_end+0xf80086dc>
100086ec:	8c63883a 	add	r17,r17,r17
100086f0:	b5800504 	addi	r22,r22,20
100086f4:	8c63883a 	add	r17,r17,r17
100086f8:	94800504 	addi	r18,r18,20
100086fc:	8421883a 	add	r16,r16,r16
10008700:	b463883a 	add	r17,r22,r17
10008704:	8421883a 	add	r16,r16,r16
10008708:	dd800015 	stw	r22,0(sp)
1000870c:	dc800415 	stw	r18,16(sp)
10008710:	dc400515 	stw	r17,20(sp)
10008714:	9429883a 	add	r20,r18,r16
10008718:	b4404f2e 	bgeu	r22,r17,10008858 <__multiply+0x214>
1000871c:	d8c00017 	ldw	r3,0(sp)
10008720:	1c800017 	ldw	r18,0(r3)
10008724:	947fffcc 	andi	r17,r18,65535
10008728:	88001e26 	beq	r17,zero,100087a4 <__multiply+0x160>
1000872c:	dd800117 	ldw	r22,4(sp)
10008730:	dd400417 	ldw	r21,16(sp)
10008734:	0027883a 	mov	r19,zero
10008738:	ac800017 	ldw	r18,0(r21)
1000873c:	b4000017 	ldw	r16,0(r22)
10008740:	880b883a 	mov	r5,r17
10008744:	913fffcc 	andi	r4,r18,65535
10008748:	000c8880 	call	1000c888 <__mulsi3>
1000874c:	9008d43a 	srli	r4,r18,16
10008750:	84bfffcc 	andi	r18,r16,65535
10008754:	1485883a 	add	r2,r2,r18
10008758:	14e5883a 	add	r18,r2,r19
1000875c:	8020d43a 	srli	r16,r16,16
10008760:	9026d43a 	srli	r19,r18,16
10008764:	880b883a 	mov	r5,r17
10008768:	000c8880 	call	1000c888 <__mulsi3>
1000876c:	1405883a 	add	r2,r2,r16
10008770:	14e1883a 	add	r16,r2,r19
10008774:	90ffffcc 	andi	r3,r18,65535
10008778:	8024943a 	slli	r18,r16,16
1000877c:	ad400104 	addi	r21,r21,4
10008780:	b005883a 	mov	r2,r22
10008784:	90c6b03a 	or	r3,r18,r3
10008788:	b0c00015 	stw	r3,0(r22)
1000878c:	8026d43a 	srli	r19,r16,16
10008790:	b5800104 	addi	r22,r22,4
10008794:	ad3fe836 	bltu	r21,r20,10008738 <__alt_data_end+0xf8008738>
10008798:	d8c00017 	ldw	r3,0(sp)
1000879c:	14c00115 	stw	r19,4(r2)
100087a0:	1c800017 	ldw	r18,0(r3)
100087a4:	9024d43a 	srli	r18,r18,16
100087a8:	90002226 	beq	r18,zero,10008834 <__multiply+0x1f0>
100087ac:	d8c00117 	ldw	r3,4(sp)
100087b0:	dd800417 	ldw	r22,16(sp)
100087b4:	002f883a 	mov	r23,zero
100087b8:	1f000017 	ldw	fp,0(r3)
100087bc:	1823883a 	mov	r17,r3
100087c0:	182b883a 	mov	r21,r3
100087c4:	e021883a 	mov	r16,fp
100087c8:	00000106 	br	100087d0 <__multiply+0x18c>
100087cc:	982b883a 	mov	r21,r19
100087d0:	b100000b 	ldhu	r4,0(r22)
100087d4:	8020d43a 	srli	r16,r16,16
100087d8:	900b883a 	mov	r5,r18
100087dc:	000c8880 	call	1000c888 <__mulsi3>
100087e0:	1405883a 	add	r2,r2,r16
100087e4:	15ef883a 	add	r23,r2,r23
100087e8:	b804943a 	slli	r2,r23,16
100087ec:	e0ffffcc 	andi	r3,fp,65535
100087f0:	8c400104 	addi	r17,r17,4
100087f4:	10c6b03a 	or	r3,r2,r3
100087f8:	88ffff15 	stw	r3,-4(r17)
100087fc:	b5800104 	addi	r22,r22,4
10008800:	b13fff17 	ldw	r4,-4(r22)
10008804:	acc00104 	addi	r19,r21,4
10008808:	900b883a 	mov	r5,r18
1000880c:	2008d43a 	srli	r4,r4,16
10008810:	9c000017 	ldw	r16,0(r19)
10008814:	000c8880 	call	1000c888 <__mulsi3>
10008818:	b806d43a 	srli	r3,r23,16
1000881c:	813fffcc 	andi	r4,r16,65535
10008820:	1105883a 	add	r2,r2,r4
10008824:	10f9883a 	add	fp,r2,r3
10008828:	e02ed43a 	srli	r23,fp,16
1000882c:	b53fe736 	bltu	r22,r20,100087cc <__alt_data_end+0xf80087cc>
10008830:	af000115 	stw	fp,4(r21)
10008834:	d8c00017 	ldw	r3,0(sp)
10008838:	d9000517 	ldw	r4,20(sp)
1000883c:	18c00104 	addi	r3,r3,4
10008840:	d8c00015 	stw	r3,0(sp)
10008844:	d8c00117 	ldw	r3,4(sp)
10008848:	18c00104 	addi	r3,r3,4
1000884c:	d8c00115 	stw	r3,4(sp)
10008850:	d8c00017 	ldw	r3,0(sp)
10008854:	193fb136 	bltu	r3,r4,1000871c <__alt_data_end+0xf800871c>
10008858:	d8c00217 	ldw	r3,8(sp)
1000885c:	00c00c0e 	bge	zero,r3,10008890 <__multiply+0x24c>
10008860:	d8c00317 	ldw	r3,12(sp)
10008864:	18bfff17 	ldw	r2,-4(r3)
10008868:	1d7fff04 	addi	r21,r3,-4
1000886c:	10000326 	beq	r2,zero,1000887c <__multiply+0x238>
10008870:	00000706 	br	10008890 <__multiply+0x24c>
10008874:	a8800017 	ldw	r2,0(r21)
10008878:	1000051e 	bne	r2,zero,10008890 <__multiply+0x24c>
1000887c:	d8c00217 	ldw	r3,8(sp)
10008880:	ad7fff04 	addi	r21,r21,-4
10008884:	18ffffc4 	addi	r3,r3,-1
10008888:	d8c00215 	stw	r3,8(sp)
1000888c:	183ff91e 	bne	r3,zero,10008874 <__alt_data_end+0xf8008874>
10008890:	d8c00617 	ldw	r3,24(sp)
10008894:	d9000217 	ldw	r4,8(sp)
10008898:	1805883a 	mov	r2,r3
1000889c:	19000415 	stw	r4,16(r3)
100088a0:	dfc01017 	ldw	ra,64(sp)
100088a4:	df000f17 	ldw	fp,60(sp)
100088a8:	ddc00e17 	ldw	r23,56(sp)
100088ac:	dd800d17 	ldw	r22,52(sp)
100088b0:	dd400c17 	ldw	r21,48(sp)
100088b4:	dd000b17 	ldw	r20,44(sp)
100088b8:	dcc00a17 	ldw	r19,40(sp)
100088bc:	dc800917 	ldw	r18,36(sp)
100088c0:	dc400817 	ldw	r17,32(sp)
100088c4:	dc000717 	ldw	r16,28(sp)
100088c8:	dec01104 	addi	sp,sp,68
100088cc:	f800283a 	ret

100088d0 <__pow5mult>:
100088d0:	defffa04 	addi	sp,sp,-24
100088d4:	dcc00315 	stw	r19,12(sp)
100088d8:	dc000015 	stw	r16,0(sp)
100088dc:	dfc00515 	stw	ra,20(sp)
100088e0:	dd000415 	stw	r20,16(sp)
100088e4:	dc800215 	stw	r18,8(sp)
100088e8:	dc400115 	stw	r17,4(sp)
100088ec:	308000cc 	andi	r2,r6,3
100088f0:	3021883a 	mov	r16,r6
100088f4:	2027883a 	mov	r19,r4
100088f8:	10002f1e 	bne	r2,zero,100089b8 <__pow5mult+0xe8>
100088fc:	2825883a 	mov	r18,r5
10008900:	8021d0ba 	srai	r16,r16,2
10008904:	80001a26 	beq	r16,zero,10008970 <__pow5mult+0xa0>
10008908:	9c401217 	ldw	r17,72(r19)
1000890c:	8800061e 	bne	r17,zero,10008928 <__pow5mult+0x58>
10008910:	00003406 	br	100089e4 <__pow5mult+0x114>
10008914:	8021d07a 	srai	r16,r16,1
10008918:	80001526 	beq	r16,zero,10008970 <__pow5mult+0xa0>
1000891c:	88800017 	ldw	r2,0(r17)
10008920:	10001c26 	beq	r2,zero,10008994 <__pow5mult+0xc4>
10008924:	1023883a 	mov	r17,r2
10008928:	8080004c 	andi	r2,r16,1
1000892c:	103ff926 	beq	r2,zero,10008914 <__alt_data_end+0xf8008914>
10008930:	880d883a 	mov	r6,r17
10008934:	900b883a 	mov	r5,r18
10008938:	9809883a 	mov	r4,r19
1000893c:	00086440 	call	10008644 <__multiply>
10008940:	90001b26 	beq	r18,zero,100089b0 <__pow5mult+0xe0>
10008944:	91000117 	ldw	r4,4(r18)
10008948:	98c01317 	ldw	r3,76(r19)
1000894c:	8021d07a 	srai	r16,r16,1
10008950:	2109883a 	add	r4,r4,r4
10008954:	2109883a 	add	r4,r4,r4
10008958:	1907883a 	add	r3,r3,r4
1000895c:	19000017 	ldw	r4,0(r3)
10008960:	91000015 	stw	r4,0(r18)
10008964:	1c800015 	stw	r18,0(r3)
10008968:	1025883a 	mov	r18,r2
1000896c:	803feb1e 	bne	r16,zero,1000891c <__alt_data_end+0xf800891c>
10008970:	9005883a 	mov	r2,r18
10008974:	dfc00517 	ldw	ra,20(sp)
10008978:	dd000417 	ldw	r20,16(sp)
1000897c:	dcc00317 	ldw	r19,12(sp)
10008980:	dc800217 	ldw	r18,8(sp)
10008984:	dc400117 	ldw	r17,4(sp)
10008988:	dc000017 	ldw	r16,0(sp)
1000898c:	dec00604 	addi	sp,sp,24
10008990:	f800283a 	ret
10008994:	880d883a 	mov	r6,r17
10008998:	880b883a 	mov	r5,r17
1000899c:	9809883a 	mov	r4,r19
100089a0:	00086440 	call	10008644 <__multiply>
100089a4:	88800015 	stw	r2,0(r17)
100089a8:	10000015 	stw	zero,0(r2)
100089ac:	003fdd06 	br	10008924 <__alt_data_end+0xf8008924>
100089b0:	1025883a 	mov	r18,r2
100089b4:	003fd706 	br	10008914 <__alt_data_end+0xf8008914>
100089b8:	10bfffc4 	addi	r2,r2,-1
100089bc:	1085883a 	add	r2,r2,r2
100089c0:	00c40074 	movhi	r3,4097
100089c4:	18c87d04 	addi	r3,r3,8692
100089c8:	1085883a 	add	r2,r2,r2
100089cc:	1885883a 	add	r2,r3,r2
100089d0:	11800017 	ldw	r6,0(r2)
100089d4:	000f883a 	mov	r7,zero
100089d8:	00082a40 	call	100082a4 <__multadd>
100089dc:	1025883a 	mov	r18,r2
100089e0:	003fc706 	br	10008900 <__alt_data_end+0xf8008900>
100089e4:	05000044 	movi	r20,1
100089e8:	a00b883a 	mov	r5,r20
100089ec:	9809883a 	mov	r4,r19
100089f0:	00081d40 	call	100081d4 <_Balloc>
100089f4:	1023883a 	mov	r17,r2
100089f8:	00809c44 	movi	r2,625
100089fc:	88800515 	stw	r2,20(r17)
10008a00:	8d000415 	stw	r20,16(r17)
10008a04:	9c401215 	stw	r17,72(r19)
10008a08:	88000015 	stw	zero,0(r17)
10008a0c:	003fc606 	br	10008928 <__alt_data_end+0xf8008928>

10008a10 <__lshift>:
10008a10:	defff904 	addi	sp,sp,-28
10008a14:	dd400515 	stw	r21,20(sp)
10008a18:	dcc00315 	stw	r19,12(sp)
10008a1c:	302bd17a 	srai	r21,r6,5
10008a20:	2cc00417 	ldw	r19,16(r5)
10008a24:	28800217 	ldw	r2,8(r5)
10008a28:	dd000415 	stw	r20,16(sp)
10008a2c:	ace7883a 	add	r19,r21,r19
10008a30:	dc800215 	stw	r18,8(sp)
10008a34:	dc400115 	stw	r17,4(sp)
10008a38:	dc000015 	stw	r16,0(sp)
10008a3c:	dfc00615 	stw	ra,24(sp)
10008a40:	9c000044 	addi	r16,r19,1
10008a44:	2823883a 	mov	r17,r5
10008a48:	3029883a 	mov	r20,r6
10008a4c:	2025883a 	mov	r18,r4
10008a50:	29400117 	ldw	r5,4(r5)
10008a54:	1400030e 	bge	r2,r16,10008a64 <__lshift+0x54>
10008a58:	1085883a 	add	r2,r2,r2
10008a5c:	29400044 	addi	r5,r5,1
10008a60:	143ffd16 	blt	r2,r16,10008a58 <__alt_data_end+0xf8008a58>
10008a64:	9009883a 	mov	r4,r18
10008a68:	00081d40 	call	100081d4 <_Balloc>
10008a6c:	10c00504 	addi	r3,r2,20
10008a70:	0540070e 	bge	zero,r21,10008a90 <__lshift+0x80>
10008a74:	ad6b883a 	add	r21,r21,r21
10008a78:	ad6b883a 	add	r21,r21,r21
10008a7c:	1809883a 	mov	r4,r3
10008a80:	1d47883a 	add	r3,r3,r21
10008a84:	20000015 	stw	zero,0(r4)
10008a88:	21000104 	addi	r4,r4,4
10008a8c:	193ffd1e 	bne	r3,r4,10008a84 <__alt_data_end+0xf8008a84>
10008a90:	8a000417 	ldw	r8,16(r17)
10008a94:	89000504 	addi	r4,r17,20
10008a98:	a18007cc 	andi	r6,r20,31
10008a9c:	4211883a 	add	r8,r8,r8
10008aa0:	4211883a 	add	r8,r8,r8
10008aa4:	2211883a 	add	r8,r4,r8
10008aa8:	30002326 	beq	r6,zero,10008b38 <__lshift+0x128>
10008aac:	02400804 	movi	r9,32
10008ab0:	4993c83a 	sub	r9,r9,r6
10008ab4:	000b883a 	mov	r5,zero
10008ab8:	21c00017 	ldw	r7,0(r4)
10008abc:	1815883a 	mov	r10,r3
10008ac0:	18c00104 	addi	r3,r3,4
10008ac4:	398e983a 	sll	r7,r7,r6
10008ac8:	21000104 	addi	r4,r4,4
10008acc:	394ab03a 	or	r5,r7,r5
10008ad0:	197fff15 	stw	r5,-4(r3)
10008ad4:	217fff17 	ldw	r5,-4(r4)
10008ad8:	2a4ad83a 	srl	r5,r5,r9
10008adc:	223ff636 	bltu	r4,r8,10008ab8 <__alt_data_end+0xf8008ab8>
10008ae0:	51400115 	stw	r5,4(r10)
10008ae4:	28001a1e 	bne	r5,zero,10008b50 <__lshift+0x140>
10008ae8:	843fffc4 	addi	r16,r16,-1
10008aec:	14000415 	stw	r16,16(r2)
10008af0:	88000826 	beq	r17,zero,10008b14 <__lshift+0x104>
10008af4:	89000117 	ldw	r4,4(r17)
10008af8:	90c01317 	ldw	r3,76(r18)
10008afc:	2109883a 	add	r4,r4,r4
10008b00:	2109883a 	add	r4,r4,r4
10008b04:	1907883a 	add	r3,r3,r4
10008b08:	19000017 	ldw	r4,0(r3)
10008b0c:	89000015 	stw	r4,0(r17)
10008b10:	1c400015 	stw	r17,0(r3)
10008b14:	dfc00617 	ldw	ra,24(sp)
10008b18:	dd400517 	ldw	r21,20(sp)
10008b1c:	dd000417 	ldw	r20,16(sp)
10008b20:	dcc00317 	ldw	r19,12(sp)
10008b24:	dc800217 	ldw	r18,8(sp)
10008b28:	dc400117 	ldw	r17,4(sp)
10008b2c:	dc000017 	ldw	r16,0(sp)
10008b30:	dec00704 	addi	sp,sp,28
10008b34:	f800283a 	ret
10008b38:	21400017 	ldw	r5,0(r4)
10008b3c:	18c00104 	addi	r3,r3,4
10008b40:	21000104 	addi	r4,r4,4
10008b44:	197fff15 	stw	r5,-4(r3)
10008b48:	223ffb36 	bltu	r4,r8,10008b38 <__alt_data_end+0xf8008b38>
10008b4c:	003fe606 	br	10008ae8 <__alt_data_end+0xf8008ae8>
10008b50:	9c000084 	addi	r16,r19,2
10008b54:	003fe406 	br	10008ae8 <__alt_data_end+0xf8008ae8>

10008b58 <__mcmp>:
10008b58:	20800417 	ldw	r2,16(r4)
10008b5c:	28c00417 	ldw	r3,16(r5)
10008b60:	10c5c83a 	sub	r2,r2,r3
10008b64:	1000111e 	bne	r2,zero,10008bac <__mcmp+0x54>
10008b68:	18c7883a 	add	r3,r3,r3
10008b6c:	18c7883a 	add	r3,r3,r3
10008b70:	21000504 	addi	r4,r4,20
10008b74:	29400504 	addi	r5,r5,20
10008b78:	20c5883a 	add	r2,r4,r3
10008b7c:	28cb883a 	add	r5,r5,r3
10008b80:	00000106 	br	10008b88 <__mcmp+0x30>
10008b84:	20800a2e 	bgeu	r4,r2,10008bb0 <__mcmp+0x58>
10008b88:	10bfff04 	addi	r2,r2,-4
10008b8c:	297fff04 	addi	r5,r5,-4
10008b90:	11800017 	ldw	r6,0(r2)
10008b94:	28c00017 	ldw	r3,0(r5)
10008b98:	30fffa26 	beq	r6,r3,10008b84 <__alt_data_end+0xf8008b84>
10008b9c:	30c00236 	bltu	r6,r3,10008ba8 <__mcmp+0x50>
10008ba0:	00800044 	movi	r2,1
10008ba4:	f800283a 	ret
10008ba8:	00bfffc4 	movi	r2,-1
10008bac:	f800283a 	ret
10008bb0:	0005883a 	mov	r2,zero
10008bb4:	f800283a 	ret

10008bb8 <__mdiff>:
10008bb8:	28c00417 	ldw	r3,16(r5)
10008bbc:	30800417 	ldw	r2,16(r6)
10008bc0:	defffa04 	addi	sp,sp,-24
10008bc4:	dcc00315 	stw	r19,12(sp)
10008bc8:	dc800215 	stw	r18,8(sp)
10008bcc:	dfc00515 	stw	ra,20(sp)
10008bd0:	dd000415 	stw	r20,16(sp)
10008bd4:	dc400115 	stw	r17,4(sp)
10008bd8:	dc000015 	stw	r16,0(sp)
10008bdc:	1887c83a 	sub	r3,r3,r2
10008be0:	2825883a 	mov	r18,r5
10008be4:	3027883a 	mov	r19,r6
10008be8:	1800141e 	bne	r3,zero,10008c3c <__mdiff+0x84>
10008bec:	1085883a 	add	r2,r2,r2
10008bf0:	1085883a 	add	r2,r2,r2
10008bf4:	2a000504 	addi	r8,r5,20
10008bf8:	34000504 	addi	r16,r6,20
10008bfc:	4087883a 	add	r3,r8,r2
10008c00:	8085883a 	add	r2,r16,r2
10008c04:	00000106 	br	10008c0c <__mdiff+0x54>
10008c08:	40c0592e 	bgeu	r8,r3,10008d70 <__mdiff+0x1b8>
10008c0c:	18ffff04 	addi	r3,r3,-4
10008c10:	10bfff04 	addi	r2,r2,-4
10008c14:	19c00017 	ldw	r7,0(r3)
10008c18:	11400017 	ldw	r5,0(r2)
10008c1c:	397ffa26 	beq	r7,r5,10008c08 <__alt_data_end+0xf8008c08>
10008c20:	3940592e 	bgeu	r7,r5,10008d88 <__mdiff+0x1d0>
10008c24:	9005883a 	mov	r2,r18
10008c28:	4023883a 	mov	r17,r8
10008c2c:	9825883a 	mov	r18,r19
10008c30:	05000044 	movi	r20,1
10008c34:	1027883a 	mov	r19,r2
10008c38:	00000406 	br	10008c4c <__mdiff+0x94>
10008c3c:	18005616 	blt	r3,zero,10008d98 <__mdiff+0x1e0>
10008c40:	34400504 	addi	r17,r6,20
10008c44:	2c000504 	addi	r16,r5,20
10008c48:	0029883a 	mov	r20,zero
10008c4c:	91400117 	ldw	r5,4(r18)
10008c50:	00081d40 	call	100081d4 <_Balloc>
10008c54:	92400417 	ldw	r9,16(r18)
10008c58:	9b000417 	ldw	r12,16(r19)
10008c5c:	12c00504 	addi	r11,r2,20
10008c60:	4a51883a 	add	r8,r9,r9
10008c64:	6319883a 	add	r12,r12,r12
10008c68:	4211883a 	add	r8,r8,r8
10008c6c:	6319883a 	add	r12,r12,r12
10008c70:	15000315 	stw	r20,12(r2)
10008c74:	8211883a 	add	r8,r16,r8
10008c78:	8b19883a 	add	r12,r17,r12
10008c7c:	0007883a 	mov	r3,zero
10008c80:	81400017 	ldw	r5,0(r16)
10008c84:	89c00017 	ldw	r7,0(r17)
10008c88:	59800104 	addi	r6,r11,4
10008c8c:	293fffcc 	andi	r4,r5,65535
10008c90:	20c7883a 	add	r3,r4,r3
10008c94:	393fffcc 	andi	r4,r7,65535
10008c98:	1909c83a 	sub	r4,r3,r4
10008c9c:	280ad43a 	srli	r5,r5,16
10008ca0:	380ed43a 	srli	r7,r7,16
10008ca4:	2007d43a 	srai	r3,r4,16
10008ca8:	213fffcc 	andi	r4,r4,65535
10008cac:	29cbc83a 	sub	r5,r5,r7
10008cb0:	28c7883a 	add	r3,r5,r3
10008cb4:	180a943a 	slli	r5,r3,16
10008cb8:	8c400104 	addi	r17,r17,4
10008cbc:	84000104 	addi	r16,r16,4
10008cc0:	2908b03a 	or	r4,r5,r4
10008cc4:	59000015 	stw	r4,0(r11)
10008cc8:	1807d43a 	srai	r3,r3,16
10008ccc:	3015883a 	mov	r10,r6
10008cd0:	3017883a 	mov	r11,r6
10008cd4:	8b3fea36 	bltu	r17,r12,10008c80 <__alt_data_end+0xf8008c80>
10008cd8:	8200162e 	bgeu	r16,r8,10008d34 <__mdiff+0x17c>
10008cdc:	8017883a 	mov	r11,r16
10008ce0:	59400017 	ldw	r5,0(r11)
10008ce4:	31800104 	addi	r6,r6,4
10008ce8:	5ac00104 	addi	r11,r11,4
10008cec:	293fffcc 	andi	r4,r5,65535
10008cf0:	20c7883a 	add	r3,r4,r3
10008cf4:	280ed43a 	srli	r7,r5,16
10008cf8:	180bd43a 	srai	r5,r3,16
10008cfc:	193fffcc 	andi	r4,r3,65535
10008d00:	3947883a 	add	r3,r7,r5
10008d04:	180a943a 	slli	r5,r3,16
10008d08:	1807d43a 	srai	r3,r3,16
10008d0c:	2908b03a 	or	r4,r5,r4
10008d10:	313fff15 	stw	r4,-4(r6)
10008d14:	5a3ff236 	bltu	r11,r8,10008ce0 <__alt_data_end+0xf8008ce0>
10008d18:	0406303a 	nor	r3,zero,r16
10008d1c:	1a07883a 	add	r3,r3,r8
10008d20:	1806d0ba 	srli	r3,r3,2
10008d24:	18c00044 	addi	r3,r3,1
10008d28:	18c7883a 	add	r3,r3,r3
10008d2c:	18c7883a 	add	r3,r3,r3
10008d30:	50d5883a 	add	r10,r10,r3
10008d34:	50ffff04 	addi	r3,r10,-4
10008d38:	2000041e 	bne	r4,zero,10008d4c <__mdiff+0x194>
10008d3c:	18ffff04 	addi	r3,r3,-4
10008d40:	19000017 	ldw	r4,0(r3)
10008d44:	4a7fffc4 	addi	r9,r9,-1
10008d48:	203ffc26 	beq	r4,zero,10008d3c <__alt_data_end+0xf8008d3c>
10008d4c:	12400415 	stw	r9,16(r2)
10008d50:	dfc00517 	ldw	ra,20(sp)
10008d54:	dd000417 	ldw	r20,16(sp)
10008d58:	dcc00317 	ldw	r19,12(sp)
10008d5c:	dc800217 	ldw	r18,8(sp)
10008d60:	dc400117 	ldw	r17,4(sp)
10008d64:	dc000017 	ldw	r16,0(sp)
10008d68:	dec00604 	addi	sp,sp,24
10008d6c:	f800283a 	ret
10008d70:	000b883a 	mov	r5,zero
10008d74:	00081d40 	call	100081d4 <_Balloc>
10008d78:	00c00044 	movi	r3,1
10008d7c:	10c00415 	stw	r3,16(r2)
10008d80:	10000515 	stw	zero,20(r2)
10008d84:	003ff206 	br	10008d50 <__alt_data_end+0xf8008d50>
10008d88:	8023883a 	mov	r17,r16
10008d8c:	0029883a 	mov	r20,zero
10008d90:	4021883a 	mov	r16,r8
10008d94:	003fad06 	br	10008c4c <__alt_data_end+0xf8008c4c>
10008d98:	9005883a 	mov	r2,r18
10008d9c:	94400504 	addi	r17,r18,20
10008da0:	9c000504 	addi	r16,r19,20
10008da4:	9825883a 	mov	r18,r19
10008da8:	05000044 	movi	r20,1
10008dac:	1027883a 	mov	r19,r2
10008db0:	003fa606 	br	10008c4c <__alt_data_end+0xf8008c4c>

10008db4 <__ulp>:
10008db4:	295ffc2c 	andhi	r5,r5,32752
10008db8:	00bf3034 	movhi	r2,64704
10008dbc:	2887883a 	add	r3,r5,r2
10008dc0:	00c0020e 	bge	zero,r3,10008dcc <__ulp+0x18>
10008dc4:	0005883a 	mov	r2,zero
10008dc8:	f800283a 	ret
10008dcc:	00c7c83a 	sub	r3,zero,r3
10008dd0:	1807d53a 	srai	r3,r3,20
10008dd4:	008004c4 	movi	r2,19
10008dd8:	10c00b0e 	bge	r2,r3,10008e08 <__ulp+0x54>
10008ddc:	18bffb04 	addi	r2,r3,-20
10008de0:	01000784 	movi	r4,30
10008de4:	0007883a 	mov	r3,zero
10008de8:	20800516 	blt	r4,r2,10008e00 <__ulp+0x4c>
10008dec:	010007c4 	movi	r4,31
10008df0:	2089c83a 	sub	r4,r4,r2
10008df4:	00800044 	movi	r2,1
10008df8:	1104983a 	sll	r2,r2,r4
10008dfc:	f800283a 	ret
10008e00:	00800044 	movi	r2,1
10008e04:	f800283a 	ret
10008e08:	01400234 	movhi	r5,8
10008e0c:	28c7d83a 	sra	r3,r5,r3
10008e10:	0005883a 	mov	r2,zero
10008e14:	f800283a 	ret

10008e18 <__b2d>:
10008e18:	defffa04 	addi	sp,sp,-24
10008e1c:	dc000015 	stw	r16,0(sp)
10008e20:	24000417 	ldw	r16,16(r4)
10008e24:	dc400115 	stw	r17,4(sp)
10008e28:	24400504 	addi	r17,r4,20
10008e2c:	8421883a 	add	r16,r16,r16
10008e30:	8421883a 	add	r16,r16,r16
10008e34:	8c21883a 	add	r16,r17,r16
10008e38:	dc800215 	stw	r18,8(sp)
10008e3c:	84bfff17 	ldw	r18,-4(r16)
10008e40:	dd000415 	stw	r20,16(sp)
10008e44:	dcc00315 	stw	r19,12(sp)
10008e48:	9009883a 	mov	r4,r18
10008e4c:	2829883a 	mov	r20,r5
10008e50:	dfc00515 	stw	ra,20(sp)
10008e54:	00084f00 	call	100084f0 <__hi0bits>
10008e58:	00c00804 	movi	r3,32
10008e5c:	1889c83a 	sub	r4,r3,r2
10008e60:	a1000015 	stw	r4,0(r20)
10008e64:	01000284 	movi	r4,10
10008e68:	84ffff04 	addi	r19,r16,-4
10008e6c:	20801216 	blt	r4,r2,10008eb8 <__b2d+0xa0>
10008e70:	018002c4 	movi	r6,11
10008e74:	308dc83a 	sub	r6,r6,r2
10008e78:	9186d83a 	srl	r3,r18,r6
10008e7c:	18cffc34 	orhi	r3,r3,16368
10008e80:	8cc0212e 	bgeu	r17,r19,10008f08 <__b2d+0xf0>
10008e84:	813ffe17 	ldw	r4,-8(r16)
10008e88:	218cd83a 	srl	r6,r4,r6
10008e8c:	10800544 	addi	r2,r2,21
10008e90:	9084983a 	sll	r2,r18,r2
10008e94:	1184b03a 	or	r2,r2,r6
10008e98:	dfc00517 	ldw	ra,20(sp)
10008e9c:	dd000417 	ldw	r20,16(sp)
10008ea0:	dcc00317 	ldw	r19,12(sp)
10008ea4:	dc800217 	ldw	r18,8(sp)
10008ea8:	dc400117 	ldw	r17,4(sp)
10008eac:	dc000017 	ldw	r16,0(sp)
10008eb0:	dec00604 	addi	sp,sp,24
10008eb4:	f800283a 	ret
10008eb8:	8cc00f2e 	bgeu	r17,r19,10008ef8 <__b2d+0xe0>
10008ebc:	117ffd44 	addi	r5,r2,-11
10008ec0:	80bffe17 	ldw	r2,-8(r16)
10008ec4:	28000e26 	beq	r5,zero,10008f00 <__b2d+0xe8>
10008ec8:	1949c83a 	sub	r4,r3,r5
10008ecc:	9164983a 	sll	r18,r18,r5
10008ed0:	1106d83a 	srl	r3,r2,r4
10008ed4:	81bffe04 	addi	r6,r16,-8
10008ed8:	948ffc34 	orhi	r18,r18,16368
10008edc:	90c6b03a 	or	r3,r18,r3
10008ee0:	89800e2e 	bgeu	r17,r6,10008f1c <__b2d+0x104>
10008ee4:	81bffd17 	ldw	r6,-12(r16)
10008ee8:	1144983a 	sll	r2,r2,r5
10008eec:	310ad83a 	srl	r5,r6,r4
10008ef0:	2884b03a 	or	r2,r5,r2
10008ef4:	003fe806 	br	10008e98 <__alt_data_end+0xf8008e98>
10008ef8:	10bffd44 	addi	r2,r2,-11
10008efc:	1000041e 	bne	r2,zero,10008f10 <__b2d+0xf8>
10008f00:	90cffc34 	orhi	r3,r18,16368
10008f04:	003fe406 	br	10008e98 <__alt_data_end+0xf8008e98>
10008f08:	000d883a 	mov	r6,zero
10008f0c:	003fdf06 	br	10008e8c <__alt_data_end+0xf8008e8c>
10008f10:	90a4983a 	sll	r18,r18,r2
10008f14:	0005883a 	mov	r2,zero
10008f18:	003ff906 	br	10008f00 <__alt_data_end+0xf8008f00>
10008f1c:	1144983a 	sll	r2,r2,r5
10008f20:	003fdd06 	br	10008e98 <__alt_data_end+0xf8008e98>

10008f24 <__d2b>:
10008f24:	defff804 	addi	sp,sp,-32
10008f28:	dc000215 	stw	r16,8(sp)
10008f2c:	3021883a 	mov	r16,r6
10008f30:	dc400315 	stw	r17,12(sp)
10008f34:	8022907a 	slli	r17,r16,1
10008f38:	dd000615 	stw	r20,24(sp)
10008f3c:	2829883a 	mov	r20,r5
10008f40:	01400044 	movi	r5,1
10008f44:	dcc00515 	stw	r19,20(sp)
10008f48:	dc800415 	stw	r18,16(sp)
10008f4c:	dfc00715 	stw	ra,28(sp)
10008f50:	3825883a 	mov	r18,r7
10008f54:	8822d57a 	srli	r17,r17,21
10008f58:	00081d40 	call	100081d4 <_Balloc>
10008f5c:	1027883a 	mov	r19,r2
10008f60:	00800434 	movhi	r2,16
10008f64:	10bfffc4 	addi	r2,r2,-1
10008f68:	808c703a 	and	r6,r16,r2
10008f6c:	88000126 	beq	r17,zero,10008f74 <__d2b+0x50>
10008f70:	31800434 	orhi	r6,r6,16
10008f74:	d9800015 	stw	r6,0(sp)
10008f78:	a0002426 	beq	r20,zero,1000900c <__d2b+0xe8>
10008f7c:	d9000104 	addi	r4,sp,4
10008f80:	dd000115 	stw	r20,4(sp)
10008f84:	00085580 	call	10008558 <__lo0bits>
10008f88:	d8c00017 	ldw	r3,0(sp)
10008f8c:	10002f1e 	bne	r2,zero,1000904c <__d2b+0x128>
10008f90:	d9000117 	ldw	r4,4(sp)
10008f94:	99000515 	stw	r4,20(r19)
10008f98:	1821003a 	cmpeq	r16,r3,zero
10008f9c:	01000084 	movi	r4,2
10008fa0:	2421c83a 	sub	r16,r4,r16
10008fa4:	98c00615 	stw	r3,24(r19)
10008fa8:	9c000415 	stw	r16,16(r19)
10008fac:	88001f1e 	bne	r17,zero,1000902c <__d2b+0x108>
10008fb0:	10bef384 	addi	r2,r2,-1074
10008fb4:	90800015 	stw	r2,0(r18)
10008fb8:	00900034 	movhi	r2,16384
10008fbc:	10bfffc4 	addi	r2,r2,-1
10008fc0:	8085883a 	add	r2,r16,r2
10008fc4:	1085883a 	add	r2,r2,r2
10008fc8:	1085883a 	add	r2,r2,r2
10008fcc:	9885883a 	add	r2,r19,r2
10008fd0:	11000517 	ldw	r4,20(r2)
10008fd4:	8020917a 	slli	r16,r16,5
10008fd8:	00084f00 	call	100084f0 <__hi0bits>
10008fdc:	d8c00817 	ldw	r3,32(sp)
10008fe0:	8085c83a 	sub	r2,r16,r2
10008fe4:	18800015 	stw	r2,0(r3)
10008fe8:	9805883a 	mov	r2,r19
10008fec:	dfc00717 	ldw	ra,28(sp)
10008ff0:	dd000617 	ldw	r20,24(sp)
10008ff4:	dcc00517 	ldw	r19,20(sp)
10008ff8:	dc800417 	ldw	r18,16(sp)
10008ffc:	dc400317 	ldw	r17,12(sp)
10009000:	dc000217 	ldw	r16,8(sp)
10009004:	dec00804 	addi	sp,sp,32
10009008:	f800283a 	ret
1000900c:	d809883a 	mov	r4,sp
10009010:	00085580 	call	10008558 <__lo0bits>
10009014:	d8c00017 	ldw	r3,0(sp)
10009018:	04000044 	movi	r16,1
1000901c:	9c000415 	stw	r16,16(r19)
10009020:	98c00515 	stw	r3,20(r19)
10009024:	10800804 	addi	r2,r2,32
10009028:	883fe126 	beq	r17,zero,10008fb0 <__alt_data_end+0xf8008fb0>
1000902c:	00c00d44 	movi	r3,53
10009030:	8c7ef344 	addi	r17,r17,-1075
10009034:	88a3883a 	add	r17,r17,r2
10009038:	1885c83a 	sub	r2,r3,r2
1000903c:	d8c00817 	ldw	r3,32(sp)
10009040:	94400015 	stw	r17,0(r18)
10009044:	18800015 	stw	r2,0(r3)
10009048:	003fe706 	br	10008fe8 <__alt_data_end+0xf8008fe8>
1000904c:	01000804 	movi	r4,32
10009050:	2089c83a 	sub	r4,r4,r2
10009054:	1908983a 	sll	r4,r3,r4
10009058:	d9400117 	ldw	r5,4(sp)
1000905c:	1886d83a 	srl	r3,r3,r2
10009060:	2148b03a 	or	r4,r4,r5
10009064:	99000515 	stw	r4,20(r19)
10009068:	d8c00015 	stw	r3,0(sp)
1000906c:	003fca06 	br	10008f98 <__alt_data_end+0xf8008f98>

10009070 <__ratio>:
10009070:	defff904 	addi	sp,sp,-28
10009074:	dc400315 	stw	r17,12(sp)
10009078:	2823883a 	mov	r17,r5
1000907c:	d9400104 	addi	r5,sp,4
10009080:	dfc00615 	stw	ra,24(sp)
10009084:	dcc00515 	stw	r19,20(sp)
10009088:	dc800415 	stw	r18,16(sp)
1000908c:	2027883a 	mov	r19,r4
10009090:	dc000215 	stw	r16,8(sp)
10009094:	0008e180 	call	10008e18 <__b2d>
10009098:	d80b883a 	mov	r5,sp
1000909c:	8809883a 	mov	r4,r17
100090a0:	1025883a 	mov	r18,r2
100090a4:	1821883a 	mov	r16,r3
100090a8:	0008e180 	call	10008e18 <__b2d>
100090ac:	8a000417 	ldw	r8,16(r17)
100090b0:	99000417 	ldw	r4,16(r19)
100090b4:	d9400117 	ldw	r5,4(sp)
100090b8:	2209c83a 	sub	r4,r4,r8
100090bc:	2010917a 	slli	r8,r4,5
100090c0:	d9000017 	ldw	r4,0(sp)
100090c4:	2909c83a 	sub	r4,r5,r4
100090c8:	4109883a 	add	r4,r8,r4
100090cc:	01000e0e 	bge	zero,r4,10009108 <__ratio+0x98>
100090d0:	2008953a 	slli	r4,r4,20
100090d4:	2421883a 	add	r16,r4,r16
100090d8:	100d883a 	mov	r6,r2
100090dc:	180f883a 	mov	r7,r3
100090e0:	9009883a 	mov	r4,r18
100090e4:	800b883a 	mov	r5,r16
100090e8:	000d15c0 	call	1000d15c <__divdf3>
100090ec:	dfc00617 	ldw	ra,24(sp)
100090f0:	dcc00517 	ldw	r19,20(sp)
100090f4:	dc800417 	ldw	r18,16(sp)
100090f8:	dc400317 	ldw	r17,12(sp)
100090fc:	dc000217 	ldw	r16,8(sp)
10009100:	dec00704 	addi	sp,sp,28
10009104:	f800283a 	ret
10009108:	2008953a 	slli	r4,r4,20
1000910c:	1907c83a 	sub	r3,r3,r4
10009110:	003ff106 	br	100090d8 <__alt_data_end+0xf80090d8>

10009114 <_mprec_log10>:
10009114:	defffe04 	addi	sp,sp,-8
10009118:	dc000015 	stw	r16,0(sp)
1000911c:	dfc00115 	stw	ra,4(sp)
10009120:	008005c4 	movi	r2,23
10009124:	2021883a 	mov	r16,r4
10009128:	11000d0e 	bge	r2,r4,10009160 <_mprec_log10+0x4c>
1000912c:	0005883a 	mov	r2,zero
10009130:	00cffc34 	movhi	r3,16368
10009134:	843fffc4 	addi	r16,r16,-1
10009138:	000d883a 	mov	r6,zero
1000913c:	01d00934 	movhi	r7,16420
10009140:	1009883a 	mov	r4,r2
10009144:	180b883a 	mov	r5,r3
10009148:	000dd840 	call	1000dd84 <__muldf3>
1000914c:	803ff91e 	bne	r16,zero,10009134 <__alt_data_end+0xf8009134>
10009150:	dfc00117 	ldw	ra,4(sp)
10009154:	dc000017 	ldw	r16,0(sp)
10009158:	dec00204 	addi	sp,sp,8
1000915c:	f800283a 	ret
10009160:	202090fa 	slli	r16,r4,3
10009164:	00840074 	movhi	r2,4097
10009168:	10889404 	addi	r2,r2,8784
1000916c:	1421883a 	add	r16,r2,r16
10009170:	80800017 	ldw	r2,0(r16)
10009174:	80c00117 	ldw	r3,4(r16)
10009178:	dfc00117 	ldw	ra,4(sp)
1000917c:	dc000017 	ldw	r16,0(sp)
10009180:	dec00204 	addi	sp,sp,8
10009184:	f800283a 	ret

10009188 <__copybits>:
10009188:	297fffc4 	addi	r5,r5,-1
1000918c:	280fd17a 	srai	r7,r5,5
10009190:	30c00417 	ldw	r3,16(r6)
10009194:	30800504 	addi	r2,r6,20
10009198:	39c00044 	addi	r7,r7,1
1000919c:	18c7883a 	add	r3,r3,r3
100091a0:	39cf883a 	add	r7,r7,r7
100091a4:	18c7883a 	add	r3,r3,r3
100091a8:	39cf883a 	add	r7,r7,r7
100091ac:	10c7883a 	add	r3,r2,r3
100091b0:	21cf883a 	add	r7,r4,r7
100091b4:	10c00d2e 	bgeu	r2,r3,100091ec <__copybits+0x64>
100091b8:	200b883a 	mov	r5,r4
100091bc:	12000017 	ldw	r8,0(r2)
100091c0:	29400104 	addi	r5,r5,4
100091c4:	10800104 	addi	r2,r2,4
100091c8:	2a3fff15 	stw	r8,-4(r5)
100091cc:	10fffb36 	bltu	r2,r3,100091bc <__alt_data_end+0xf80091bc>
100091d0:	1985c83a 	sub	r2,r3,r6
100091d4:	10bffac4 	addi	r2,r2,-21
100091d8:	1004d0ba 	srli	r2,r2,2
100091dc:	10800044 	addi	r2,r2,1
100091e0:	1085883a 	add	r2,r2,r2
100091e4:	1085883a 	add	r2,r2,r2
100091e8:	2089883a 	add	r4,r4,r2
100091ec:	21c0032e 	bgeu	r4,r7,100091fc <__copybits+0x74>
100091f0:	20000015 	stw	zero,0(r4)
100091f4:	21000104 	addi	r4,r4,4
100091f8:	21fffd36 	bltu	r4,r7,100091f0 <__alt_data_end+0xf80091f0>
100091fc:	f800283a 	ret

10009200 <__any_on>:
10009200:	20c00417 	ldw	r3,16(r4)
10009204:	2805d17a 	srai	r2,r5,5
10009208:	21000504 	addi	r4,r4,20
1000920c:	18800d0e 	bge	r3,r2,10009244 <__any_on+0x44>
10009210:	18c7883a 	add	r3,r3,r3
10009214:	18c7883a 	add	r3,r3,r3
10009218:	20c7883a 	add	r3,r4,r3
1000921c:	20c0192e 	bgeu	r4,r3,10009284 <__any_on+0x84>
10009220:	18bfff17 	ldw	r2,-4(r3)
10009224:	18ffff04 	addi	r3,r3,-4
10009228:	1000041e 	bne	r2,zero,1000923c <__any_on+0x3c>
1000922c:	20c0142e 	bgeu	r4,r3,10009280 <__any_on+0x80>
10009230:	18ffff04 	addi	r3,r3,-4
10009234:	19400017 	ldw	r5,0(r3)
10009238:	283ffc26 	beq	r5,zero,1000922c <__alt_data_end+0xf800922c>
1000923c:	00800044 	movi	r2,1
10009240:	f800283a 	ret
10009244:	10c00a0e 	bge	r2,r3,10009270 <__any_on+0x70>
10009248:	1085883a 	add	r2,r2,r2
1000924c:	1085883a 	add	r2,r2,r2
10009250:	294007cc 	andi	r5,r5,31
10009254:	2087883a 	add	r3,r4,r2
10009258:	283ff026 	beq	r5,zero,1000921c <__alt_data_end+0xf800921c>
1000925c:	19800017 	ldw	r6,0(r3)
10009260:	3144d83a 	srl	r2,r6,r5
10009264:	114a983a 	sll	r5,r2,r5
10009268:	317ff41e 	bne	r6,r5,1000923c <__alt_data_end+0xf800923c>
1000926c:	003feb06 	br	1000921c <__alt_data_end+0xf800921c>
10009270:	1085883a 	add	r2,r2,r2
10009274:	1085883a 	add	r2,r2,r2
10009278:	2087883a 	add	r3,r4,r2
1000927c:	003fe706 	br	1000921c <__alt_data_end+0xf800921c>
10009280:	f800283a 	ret
10009284:	0005883a 	mov	r2,zero
10009288:	f800283a 	ret

1000928c <_realloc_r>:
1000928c:	defff604 	addi	sp,sp,-40
10009290:	dc400115 	stw	r17,4(sp)
10009294:	dfc00915 	stw	ra,36(sp)
10009298:	df000815 	stw	fp,32(sp)
1000929c:	ddc00715 	stw	r23,28(sp)
100092a0:	dd800615 	stw	r22,24(sp)
100092a4:	dd400515 	stw	r21,20(sp)
100092a8:	dd000415 	stw	r20,16(sp)
100092ac:	dcc00315 	stw	r19,12(sp)
100092b0:	dc800215 	stw	r18,8(sp)
100092b4:	dc000015 	stw	r16,0(sp)
100092b8:	3023883a 	mov	r17,r6
100092bc:	2800b626 	beq	r5,zero,10009598 <_realloc_r+0x30c>
100092c0:	2829883a 	mov	r20,r5
100092c4:	2025883a 	mov	r18,r4
100092c8:	000f73c0 	call	1000f73c <__malloc_lock>
100092cc:	a0ffff17 	ldw	r3,-4(r20)
100092d0:	043fff04 	movi	r16,-4
100092d4:	888002c4 	addi	r2,r17,11
100092d8:	01000584 	movi	r4,22
100092dc:	a57ffe04 	addi	r21,r20,-8
100092e0:	1c20703a 	and	r16,r3,r16
100092e4:	2080332e 	bgeu	r4,r2,100093b4 <_realloc_r+0x128>
100092e8:	05bffe04 	movi	r22,-8
100092ec:	15ac703a 	and	r22,r2,r22
100092f0:	b005883a 	mov	r2,r22
100092f4:	b0005716 	blt	r22,zero,10009454 <_realloc_r+0x1c8>
100092f8:	b4405636 	bltu	r22,r17,10009454 <_realloc_r+0x1c8>
100092fc:	8080300e 	bge	r16,r2,100093c0 <_realloc_r+0x134>
10009300:	07040074 	movhi	fp,4097
10009304:	e70a4204 	addi	fp,fp,10504
10009308:	e2000217 	ldw	r8,8(fp)
1000930c:	ac09883a 	add	r4,r21,r16
10009310:	22006126 	beq	r4,r8,10009498 <_realloc_r+0x20c>
10009314:	22400117 	ldw	r9,4(r4)
10009318:	01ffff84 	movi	r7,-2
1000931c:	49ce703a 	and	r7,r9,r7
10009320:	21cf883a 	add	r7,r4,r7
10009324:	39800117 	ldw	r6,4(r7)
10009328:	3180004c 	andi	r6,r6,1
1000932c:	30003e26 	beq	r6,zero,10009428 <_realloc_r+0x19c>
10009330:	18c0004c 	andi	r3,r3,1
10009334:	18008126 	beq	r3,zero,1000953c <_realloc_r+0x2b0>
10009338:	880b883a 	mov	r5,r17
1000933c:	9009883a 	mov	r4,r18
10009340:	00075180 	call	10007518 <_malloc_r>
10009344:	1023883a 	mov	r17,r2
10009348:	10011e26 	beq	r2,zero,100097c4 <_realloc_r+0x538>
1000934c:	a0ffff17 	ldw	r3,-4(r20)
10009350:	113ffe04 	addi	r4,r2,-8
10009354:	00bfff84 	movi	r2,-2
10009358:	1884703a 	and	r2,r3,r2
1000935c:	a885883a 	add	r2,r21,r2
10009360:	2080ee26 	beq	r4,r2,1000971c <_realloc_r+0x490>
10009364:	81bfff04 	addi	r6,r16,-4
10009368:	00800904 	movi	r2,36
1000936c:	1180b836 	bltu	r2,r6,10009650 <_realloc_r+0x3c4>
10009370:	00c004c4 	movi	r3,19
10009374:	19809536 	bltu	r3,r6,100095cc <_realloc_r+0x340>
10009378:	8805883a 	mov	r2,r17
1000937c:	a007883a 	mov	r3,r20
10009380:	19000017 	ldw	r4,0(r3)
10009384:	11000015 	stw	r4,0(r2)
10009388:	19000117 	ldw	r4,4(r3)
1000938c:	11000115 	stw	r4,4(r2)
10009390:	18c00217 	ldw	r3,8(r3)
10009394:	10c00215 	stw	r3,8(r2)
10009398:	a00b883a 	mov	r5,r20
1000939c:	9009883a 	mov	r4,r18
100093a0:	00069200 	call	10006920 <_free_r>
100093a4:	9009883a 	mov	r4,r18
100093a8:	000f7600 	call	1000f760 <__malloc_unlock>
100093ac:	8805883a 	mov	r2,r17
100093b0:	00001106 	br	100093f8 <_realloc_r+0x16c>
100093b4:	00800404 	movi	r2,16
100093b8:	102d883a 	mov	r22,r2
100093bc:	003fce06 	br	100092f8 <__alt_data_end+0xf80092f8>
100093c0:	a023883a 	mov	r17,r20
100093c4:	858fc83a 	sub	r7,r16,r22
100093c8:	008003c4 	movi	r2,15
100093cc:	18c0004c 	andi	r3,r3,1
100093d0:	11c02436 	bltu	r2,r7,10009464 <_realloc_r+0x1d8>
100093d4:	1c06b03a 	or	r3,r3,r16
100093d8:	a8c00115 	stw	r3,4(r21)
100093dc:	ac21883a 	add	r16,r21,r16
100093e0:	80800117 	ldw	r2,4(r16)
100093e4:	10800054 	ori	r2,r2,1
100093e8:	80800115 	stw	r2,4(r16)
100093ec:	9009883a 	mov	r4,r18
100093f0:	000f7600 	call	1000f760 <__malloc_unlock>
100093f4:	8805883a 	mov	r2,r17
100093f8:	dfc00917 	ldw	ra,36(sp)
100093fc:	df000817 	ldw	fp,32(sp)
10009400:	ddc00717 	ldw	r23,28(sp)
10009404:	dd800617 	ldw	r22,24(sp)
10009408:	dd400517 	ldw	r21,20(sp)
1000940c:	dd000417 	ldw	r20,16(sp)
10009410:	dcc00317 	ldw	r19,12(sp)
10009414:	dc800217 	ldw	r18,8(sp)
10009418:	dc400117 	ldw	r17,4(sp)
1000941c:	dc000017 	ldw	r16,0(sp)
10009420:	dec00a04 	addi	sp,sp,40
10009424:	f800283a 	ret
10009428:	017fff04 	movi	r5,-4
1000942c:	494a703a 	and	r5,r9,r5
10009430:	814d883a 	add	r6,r16,r5
10009434:	30801e16 	blt	r6,r2,100094b0 <_realloc_r+0x224>
10009438:	20800317 	ldw	r2,12(r4)
1000943c:	21000217 	ldw	r4,8(r4)
10009440:	a023883a 	mov	r17,r20
10009444:	3021883a 	mov	r16,r6
10009448:	20800315 	stw	r2,12(r4)
1000944c:	11000215 	stw	r4,8(r2)
10009450:	003fdc06 	br	100093c4 <__alt_data_end+0xf80093c4>
10009454:	00800304 	movi	r2,12
10009458:	90800015 	stw	r2,0(r18)
1000945c:	0005883a 	mov	r2,zero
10009460:	003fe506 	br	100093f8 <__alt_data_end+0xf80093f8>
10009464:	1d86b03a 	or	r3,r3,r22
10009468:	a8c00115 	stw	r3,4(r21)
1000946c:	ad8b883a 	add	r5,r21,r22
10009470:	38c00054 	ori	r3,r7,1
10009474:	28c00115 	stw	r3,4(r5)
10009478:	29cf883a 	add	r7,r5,r7
1000947c:	38c00117 	ldw	r3,4(r7)
10009480:	29400204 	addi	r5,r5,8
10009484:	9009883a 	mov	r4,r18
10009488:	18800054 	ori	r2,r3,1
1000948c:	38800115 	stw	r2,4(r7)
10009490:	00069200 	call	10006920 <_free_r>
10009494:	003fd506 	br	100093ec <__alt_data_end+0xf80093ec>
10009498:	21c00117 	ldw	r7,4(r4)
1000949c:	017fff04 	movi	r5,-4
100094a0:	b1800404 	addi	r6,r22,16
100094a4:	394a703a 	and	r5,r7,r5
100094a8:	814f883a 	add	r7,r16,r5
100094ac:	39805b0e 	bge	r7,r6,1000961c <_realloc_r+0x390>
100094b0:	18c0004c 	andi	r3,r3,1
100094b4:	183fa01e 	bne	r3,zero,10009338 <__alt_data_end+0xf8009338>
100094b8:	a4fffe17 	ldw	r19,-8(r20)
100094bc:	00ffff04 	movi	r3,-4
100094c0:	ace7c83a 	sub	r19,r21,r19
100094c4:	99800117 	ldw	r6,4(r19)
100094c8:	30c6703a 	and	r3,r6,r3
100094cc:	20002026 	beq	r4,zero,10009550 <_realloc_r+0x2c4>
100094d0:	80ef883a 	add	r23,r16,r3
100094d4:	b96f883a 	add	r23,r23,r5
100094d8:	22006126 	beq	r4,r8,10009660 <_realloc_r+0x3d4>
100094dc:	b8801c16 	blt	r23,r2,10009550 <_realloc_r+0x2c4>
100094e0:	20800317 	ldw	r2,12(r4)
100094e4:	20c00217 	ldw	r3,8(r4)
100094e8:	81bfff04 	addi	r6,r16,-4
100094ec:	01000904 	movi	r4,36
100094f0:	18800315 	stw	r2,12(r3)
100094f4:	10c00215 	stw	r3,8(r2)
100094f8:	98c00217 	ldw	r3,8(r19)
100094fc:	98800317 	ldw	r2,12(r19)
10009500:	9c400204 	addi	r17,r19,8
10009504:	18800315 	stw	r2,12(r3)
10009508:	10c00215 	stw	r3,8(r2)
1000950c:	21801b36 	bltu	r4,r6,1000957c <_realloc_r+0x2f0>
10009510:	008004c4 	movi	r2,19
10009514:	1180362e 	bgeu	r2,r6,100095f0 <_realloc_r+0x364>
10009518:	a0800017 	ldw	r2,0(r20)
1000951c:	98800215 	stw	r2,8(r19)
10009520:	a0800117 	ldw	r2,4(r20)
10009524:	98800315 	stw	r2,12(r19)
10009528:	008006c4 	movi	r2,27
1000952c:	11808136 	bltu	r2,r6,10009734 <_realloc_r+0x4a8>
10009530:	98800404 	addi	r2,r19,16
10009534:	a5000204 	addi	r20,r20,8
10009538:	00002e06 	br	100095f4 <_realloc_r+0x368>
1000953c:	a4fffe17 	ldw	r19,-8(r20)
10009540:	00ffff04 	movi	r3,-4
10009544:	ace7c83a 	sub	r19,r21,r19
10009548:	99000117 	ldw	r4,4(r19)
1000954c:	20c6703a 	and	r3,r4,r3
10009550:	983f7926 	beq	r19,zero,10009338 <__alt_data_end+0xf8009338>
10009554:	80ef883a 	add	r23,r16,r3
10009558:	b8bf7716 	blt	r23,r2,10009338 <__alt_data_end+0xf8009338>
1000955c:	98800317 	ldw	r2,12(r19)
10009560:	98c00217 	ldw	r3,8(r19)
10009564:	81bfff04 	addi	r6,r16,-4
10009568:	01000904 	movi	r4,36
1000956c:	18800315 	stw	r2,12(r3)
10009570:	10c00215 	stw	r3,8(r2)
10009574:	9c400204 	addi	r17,r19,8
10009578:	21bfe52e 	bgeu	r4,r6,10009510 <__alt_data_end+0xf8009510>
1000957c:	a00b883a 	mov	r5,r20
10009580:	8809883a 	mov	r4,r17
10009584:	0007f500 	call	10007f50 <memmove>
10009588:	98c00117 	ldw	r3,4(r19)
1000958c:	b821883a 	mov	r16,r23
10009590:	982b883a 	mov	r21,r19
10009594:	003f8b06 	br	100093c4 <__alt_data_end+0xf80093c4>
10009598:	300b883a 	mov	r5,r6
1000959c:	dfc00917 	ldw	ra,36(sp)
100095a0:	df000817 	ldw	fp,32(sp)
100095a4:	ddc00717 	ldw	r23,28(sp)
100095a8:	dd800617 	ldw	r22,24(sp)
100095ac:	dd400517 	ldw	r21,20(sp)
100095b0:	dd000417 	ldw	r20,16(sp)
100095b4:	dcc00317 	ldw	r19,12(sp)
100095b8:	dc800217 	ldw	r18,8(sp)
100095bc:	dc400117 	ldw	r17,4(sp)
100095c0:	dc000017 	ldw	r16,0(sp)
100095c4:	dec00a04 	addi	sp,sp,40
100095c8:	00075181 	jmpi	10007518 <_malloc_r>
100095cc:	a0c00017 	ldw	r3,0(r20)
100095d0:	88c00015 	stw	r3,0(r17)
100095d4:	a0c00117 	ldw	r3,4(r20)
100095d8:	88c00115 	stw	r3,4(r17)
100095dc:	00c006c4 	movi	r3,27
100095e0:	19804636 	bltu	r3,r6,100096fc <_realloc_r+0x470>
100095e4:	88800204 	addi	r2,r17,8
100095e8:	a0c00204 	addi	r3,r20,8
100095ec:	003f6406 	br	10009380 <__alt_data_end+0xf8009380>
100095f0:	8805883a 	mov	r2,r17
100095f4:	a0c00017 	ldw	r3,0(r20)
100095f8:	b821883a 	mov	r16,r23
100095fc:	982b883a 	mov	r21,r19
10009600:	10c00015 	stw	r3,0(r2)
10009604:	a0c00117 	ldw	r3,4(r20)
10009608:	10c00115 	stw	r3,4(r2)
1000960c:	a0c00217 	ldw	r3,8(r20)
10009610:	10c00215 	stw	r3,8(r2)
10009614:	98c00117 	ldw	r3,4(r19)
10009618:	003f6a06 	br	100093c4 <__alt_data_end+0xf80093c4>
1000961c:	adab883a 	add	r21,r21,r22
10009620:	3d85c83a 	sub	r2,r7,r22
10009624:	e5400215 	stw	r21,8(fp)
10009628:	10800054 	ori	r2,r2,1
1000962c:	a8800115 	stw	r2,4(r21)
10009630:	a0bfff17 	ldw	r2,-4(r20)
10009634:	9009883a 	mov	r4,r18
10009638:	1080004c 	andi	r2,r2,1
1000963c:	1584b03a 	or	r2,r2,r22
10009640:	a0bfff15 	stw	r2,-4(r20)
10009644:	000f7600 	call	1000f760 <__malloc_unlock>
10009648:	a005883a 	mov	r2,r20
1000964c:	003f6a06 	br	100093f8 <__alt_data_end+0xf80093f8>
10009650:	a00b883a 	mov	r5,r20
10009654:	8809883a 	mov	r4,r17
10009658:	0007f500 	call	10007f50 <memmove>
1000965c:	003f4e06 	br	10009398 <__alt_data_end+0xf8009398>
10009660:	b1000404 	addi	r4,r22,16
10009664:	b93fba16 	blt	r23,r4,10009550 <__alt_data_end+0xf8009550>
10009668:	98800317 	ldw	r2,12(r19)
1000966c:	98c00217 	ldw	r3,8(r19)
10009670:	81bfff04 	addi	r6,r16,-4
10009674:	01000904 	movi	r4,36
10009678:	18800315 	stw	r2,12(r3)
1000967c:	10c00215 	stw	r3,8(r2)
10009680:	9c400204 	addi	r17,r19,8
10009684:	21804336 	bltu	r4,r6,10009794 <_realloc_r+0x508>
10009688:	008004c4 	movi	r2,19
1000968c:	11803f2e 	bgeu	r2,r6,1000978c <_realloc_r+0x500>
10009690:	a0800017 	ldw	r2,0(r20)
10009694:	98800215 	stw	r2,8(r19)
10009698:	a0800117 	ldw	r2,4(r20)
1000969c:	98800315 	stw	r2,12(r19)
100096a0:	008006c4 	movi	r2,27
100096a4:	11803f36 	bltu	r2,r6,100097a4 <_realloc_r+0x518>
100096a8:	98800404 	addi	r2,r19,16
100096ac:	a5000204 	addi	r20,r20,8
100096b0:	a0c00017 	ldw	r3,0(r20)
100096b4:	10c00015 	stw	r3,0(r2)
100096b8:	a0c00117 	ldw	r3,4(r20)
100096bc:	10c00115 	stw	r3,4(r2)
100096c0:	a0c00217 	ldw	r3,8(r20)
100096c4:	10c00215 	stw	r3,8(r2)
100096c8:	9d87883a 	add	r3,r19,r22
100096cc:	bd85c83a 	sub	r2,r23,r22
100096d0:	e0c00215 	stw	r3,8(fp)
100096d4:	10800054 	ori	r2,r2,1
100096d8:	18800115 	stw	r2,4(r3)
100096dc:	98800117 	ldw	r2,4(r19)
100096e0:	9009883a 	mov	r4,r18
100096e4:	1080004c 	andi	r2,r2,1
100096e8:	1584b03a 	or	r2,r2,r22
100096ec:	98800115 	stw	r2,4(r19)
100096f0:	000f7600 	call	1000f760 <__malloc_unlock>
100096f4:	8805883a 	mov	r2,r17
100096f8:	003f3f06 	br	100093f8 <__alt_data_end+0xf80093f8>
100096fc:	a0c00217 	ldw	r3,8(r20)
10009700:	88c00215 	stw	r3,8(r17)
10009704:	a0c00317 	ldw	r3,12(r20)
10009708:	88c00315 	stw	r3,12(r17)
1000970c:	30801126 	beq	r6,r2,10009754 <_realloc_r+0x4c8>
10009710:	88800404 	addi	r2,r17,16
10009714:	a0c00404 	addi	r3,r20,16
10009718:	003f1906 	br	10009380 <__alt_data_end+0xf8009380>
1000971c:	893fff17 	ldw	r4,-4(r17)
10009720:	00bfff04 	movi	r2,-4
10009724:	a023883a 	mov	r17,r20
10009728:	2084703a 	and	r2,r4,r2
1000972c:	80a1883a 	add	r16,r16,r2
10009730:	003f2406 	br	100093c4 <__alt_data_end+0xf80093c4>
10009734:	a0800217 	ldw	r2,8(r20)
10009738:	98800415 	stw	r2,16(r19)
1000973c:	a0800317 	ldw	r2,12(r20)
10009740:	98800515 	stw	r2,20(r19)
10009744:	31000a26 	beq	r6,r4,10009770 <_realloc_r+0x4e4>
10009748:	98800604 	addi	r2,r19,24
1000974c:	a5000404 	addi	r20,r20,16
10009750:	003fa806 	br	100095f4 <__alt_data_end+0xf80095f4>
10009754:	a1000417 	ldw	r4,16(r20)
10009758:	88800604 	addi	r2,r17,24
1000975c:	a0c00604 	addi	r3,r20,24
10009760:	89000415 	stw	r4,16(r17)
10009764:	a1000517 	ldw	r4,20(r20)
10009768:	89000515 	stw	r4,20(r17)
1000976c:	003f0406 	br	10009380 <__alt_data_end+0xf8009380>
10009770:	a0c00417 	ldw	r3,16(r20)
10009774:	a5000604 	addi	r20,r20,24
10009778:	98800804 	addi	r2,r19,32
1000977c:	98c00615 	stw	r3,24(r19)
10009780:	a0ffff17 	ldw	r3,-4(r20)
10009784:	98c00715 	stw	r3,28(r19)
10009788:	003f9a06 	br	100095f4 <__alt_data_end+0xf80095f4>
1000978c:	8805883a 	mov	r2,r17
10009790:	003fc706 	br	100096b0 <__alt_data_end+0xf80096b0>
10009794:	a00b883a 	mov	r5,r20
10009798:	8809883a 	mov	r4,r17
1000979c:	0007f500 	call	10007f50 <memmove>
100097a0:	003fc906 	br	100096c8 <__alt_data_end+0xf80096c8>
100097a4:	a0800217 	ldw	r2,8(r20)
100097a8:	98800415 	stw	r2,16(r19)
100097ac:	a0800317 	ldw	r2,12(r20)
100097b0:	98800515 	stw	r2,20(r19)
100097b4:	31000726 	beq	r6,r4,100097d4 <_realloc_r+0x548>
100097b8:	98800604 	addi	r2,r19,24
100097bc:	a5000404 	addi	r20,r20,16
100097c0:	003fbb06 	br	100096b0 <__alt_data_end+0xf80096b0>
100097c4:	9009883a 	mov	r4,r18
100097c8:	000f7600 	call	1000f760 <__malloc_unlock>
100097cc:	0005883a 	mov	r2,zero
100097d0:	003f0906 	br	100093f8 <__alt_data_end+0xf80093f8>
100097d4:	a0c00417 	ldw	r3,16(r20)
100097d8:	a5000604 	addi	r20,r20,24
100097dc:	98800804 	addi	r2,r19,32
100097e0:	98c00615 	stw	r3,24(r19)
100097e4:	a0ffff17 	ldw	r3,-4(r20)
100097e8:	98c00715 	stw	r3,28(r19)
100097ec:	003fb006 	br	100096b0 <__alt_data_end+0xf80096b0>

100097f0 <__fpclassifyd>:
100097f0:	00a00034 	movhi	r2,32768
100097f4:	10bfffc4 	addi	r2,r2,-1
100097f8:	2884703a 	and	r2,r5,r2
100097fc:	10000726 	beq	r2,zero,1000981c <__fpclassifyd+0x2c>
10009800:	00fffc34 	movhi	r3,65520
10009804:	019ff834 	movhi	r6,32736
10009808:	28c7883a 	add	r3,r5,r3
1000980c:	31bfffc4 	addi	r6,r6,-1
10009810:	30c00536 	bltu	r6,r3,10009828 <__fpclassifyd+0x38>
10009814:	00800104 	movi	r2,4
10009818:	f800283a 	ret
1000981c:	2000021e 	bne	r4,zero,10009828 <__fpclassifyd+0x38>
10009820:	00800084 	movi	r2,2
10009824:	f800283a 	ret
10009828:	00dffc34 	movhi	r3,32752
1000982c:	019ff834 	movhi	r6,32736
10009830:	28cb883a 	add	r5,r5,r3
10009834:	31bfffc4 	addi	r6,r6,-1
10009838:	317ff62e 	bgeu	r6,r5,10009814 <__alt_data_end+0xf8009814>
1000983c:	01400434 	movhi	r5,16
10009840:	297fffc4 	addi	r5,r5,-1
10009844:	28800236 	bltu	r5,r2,10009850 <__fpclassifyd+0x60>
10009848:	008000c4 	movi	r2,3
1000984c:	f800283a 	ret
10009850:	10c00226 	beq	r2,r3,1000985c <__fpclassifyd+0x6c>
10009854:	0005883a 	mov	r2,zero
10009858:	f800283a 	ret
1000985c:	2005003a 	cmpeq	r2,r4,zero
10009860:	f800283a 	ret

10009864 <_sbrk_r>:
10009864:	defffd04 	addi	sp,sp,-12
10009868:	dc000015 	stw	r16,0(sp)
1000986c:	04040074 	movhi	r16,4097
10009870:	dc400115 	stw	r17,4(sp)
10009874:	84169804 	addi	r16,r16,23136
10009878:	2023883a 	mov	r17,r4
1000987c:	2809883a 	mov	r4,r5
10009880:	dfc00215 	stw	ra,8(sp)
10009884:	80000015 	stw	zero,0(r16)
10009888:	000f95c0 	call	1000f95c <sbrk>
1000988c:	00ffffc4 	movi	r3,-1
10009890:	10c00526 	beq	r2,r3,100098a8 <_sbrk_r+0x44>
10009894:	dfc00217 	ldw	ra,8(sp)
10009898:	dc400117 	ldw	r17,4(sp)
1000989c:	dc000017 	ldw	r16,0(sp)
100098a0:	dec00304 	addi	sp,sp,12
100098a4:	f800283a 	ret
100098a8:	80c00017 	ldw	r3,0(r16)
100098ac:	183ff926 	beq	r3,zero,10009894 <__alt_data_end+0xf8009894>
100098b0:	88c00015 	stw	r3,0(r17)
100098b4:	003ff706 	br	10009894 <__alt_data_end+0xf8009894>

100098b8 <__sread>:
100098b8:	defffe04 	addi	sp,sp,-8
100098bc:	dc000015 	stw	r16,0(sp)
100098c0:	2821883a 	mov	r16,r5
100098c4:	2940038f 	ldh	r5,14(r5)
100098c8:	dfc00115 	stw	ra,4(sp)
100098cc:	000b7740 	call	1000b774 <_read_r>
100098d0:	10000716 	blt	r2,zero,100098f0 <__sread+0x38>
100098d4:	80c01417 	ldw	r3,80(r16)
100098d8:	1887883a 	add	r3,r3,r2
100098dc:	80c01415 	stw	r3,80(r16)
100098e0:	dfc00117 	ldw	ra,4(sp)
100098e4:	dc000017 	ldw	r16,0(sp)
100098e8:	dec00204 	addi	sp,sp,8
100098ec:	f800283a 	ret
100098f0:	80c0030b 	ldhu	r3,12(r16)
100098f4:	18fbffcc 	andi	r3,r3,61439
100098f8:	80c0030d 	sth	r3,12(r16)
100098fc:	dfc00117 	ldw	ra,4(sp)
10009900:	dc000017 	ldw	r16,0(sp)
10009904:	dec00204 	addi	sp,sp,8
10009908:	f800283a 	ret

1000990c <__seofread>:
1000990c:	0005883a 	mov	r2,zero
10009910:	f800283a 	ret

10009914 <__swrite>:
10009914:	2880030b 	ldhu	r2,12(r5)
10009918:	defffb04 	addi	sp,sp,-20
1000991c:	dcc00315 	stw	r19,12(sp)
10009920:	dc800215 	stw	r18,8(sp)
10009924:	dc400115 	stw	r17,4(sp)
10009928:	dc000015 	stw	r16,0(sp)
1000992c:	dfc00415 	stw	ra,16(sp)
10009930:	10c0400c 	andi	r3,r2,256
10009934:	2821883a 	mov	r16,r5
10009938:	2023883a 	mov	r17,r4
1000993c:	3025883a 	mov	r18,r6
10009940:	3827883a 	mov	r19,r7
10009944:	18000526 	beq	r3,zero,1000995c <__swrite+0x48>
10009948:	2940038f 	ldh	r5,14(r5)
1000994c:	01c00084 	movi	r7,2
10009950:	000d883a 	mov	r6,zero
10009954:	000b7140 	call	1000b714 <_lseek_r>
10009958:	8080030b 	ldhu	r2,12(r16)
1000995c:	8140038f 	ldh	r5,14(r16)
10009960:	10bbffcc 	andi	r2,r2,61439
10009964:	980f883a 	mov	r7,r19
10009968:	900d883a 	mov	r6,r18
1000996c:	8809883a 	mov	r4,r17
10009970:	8080030d 	sth	r2,12(r16)
10009974:	dfc00417 	ldw	ra,16(sp)
10009978:	dcc00317 	ldw	r19,12(sp)
1000997c:	dc800217 	ldw	r18,8(sp)
10009980:	dc400117 	ldw	r17,4(sp)
10009984:	dc000017 	ldw	r16,0(sp)
10009988:	dec00504 	addi	sp,sp,20
1000998c:	000b1c81 	jmpi	1000b1c8 <_write_r>

10009990 <__sseek>:
10009990:	defffe04 	addi	sp,sp,-8
10009994:	dc000015 	stw	r16,0(sp)
10009998:	2821883a 	mov	r16,r5
1000999c:	2940038f 	ldh	r5,14(r5)
100099a0:	dfc00115 	stw	ra,4(sp)
100099a4:	000b7140 	call	1000b714 <_lseek_r>
100099a8:	00ffffc4 	movi	r3,-1
100099ac:	10c00826 	beq	r2,r3,100099d0 <__sseek+0x40>
100099b0:	80c0030b 	ldhu	r3,12(r16)
100099b4:	80801415 	stw	r2,80(r16)
100099b8:	18c40014 	ori	r3,r3,4096
100099bc:	80c0030d 	sth	r3,12(r16)
100099c0:	dfc00117 	ldw	ra,4(sp)
100099c4:	dc000017 	ldw	r16,0(sp)
100099c8:	dec00204 	addi	sp,sp,8
100099cc:	f800283a 	ret
100099d0:	80c0030b 	ldhu	r3,12(r16)
100099d4:	18fbffcc 	andi	r3,r3,61439
100099d8:	80c0030d 	sth	r3,12(r16)
100099dc:	dfc00117 	ldw	ra,4(sp)
100099e0:	dc000017 	ldw	r16,0(sp)
100099e4:	dec00204 	addi	sp,sp,8
100099e8:	f800283a 	ret

100099ec <__sclose>:
100099ec:	2940038f 	ldh	r5,14(r5)
100099f0:	000b2281 	jmpi	1000b228 <_close_r>

100099f4 <strcmp>:
100099f4:	2144b03a 	or	r2,r4,r5
100099f8:	108000cc 	andi	r2,r2,3
100099fc:	1000171e 	bne	r2,zero,10009a5c <strcmp+0x68>
10009a00:	20800017 	ldw	r2,0(r4)
10009a04:	28c00017 	ldw	r3,0(r5)
10009a08:	10c0141e 	bne	r2,r3,10009a5c <strcmp+0x68>
10009a0c:	027fbff4 	movhi	r9,65279
10009a10:	4a7fbfc4 	addi	r9,r9,-257
10009a14:	0086303a 	nor	r3,zero,r2
10009a18:	02202074 	movhi	r8,32897
10009a1c:	1245883a 	add	r2,r2,r9
10009a20:	42202004 	addi	r8,r8,-32640
10009a24:	10c4703a 	and	r2,r2,r3
10009a28:	1204703a 	and	r2,r2,r8
10009a2c:	10000226 	beq	r2,zero,10009a38 <strcmp+0x44>
10009a30:	00002306 	br	10009ac0 <strcmp+0xcc>
10009a34:	1000221e 	bne	r2,zero,10009ac0 <strcmp+0xcc>
10009a38:	21000104 	addi	r4,r4,4
10009a3c:	20c00017 	ldw	r3,0(r4)
10009a40:	29400104 	addi	r5,r5,4
10009a44:	29800017 	ldw	r6,0(r5)
10009a48:	1a4f883a 	add	r7,r3,r9
10009a4c:	00c4303a 	nor	r2,zero,r3
10009a50:	3884703a 	and	r2,r7,r2
10009a54:	1204703a 	and	r2,r2,r8
10009a58:	19bff626 	beq	r3,r6,10009a34 <__alt_data_end+0xf8009a34>
10009a5c:	20800003 	ldbu	r2,0(r4)
10009a60:	10c03fcc 	andi	r3,r2,255
10009a64:	18c0201c 	xori	r3,r3,128
10009a68:	18ffe004 	addi	r3,r3,-128
10009a6c:	18000c26 	beq	r3,zero,10009aa0 <strcmp+0xac>
10009a70:	29800007 	ldb	r6,0(r5)
10009a74:	19800326 	beq	r3,r6,10009a84 <strcmp+0x90>
10009a78:	00001306 	br	10009ac8 <strcmp+0xd4>
10009a7c:	29800007 	ldb	r6,0(r5)
10009a80:	11800b1e 	bne	r2,r6,10009ab0 <strcmp+0xbc>
10009a84:	21000044 	addi	r4,r4,1
10009a88:	20c00003 	ldbu	r3,0(r4)
10009a8c:	29400044 	addi	r5,r5,1
10009a90:	18803fcc 	andi	r2,r3,255
10009a94:	1080201c 	xori	r2,r2,128
10009a98:	10bfe004 	addi	r2,r2,-128
10009a9c:	103ff71e 	bne	r2,zero,10009a7c <__alt_data_end+0xf8009a7c>
10009aa0:	0007883a 	mov	r3,zero
10009aa4:	28800003 	ldbu	r2,0(r5)
10009aa8:	1885c83a 	sub	r2,r3,r2
10009aac:	f800283a 	ret
10009ab0:	28800003 	ldbu	r2,0(r5)
10009ab4:	18c03fcc 	andi	r3,r3,255
10009ab8:	1885c83a 	sub	r2,r3,r2
10009abc:	f800283a 	ret
10009ac0:	0005883a 	mov	r2,zero
10009ac4:	f800283a 	ret
10009ac8:	10c03fcc 	andi	r3,r2,255
10009acc:	003ff506 	br	10009aa4 <__alt_data_end+0xf8009aa4>

10009ad0 <__sprint_r.part.0>:
10009ad0:	28801917 	ldw	r2,100(r5)
10009ad4:	defff604 	addi	sp,sp,-40
10009ad8:	dd400515 	stw	r21,20(sp)
10009adc:	dfc00915 	stw	ra,36(sp)
10009ae0:	df000815 	stw	fp,32(sp)
10009ae4:	ddc00715 	stw	r23,28(sp)
10009ae8:	dd800615 	stw	r22,24(sp)
10009aec:	dd000415 	stw	r20,16(sp)
10009af0:	dcc00315 	stw	r19,12(sp)
10009af4:	dc800215 	stw	r18,8(sp)
10009af8:	dc400115 	stw	r17,4(sp)
10009afc:	dc000015 	stw	r16,0(sp)
10009b00:	1088000c 	andi	r2,r2,8192
10009b04:	302b883a 	mov	r21,r6
10009b08:	10002e26 	beq	r2,zero,10009bc4 <__sprint_r.part.0+0xf4>
10009b0c:	30800217 	ldw	r2,8(r6)
10009b10:	35800017 	ldw	r22,0(r6)
10009b14:	10002926 	beq	r2,zero,10009bbc <__sprint_r.part.0+0xec>
10009b18:	2827883a 	mov	r19,r5
10009b1c:	2029883a 	mov	r20,r4
10009b20:	b5c00104 	addi	r23,r22,4
10009b24:	04bfffc4 	movi	r18,-1
10009b28:	bc400017 	ldw	r17,0(r23)
10009b2c:	b4000017 	ldw	r16,0(r22)
10009b30:	0039883a 	mov	fp,zero
10009b34:	8822d0ba 	srli	r17,r17,2
10009b38:	8800031e 	bne	r17,zero,10009b48 <__sprint_r.part.0+0x78>
10009b3c:	00001806 	br	10009ba0 <__sprint_r.part.0+0xd0>
10009b40:	84000104 	addi	r16,r16,4
10009b44:	8f001526 	beq	r17,fp,10009b9c <__sprint_r.part.0+0xcc>
10009b48:	81400017 	ldw	r5,0(r16)
10009b4c:	980d883a 	mov	r6,r19
10009b50:	a009883a 	mov	r4,r20
10009b54:	000b5c00 	call	1000b5c0 <_fputwc_r>
10009b58:	e7000044 	addi	fp,fp,1
10009b5c:	14bff81e 	bne	r2,r18,10009b40 <__alt_data_end+0xf8009b40>
10009b60:	9005883a 	mov	r2,r18
10009b64:	a8000215 	stw	zero,8(r21)
10009b68:	a8000115 	stw	zero,4(r21)
10009b6c:	dfc00917 	ldw	ra,36(sp)
10009b70:	df000817 	ldw	fp,32(sp)
10009b74:	ddc00717 	ldw	r23,28(sp)
10009b78:	dd800617 	ldw	r22,24(sp)
10009b7c:	dd400517 	ldw	r21,20(sp)
10009b80:	dd000417 	ldw	r20,16(sp)
10009b84:	dcc00317 	ldw	r19,12(sp)
10009b88:	dc800217 	ldw	r18,8(sp)
10009b8c:	dc400117 	ldw	r17,4(sp)
10009b90:	dc000017 	ldw	r16,0(sp)
10009b94:	dec00a04 	addi	sp,sp,40
10009b98:	f800283a 	ret
10009b9c:	a8800217 	ldw	r2,8(r21)
10009ba0:	8c63883a 	add	r17,r17,r17
10009ba4:	8c63883a 	add	r17,r17,r17
10009ba8:	1445c83a 	sub	r2,r2,r17
10009bac:	a8800215 	stw	r2,8(r21)
10009bb0:	b5800204 	addi	r22,r22,8
10009bb4:	bdc00204 	addi	r23,r23,8
10009bb8:	103fdb1e 	bne	r2,zero,10009b28 <__alt_data_end+0xf8009b28>
10009bbc:	0005883a 	mov	r2,zero
10009bc0:	003fe806 	br	10009b64 <__alt_data_end+0xf8009b64>
10009bc4:	0006c300 	call	10006c30 <__sfvwrite_r>
10009bc8:	003fe606 	br	10009b64 <__alt_data_end+0xf8009b64>

10009bcc <__sprint_r>:
10009bcc:	30c00217 	ldw	r3,8(r6)
10009bd0:	18000126 	beq	r3,zero,10009bd8 <__sprint_r+0xc>
10009bd4:	0009ad01 	jmpi	10009ad0 <__sprint_r.part.0>
10009bd8:	30000115 	stw	zero,4(r6)
10009bdc:	0005883a 	mov	r2,zero
10009be0:	f800283a 	ret

10009be4 <___vfiprintf_internal_r>:
10009be4:	deffca04 	addi	sp,sp,-216
10009be8:	dd403115 	stw	r21,196(sp)
10009bec:	dfc03515 	stw	ra,212(sp)
10009bf0:	df003415 	stw	fp,208(sp)
10009bf4:	ddc03315 	stw	r23,204(sp)
10009bf8:	dd803215 	stw	r22,200(sp)
10009bfc:	dd003015 	stw	r20,192(sp)
10009c00:	dcc02f15 	stw	r19,188(sp)
10009c04:	dc802e15 	stw	r18,184(sp)
10009c08:	dc402d15 	stw	r17,180(sp)
10009c0c:	dc002c15 	stw	r16,176(sp)
10009c10:	d9002115 	stw	r4,132(sp)
10009c14:	d9402015 	stw	r5,128(sp)
10009c18:	d9c02215 	stw	r7,136(sp)
10009c1c:	302b883a 	mov	r21,r6
10009c20:	20000226 	beq	r4,zero,10009c2c <___vfiprintf_internal_r+0x48>
10009c24:	20800e17 	ldw	r2,56(r4)
10009c28:	1000cf26 	beq	r2,zero,10009f68 <___vfiprintf_internal_r+0x384>
10009c2c:	d8c02017 	ldw	r3,128(sp)
10009c30:	1880030b 	ldhu	r2,12(r3)
10009c34:	10c8000c 	andi	r3,r2,8192
10009c38:	1800071e 	bne	r3,zero,10009c58 <___vfiprintf_internal_r+0x74>
10009c3c:	d9402017 	ldw	r5,128(sp)
10009c40:	00f7ffc4 	movi	r3,-8193
10009c44:	10880014 	ori	r2,r2,8192
10009c48:	29001917 	ldw	r4,100(r5)
10009c4c:	2880030d 	sth	r2,12(r5)
10009c50:	20c6703a 	and	r3,r4,r3
10009c54:	28c01915 	stw	r3,100(r5)
10009c58:	10c0020c 	andi	r3,r2,8
10009c5c:	1800a526 	beq	r3,zero,10009ef4 <___vfiprintf_internal_r+0x310>
10009c60:	d9002017 	ldw	r4,128(sp)
10009c64:	20c00417 	ldw	r3,16(r4)
10009c68:	1800a226 	beq	r3,zero,10009ef4 <___vfiprintf_internal_r+0x310>
10009c6c:	1080068c 	andi	r2,r2,26
10009c70:	00c00284 	movi	r3,10
10009c74:	10c0a826 	beq	r2,r3,10009f18 <___vfiprintf_internal_r+0x334>
10009c78:	d9001a04 	addi	r4,sp,104
10009c7c:	d94019c4 	addi	r5,sp,103
10009c80:	04840074 	movhi	r18,4097
10009c84:	2145c83a 	sub	r2,r4,r5
10009c88:	9488c604 	addi	r18,r18,8984
10009c8c:	d9001e15 	stw	r4,120(sp)
10009c90:	d9401f15 	stw	r5,124(sp)
10009c94:	dec01a15 	stw	sp,104(sp)
10009c98:	d8001c15 	stw	zero,112(sp)
10009c9c:	d8001b15 	stw	zero,108(sp)
10009ca0:	d811883a 	mov	r8,sp
10009ca4:	d8002615 	stw	zero,152(sp)
10009ca8:	d8002415 	stw	zero,144(sp)
10009cac:	d8802815 	stw	r2,160(sp)
10009cb0:	a82d883a 	mov	r22,r21
10009cb4:	b0800007 	ldb	r2,0(r22)
10009cb8:	10040d26 	beq	r2,zero,1000acf0 <___vfiprintf_internal_r+0x110c>
10009cbc:	00c00944 	movi	r3,37
10009cc0:	b029883a 	mov	r20,r22
10009cc4:	10c0021e 	bne	r2,r3,10009cd0 <___vfiprintf_internal_r+0xec>
10009cc8:	00001606 	br	10009d24 <___vfiprintf_internal_r+0x140>
10009ccc:	10c00326 	beq	r2,r3,10009cdc <___vfiprintf_internal_r+0xf8>
10009cd0:	a5000044 	addi	r20,r20,1
10009cd4:	a0800007 	ldb	r2,0(r20)
10009cd8:	103ffc1e 	bne	r2,zero,10009ccc <__alt_data_end+0xf8009ccc>
10009cdc:	a5a1c83a 	sub	r16,r20,r22
10009ce0:	80001026 	beq	r16,zero,10009d24 <___vfiprintf_internal_r+0x140>
10009ce4:	d8c01c17 	ldw	r3,112(sp)
10009ce8:	d8801b17 	ldw	r2,108(sp)
10009cec:	45800015 	stw	r22,0(r8)
10009cf0:	80c7883a 	add	r3,r16,r3
10009cf4:	10800044 	addi	r2,r2,1
10009cf8:	44000115 	stw	r16,4(r8)
10009cfc:	d8c01c15 	stw	r3,112(sp)
10009d00:	d8801b15 	stw	r2,108(sp)
10009d04:	010001c4 	movi	r4,7
10009d08:	2080750e 	bge	r4,r2,10009ee0 <___vfiprintf_internal_r+0x2fc>
10009d0c:	1803951e 	bne	r3,zero,1000ab64 <___vfiprintf_internal_r+0xf80>
10009d10:	d8c02417 	ldw	r3,144(sp)
10009d14:	d8001b15 	stw	zero,108(sp)
10009d18:	d811883a 	mov	r8,sp
10009d1c:	1c07883a 	add	r3,r3,r16
10009d20:	d8c02415 	stw	r3,144(sp)
10009d24:	a0800007 	ldb	r2,0(r20)
10009d28:	1002e026 	beq	r2,zero,1000a8ac <___vfiprintf_internal_r+0xcc8>
10009d2c:	a5800044 	addi	r22,r20,1
10009d30:	a0c00047 	ldb	r3,1(r20)
10009d34:	d8001d85 	stb	zero,118(sp)
10009d38:	0027883a 	mov	r19,zero
10009d3c:	d8002305 	stb	zero,140(sp)
10009d40:	043fffc4 	movi	r16,-1
10009d44:	d8002515 	stw	zero,148(sp)
10009d48:	0023883a 	mov	r17,zero
10009d4c:	05001604 	movi	r20,88
10009d50:	05400244 	movi	r21,9
10009d54:	402f883a 	mov	r23,r8
10009d58:	b5800044 	addi	r22,r22,1
10009d5c:	18bff804 	addi	r2,r3,-32
10009d60:	a0827736 	bltu	r20,r2,1000a740 <___vfiprintf_internal_r+0xb5c>
10009d64:	100490ba 	slli	r2,r2,2
10009d68:	01040074 	movhi	r4,4097
10009d6c:	21275f04 	addi	r4,r4,-25220
10009d70:	1105883a 	add	r2,r2,r4
10009d74:	10800017 	ldw	r2,0(r2)
10009d78:	1000683a 	jmp	r2
10009d7c:	1000a440 	call	11000a44 <_gp+0xfe4b2c>
10009d80:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d84:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d88:	1000a45c 	xori	zero,r2,657
10009d8c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d90:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d94:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d98:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009d9c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009da0:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009da4:	1000a664 	muli	zero,r2,665
10009da8:	1000a688 	cmpgei	zero,r2,666
10009dac:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009db0:	10009f80 	call	110009f8 <_gp+0xfe4ae0>
10009db4:	1000a69c 	xori	zero,r2,666
10009db8:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009dbc:	1000a468 	cmpgeui	zero,r2,657
10009dc0:	1000a474 	orhi	zero,r2,657
10009dc4:	1000a474 	orhi	zero,r2,657
10009dc8:	1000a474 	orhi	zero,r2,657
10009dcc:	1000a474 	orhi	zero,r2,657
10009dd0:	1000a474 	orhi	zero,r2,657
10009dd4:	1000a474 	orhi	zero,r2,657
10009dd8:	1000a474 	orhi	zero,r2,657
10009ddc:	1000a474 	orhi	zero,r2,657
10009de0:	1000a474 	orhi	zero,r2,657
10009de4:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009de8:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009dec:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009df0:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009df4:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009df8:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009dfc:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e00:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e04:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e08:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e0c:	1000a4b4 	orhi	zero,r2,658
10009e10:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e14:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e18:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e1c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e20:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e24:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e28:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e2c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e30:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e34:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e38:	1000a4f0 	cmpltui	zero,r2,659
10009e3c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e40:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e44:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e48:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e4c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e50:	1000a54c 	andi	zero,r2,661
10009e54:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e58:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e5c:	1000a5c0 	call	11000a5c <_gp+0xfe4b44>
10009e60:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e64:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e68:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e6c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e70:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e74:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e78:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e7c:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e80:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e84:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e88:	1000a368 	cmpgeui	zero,r2,653
10009e8c:	1000a398 	cmpnei	zero,r2,654
10009e90:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e94:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e98:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009e9c:	1000a6e8 	cmpgeui	zero,r2,667
10009ea0:	1000a398 	cmpnei	zero,r2,654
10009ea4:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009ea8:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009eac:	1000a240 	call	11000a24 <_gp+0xfe4b0c>
10009eb0:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009eb4:	1000a254 	ori	zero,r2,649
10009eb8:	1000a28c 	andi	zero,r2,650
10009ebc:	10009f8c 	andi	zero,r2,638
10009ec0:	1000a234 	orhi	zero,r2,648
10009ec4:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009ec8:	1000a600 	call	11000a60 <_gp+0xfe4b48>
10009ecc:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009ed0:	1000a64c 	andi	zero,r2,665
10009ed4:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009ed8:	1000a740 	call	11000a74 <_gp+0xfe4b5c>
10009edc:	1000a310 	cmplti	zero,r2,652
10009ee0:	42000204 	addi	r8,r8,8
10009ee4:	d8c02417 	ldw	r3,144(sp)
10009ee8:	1c07883a 	add	r3,r3,r16
10009eec:	d8c02415 	stw	r3,144(sp)
10009ef0:	003f8c06 	br	10009d24 <__alt_data_end+0xf8009d24>
10009ef4:	d9402017 	ldw	r5,128(sp)
10009ef8:	d9002117 	ldw	r4,132(sp)
10009efc:	00047a00 	call	100047a0 <__swsetup_r>
10009f00:	1003c11e 	bne	r2,zero,1000ae08 <___vfiprintf_internal_r+0x1224>
10009f04:	d9402017 	ldw	r5,128(sp)
10009f08:	00c00284 	movi	r3,10
10009f0c:	2880030b 	ldhu	r2,12(r5)
10009f10:	1080068c 	andi	r2,r2,26
10009f14:	10ff581e 	bne	r2,r3,10009c78 <__alt_data_end+0xf8009c78>
10009f18:	d8c02017 	ldw	r3,128(sp)
10009f1c:	1880038f 	ldh	r2,14(r3)
10009f20:	103f5516 	blt	r2,zero,10009c78 <__alt_data_end+0xf8009c78>
10009f24:	d9c02217 	ldw	r7,136(sp)
10009f28:	d9002117 	ldw	r4,132(sp)
10009f2c:	a80d883a 	mov	r6,r21
10009f30:	180b883a 	mov	r5,r3
10009f34:	000b10c0 	call	1000b10c <__sbprintf>
10009f38:	dfc03517 	ldw	ra,212(sp)
10009f3c:	df003417 	ldw	fp,208(sp)
10009f40:	ddc03317 	ldw	r23,204(sp)
10009f44:	dd803217 	ldw	r22,200(sp)
10009f48:	dd403117 	ldw	r21,196(sp)
10009f4c:	dd003017 	ldw	r20,192(sp)
10009f50:	dcc02f17 	ldw	r19,188(sp)
10009f54:	dc802e17 	ldw	r18,184(sp)
10009f58:	dc402d17 	ldw	r17,180(sp)
10009f5c:	dc002c17 	ldw	r16,176(sp)
10009f60:	dec03604 	addi	sp,sp,216
10009f64:	f800283a 	ret
10009f68:	00067ac0 	call	100067ac <__sinit>
10009f6c:	003f2f06 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009f70:	d8c02517 	ldw	r3,148(sp)
10009f74:	d8802215 	stw	r2,136(sp)
10009f78:	00c7c83a 	sub	r3,zero,r3
10009f7c:	d8c02515 	stw	r3,148(sp)
10009f80:	8c400114 	ori	r17,r17,4
10009f84:	b0c00007 	ldb	r3,0(r22)
10009f88:	003f7306 	br	10009d58 <__alt_data_end+0xf8009d58>
10009f8c:	00800c04 	movi	r2,48
10009f90:	d9402217 	ldw	r5,136(sp)
10009f94:	d8801d05 	stb	r2,116(sp)
10009f98:	00801e04 	movi	r2,120
10009f9c:	d8801d45 	stb	r2,117(sp)
10009fa0:	d8001d85 	stb	zero,118(sp)
10009fa4:	b811883a 	mov	r8,r23
10009fa8:	28c00104 	addi	r3,r5,4
10009fac:	2cc00017 	ldw	r19,0(r5)
10009fb0:	0029883a 	mov	r20,zero
10009fb4:	88800094 	ori	r2,r17,2
10009fb8:	80032516 	blt	r16,zero,1000ac50 <___vfiprintf_internal_r+0x106c>
10009fbc:	00bfdfc4 	movi	r2,-129
10009fc0:	88a2703a 	and	r17,r17,r2
10009fc4:	d8c02215 	stw	r3,136(sp)
10009fc8:	8c400094 	ori	r17,r17,2
10009fcc:	98032a1e 	bne	r19,zero,1000ac78 <___vfiprintf_internal_r+0x1094>
10009fd0:	00840074 	movhi	r2,4097
10009fd4:	10886504 	addi	r2,r2,8596
10009fd8:	d8802615 	stw	r2,152(sp)
10009fdc:	002b883a 	mov	r21,zero
10009fe0:	8001741e 	bne	r16,zero,1000a5b4 <___vfiprintf_internal_r+0x9d0>
10009fe4:	0021883a 	mov	r16,zero
10009fe8:	0029883a 	mov	r20,zero
10009fec:	ddc01a04 	addi	r23,sp,104
10009ff0:	8027883a 	mov	r19,r16
10009ff4:	8500010e 	bge	r16,r20,10009ffc <___vfiprintf_internal_r+0x418>
10009ff8:	a027883a 	mov	r19,r20
10009ffc:	ad403fcc 	andi	r21,r21,255
1000a000:	ad40201c 	xori	r21,r21,128
1000a004:	ad7fe004 	addi	r21,r21,-128
1000a008:	a8000126 	beq	r21,zero,1000a010 <___vfiprintf_internal_r+0x42c>
1000a00c:	9cc00044 	addi	r19,r19,1
1000a010:	89c0008c 	andi	r7,r17,2
1000a014:	38000126 	beq	r7,zero,1000a01c <___vfiprintf_internal_r+0x438>
1000a018:	9cc00084 	addi	r19,r19,2
1000a01c:	88c0210c 	andi	r3,r17,132
1000a020:	1801dd1e 	bne	r3,zero,1000a798 <___vfiprintf_internal_r+0xbb4>
1000a024:	d9402517 	ldw	r5,148(sp)
1000a028:	2cebc83a 	sub	r21,r5,r19
1000a02c:	0541da0e 	bge	zero,r21,1000a798 <___vfiprintf_internal_r+0xbb4>
1000a030:	07000404 	movi	fp,16
1000a034:	d8801c17 	ldw	r2,112(sp)
1000a038:	e543be0e 	bge	fp,r21,1000af34 <___vfiprintf_internal_r+0x1350>
1000a03c:	01440074 	movhi	r5,4097
1000a040:	2948ca04 	addi	r5,r5,9000
1000a044:	dc002715 	stw	r16,156(sp)
1000a048:	d9801b17 	ldw	r6,108(sp)
1000a04c:	a821883a 	mov	r16,r21
1000a050:	d9402315 	stw	r5,140(sp)
1000a054:	028001c4 	movi	r10,7
1000a058:	d9c02915 	stw	r7,164(sp)
1000a05c:	182b883a 	mov	r21,r3
1000a060:	00000506 	br	1000a078 <___vfiprintf_internal_r+0x494>
1000a064:	31000084 	addi	r4,r6,2
1000a068:	42000204 	addi	r8,r8,8
1000a06c:	180d883a 	mov	r6,r3
1000a070:	843ffc04 	addi	r16,r16,-16
1000a074:	e4000f0e 	bge	fp,r16,1000a0b4 <___vfiprintf_internal_r+0x4d0>
1000a078:	01040074 	movhi	r4,4097
1000a07c:	10800404 	addi	r2,r2,16
1000a080:	30c00044 	addi	r3,r6,1
1000a084:	2108ca04 	addi	r4,r4,9000
1000a088:	41000015 	stw	r4,0(r8)
1000a08c:	47000115 	stw	fp,4(r8)
1000a090:	d8801c15 	stw	r2,112(sp)
1000a094:	d8c01b15 	stw	r3,108(sp)
1000a098:	50fff20e 	bge	r10,r3,1000a064 <__alt_data_end+0xf800a064>
1000a09c:	1001b21e 	bne	r2,zero,1000a768 <___vfiprintf_internal_r+0xb84>
1000a0a0:	843ffc04 	addi	r16,r16,-16
1000a0a4:	000d883a 	mov	r6,zero
1000a0a8:	01000044 	movi	r4,1
1000a0ac:	d811883a 	mov	r8,sp
1000a0b0:	e43ff116 	blt	fp,r16,1000a078 <__alt_data_end+0xf800a078>
1000a0b4:	a807883a 	mov	r3,r21
1000a0b8:	d9c02917 	ldw	r7,164(sp)
1000a0bc:	802b883a 	mov	r21,r16
1000a0c0:	dc002717 	ldw	r16,156(sp)
1000a0c4:	d9402317 	ldw	r5,140(sp)
1000a0c8:	a885883a 	add	r2,r21,r2
1000a0cc:	45400115 	stw	r21,4(r8)
1000a0d0:	41400015 	stw	r5,0(r8)
1000a0d4:	d8801c15 	stw	r2,112(sp)
1000a0d8:	d9001b15 	stw	r4,108(sp)
1000a0dc:	014001c4 	movi	r5,7
1000a0e0:	29026216 	blt	r5,r4,1000aa6c <___vfiprintf_internal_r+0xe88>
1000a0e4:	d9801d87 	ldb	r6,118(sp)
1000a0e8:	42000204 	addi	r8,r8,8
1000a0ec:	21400044 	addi	r5,r4,1
1000a0f0:	3001ae1e 	bne	r6,zero,1000a7ac <___vfiprintf_internal_r+0xbc8>
1000a0f4:	3801bb26 	beq	r7,zero,1000a7e4 <___vfiprintf_internal_r+0xc00>
1000a0f8:	d9001d04 	addi	r4,sp,116
1000a0fc:	10800084 	addi	r2,r2,2
1000a100:	41000015 	stw	r4,0(r8)
1000a104:	01000084 	movi	r4,2
1000a108:	41000115 	stw	r4,4(r8)
1000a10c:	d8801c15 	stw	r2,112(sp)
1000a110:	d9401b15 	stw	r5,108(sp)
1000a114:	010001c4 	movi	r4,7
1000a118:	2142680e 	bge	r4,r5,1000aabc <___vfiprintf_internal_r+0xed8>
1000a11c:	1002b11e 	bne	r2,zero,1000abe4 <___vfiprintf_internal_r+0x1000>
1000a120:	01802004 	movi	r6,128
1000a124:	01400044 	movi	r5,1
1000a128:	0009883a 	mov	r4,zero
1000a12c:	d811883a 	mov	r8,sp
1000a130:	1981ae1e 	bne	r3,r6,1000a7ec <___vfiprintf_internal_r+0xc08>
1000a134:	d8c02517 	ldw	r3,148(sp)
1000a138:	1cf9c83a 	sub	fp,r3,r19
1000a13c:	0701ab0e 	bge	zero,fp,1000a7ec <___vfiprintf_internal_r+0xc08>
1000a140:	05400404 	movi	r21,16
1000a144:	af03a90e 	bge	r21,fp,1000afec <___vfiprintf_internal_r+0x1408>
1000a148:	01440074 	movhi	r5,4097
1000a14c:	2948c604 	addi	r5,r5,8984
1000a150:	d9402315 	stw	r5,140(sp)
1000a154:	01c001c4 	movi	r7,7
1000a158:	00000506 	br	1000a170 <___vfiprintf_internal_r+0x58c>
1000a15c:	21800084 	addi	r6,r4,2
1000a160:	42000204 	addi	r8,r8,8
1000a164:	1809883a 	mov	r4,r3
1000a168:	e73ffc04 	addi	fp,fp,-16
1000a16c:	af000d0e 	bge	r21,fp,1000a1a4 <___vfiprintf_internal_r+0x5c0>
1000a170:	10800404 	addi	r2,r2,16
1000a174:	20c00044 	addi	r3,r4,1
1000a178:	44800015 	stw	r18,0(r8)
1000a17c:	45400115 	stw	r21,4(r8)
1000a180:	d8801c15 	stw	r2,112(sp)
1000a184:	d8c01b15 	stw	r3,108(sp)
1000a188:	38fff40e 	bge	r7,r3,1000a15c <__alt_data_end+0xf800a15c>
1000a18c:	10022b1e 	bne	r2,zero,1000aa3c <___vfiprintf_internal_r+0xe58>
1000a190:	e73ffc04 	addi	fp,fp,-16
1000a194:	01800044 	movi	r6,1
1000a198:	0009883a 	mov	r4,zero
1000a19c:	d811883a 	mov	r8,sp
1000a1a0:	af3ff316 	blt	r21,fp,1000a170 <__alt_data_end+0xf800a170>
1000a1a4:	d8c02317 	ldw	r3,140(sp)
1000a1a8:	1705883a 	add	r2,r2,fp
1000a1ac:	47000115 	stw	fp,4(r8)
1000a1b0:	40c00015 	stw	r3,0(r8)
1000a1b4:	d8801c15 	stw	r2,112(sp)
1000a1b8:	d9801b15 	stw	r6,108(sp)
1000a1bc:	00c001c4 	movi	r3,7
1000a1c0:	19829416 	blt	r3,r6,1000ac14 <___vfiprintf_internal_r+0x1030>
1000a1c4:	8521c83a 	sub	r16,r16,r20
1000a1c8:	42000204 	addi	r8,r8,8
1000a1cc:	31400044 	addi	r5,r6,1
1000a1d0:	3009883a 	mov	r4,r6
1000a1d4:	04018716 	blt	zero,r16,1000a7f4 <___vfiprintf_internal_r+0xc10>
1000a1d8:	a085883a 	add	r2,r20,r2
1000a1dc:	45c00015 	stw	r23,0(r8)
1000a1e0:	45000115 	stw	r20,4(r8)
1000a1e4:	d8801c15 	stw	r2,112(sp)
1000a1e8:	d9401b15 	stw	r5,108(sp)
1000a1ec:	00c001c4 	movi	r3,7
1000a1f0:	1941c20e 	bge	r3,r5,1000a8fc <___vfiprintf_internal_r+0xd18>
1000a1f4:	1002531e 	bne	r2,zero,1000ab44 <___vfiprintf_internal_r+0xf60>
1000a1f8:	d8001b15 	stw	zero,108(sp)
1000a1fc:	8c40010c 	andi	r17,r17,4
1000a200:	88023226 	beq	r17,zero,1000aacc <___vfiprintf_internal_r+0xee8>
1000a204:	d9002517 	ldw	r4,148(sp)
1000a208:	24e3c83a 	sub	r17,r4,r19
1000a20c:	04432916 	blt	zero,r17,1000aeb4 <___vfiprintf_internal_r+0x12d0>
1000a210:	d8802517 	ldw	r2,148(sp)
1000a214:	14c0010e 	bge	r2,r19,1000a21c <___vfiprintf_internal_r+0x638>
1000a218:	9805883a 	mov	r2,r19
1000a21c:	d8c02417 	ldw	r3,144(sp)
1000a220:	1887883a 	add	r3,r3,r2
1000a224:	d8c02415 	stw	r3,144(sp)
1000a228:	d8001b15 	stw	zero,108(sp)
1000a22c:	d811883a 	mov	r8,sp
1000a230:	003ea006 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000a234:	8c400814 	ori	r17,r17,32
1000a238:	b0c00007 	ldb	r3,0(r22)
1000a23c:	003ec606 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a240:	b0c00007 	ldb	r3,0(r22)
1000a244:	00801b04 	movi	r2,108
1000a248:	18832026 	beq	r3,r2,1000aecc <___vfiprintf_internal_r+0x12e8>
1000a24c:	8c400414 	ori	r17,r17,16
1000a250:	003ec106 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a254:	9cc03fcc 	andi	r19,r19,255
1000a258:	b811883a 	mov	r8,r23
1000a25c:	9803981e 	bne	r19,zero,1000b0c0 <___vfiprintf_internal_r+0x14dc>
1000a260:	8880080c 	andi	r2,r17,32
1000a264:	1002be26 	beq	r2,zero,1000ad60 <___vfiprintf_internal_r+0x117c>
1000a268:	d9002217 	ldw	r4,136(sp)
1000a26c:	d9402417 	ldw	r5,144(sp)
1000a270:	20800017 	ldw	r2,0(r4)
1000a274:	2807d7fa 	srai	r3,r5,31
1000a278:	21000104 	addi	r4,r4,4
1000a27c:	d9002215 	stw	r4,136(sp)
1000a280:	11400015 	stw	r5,0(r2)
1000a284:	10c00115 	stw	r3,4(r2)
1000a288:	003e8a06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000a28c:	9cc03fcc 	andi	r19,r19,255
1000a290:	b811883a 	mov	r8,r23
1000a294:	9803871e 	bne	r19,zero,1000b0b4 <___vfiprintf_internal_r+0x14d0>
1000a298:	8880080c 	andi	r2,r17,32
1000a29c:	10009a26 	beq	r2,zero,1000a508 <___vfiprintf_internal_r+0x924>
1000a2a0:	d9002217 	ldw	r4,136(sp)
1000a2a4:	d8001d85 	stb	zero,118(sp)
1000a2a8:	20800204 	addi	r2,r4,8
1000a2ac:	24c00017 	ldw	r19,0(r4)
1000a2b0:	25000117 	ldw	r20,4(r4)
1000a2b4:	8002a416 	blt	r16,zero,1000ad48 <___vfiprintf_internal_r+0x1164>
1000a2b8:	013fdfc4 	movi	r4,-129
1000a2bc:	9d06b03a 	or	r3,r19,r20
1000a2c0:	d8802215 	stw	r2,136(sp)
1000a2c4:	8922703a 	and	r17,r17,r4
1000a2c8:	18009b26 	beq	r3,zero,1000a538 <___vfiprintf_internal_r+0x954>
1000a2cc:	002b883a 	mov	r21,zero
1000a2d0:	ddc01a04 	addi	r23,sp,104
1000a2d4:	9806d0fa 	srli	r3,r19,3
1000a2d8:	a008977a 	slli	r4,r20,29
1000a2dc:	a028d0fa 	srli	r20,r20,3
1000a2e0:	9cc001cc 	andi	r19,r19,7
1000a2e4:	98800c04 	addi	r2,r19,48
1000a2e8:	bdffffc4 	addi	r23,r23,-1
1000a2ec:	20e6b03a 	or	r19,r4,r3
1000a2f0:	b8800005 	stb	r2,0(r23)
1000a2f4:	9d06b03a 	or	r3,r19,r20
1000a2f8:	183ff61e 	bne	r3,zero,1000a2d4 <__alt_data_end+0xf800a2d4>
1000a2fc:	88c0004c 	andi	r3,r17,1
1000a300:	18021f1e 	bne	r3,zero,1000ab80 <___vfiprintf_internal_r+0xf9c>
1000a304:	d9401e17 	ldw	r5,120(sp)
1000a308:	2de9c83a 	sub	r20,r5,r23
1000a30c:	003f3806 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a310:	9cc03fcc 	andi	r19,r19,255
1000a314:	b811883a 	mov	r8,r23
1000a318:	98034f1e 	bne	r19,zero,1000b058 <___vfiprintf_internal_r+0x1474>
1000a31c:	00840074 	movhi	r2,4097
1000a320:	10886504 	addi	r2,r2,8596
1000a324:	d8802615 	stw	r2,152(sp)
1000a328:	8880080c 	andi	r2,r17,32
1000a32c:	1000ac26 	beq	r2,zero,1000a5e0 <___vfiprintf_internal_r+0x9fc>
1000a330:	d9002217 	ldw	r4,136(sp)
1000a334:	24c00017 	ldw	r19,0(r4)
1000a338:	25000117 	ldw	r20,4(r4)
1000a33c:	21000204 	addi	r4,r4,8
1000a340:	d9002215 	stw	r4,136(sp)
1000a344:	8880004c 	andi	r2,r17,1
1000a348:	1001e726 	beq	r2,zero,1000aae8 <___vfiprintf_internal_r+0xf04>
1000a34c:	9d04b03a 	or	r2,r19,r20
1000a350:	10025c1e 	bne	r2,zero,1000acc4 <___vfiprintf_internal_r+0x10e0>
1000a354:	d8001d85 	stb	zero,118(sp)
1000a358:	80024416 	blt	r16,zero,1000ac6c <___vfiprintf_internal_r+0x1088>
1000a35c:	00bfdfc4 	movi	r2,-129
1000a360:	88a2703a 	and	r17,r17,r2
1000a364:	003f1d06 	br	10009fdc <__alt_data_end+0xf8009fdc>
1000a368:	d8c02217 	ldw	r3,136(sp)
1000a36c:	04c00044 	movi	r19,1
1000a370:	b811883a 	mov	r8,r23
1000a374:	18800017 	ldw	r2,0(r3)
1000a378:	18c00104 	addi	r3,r3,4
1000a37c:	d8001d85 	stb	zero,118(sp)
1000a380:	d8801005 	stb	r2,64(sp)
1000a384:	d8c02215 	stw	r3,136(sp)
1000a388:	9829883a 	mov	r20,r19
1000a38c:	ddc01004 	addi	r23,sp,64
1000a390:	0021883a 	mov	r16,zero
1000a394:	003f1e06 	br	1000a010 <__alt_data_end+0xf800a010>
1000a398:	9cc03fcc 	andi	r19,r19,255
1000a39c:	b811883a 	mov	r8,r23
1000a3a0:	9803331e 	bne	r19,zero,1000b070 <___vfiprintf_internal_r+0x148c>
1000a3a4:	8880080c 	andi	r2,r17,32
1000a3a8:	10004826 	beq	r2,zero,1000a4cc <___vfiprintf_internal_r+0x8e8>
1000a3ac:	d9002217 	ldw	r4,136(sp)
1000a3b0:	20800117 	ldw	r2,4(r4)
1000a3b4:	24c00017 	ldw	r19,0(r4)
1000a3b8:	21000204 	addi	r4,r4,8
1000a3bc:	d9002215 	stw	r4,136(sp)
1000a3c0:	1029883a 	mov	r20,r2
1000a3c4:	10024c16 	blt	r2,zero,1000acf8 <___vfiprintf_internal_r+0x1114>
1000a3c8:	dd401d83 	ldbu	r21,118(sp)
1000a3cc:	80007116 	blt	r16,zero,1000a594 <___vfiprintf_internal_r+0x9b0>
1000a3d0:	00ffdfc4 	movi	r3,-129
1000a3d4:	9d04b03a 	or	r2,r19,r20
1000a3d8:	88e2703a 	and	r17,r17,r3
1000a3dc:	1000d126 	beq	r2,zero,1000a724 <___vfiprintf_internal_r+0xb40>
1000a3e0:	a0023526 	beq	r20,zero,1000acb8 <___vfiprintf_internal_r+0x10d4>
1000a3e4:	ddc01a04 	addi	r23,sp,104
1000a3e8:	4039883a 	mov	fp,r8
1000a3ec:	9809883a 	mov	r4,r19
1000a3f0:	a00b883a 	mov	r5,r20
1000a3f4:	01800284 	movi	r6,10
1000a3f8:	000f883a 	mov	r7,zero
1000a3fc:	000c1100 	call	1000c110 <__umoddi3>
1000a400:	10800c04 	addi	r2,r2,48
1000a404:	bdffffc4 	addi	r23,r23,-1
1000a408:	9809883a 	mov	r4,r19
1000a40c:	a00b883a 	mov	r5,r20
1000a410:	b8800005 	stb	r2,0(r23)
1000a414:	01800284 	movi	r6,10
1000a418:	000f883a 	mov	r7,zero
1000a41c:	000bb140 	call	1000bb14 <__udivdi3>
1000a420:	1027883a 	mov	r19,r2
1000a424:	10c4b03a 	or	r2,r2,r3
1000a428:	1829883a 	mov	r20,r3
1000a42c:	103fef1e 	bne	r2,zero,1000a3ec <__alt_data_end+0xf800a3ec>
1000a430:	d9001e17 	ldw	r4,120(sp)
1000a434:	e011883a 	mov	r8,fp
1000a438:	25e9c83a 	sub	r20,r4,r23
1000a43c:	003eec06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a440:	d8802307 	ldb	r2,140(sp)
1000a444:	1002361e 	bne	r2,zero,1000ad20 <___vfiprintf_internal_r+0x113c>
1000a448:	00c00804 	movi	r3,32
1000a44c:	d8c02305 	stb	r3,140(sp)
1000a450:	04c00044 	movi	r19,1
1000a454:	b0c00007 	ldb	r3,0(r22)
1000a458:	003e3f06 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a45c:	8c400054 	ori	r17,r17,1
1000a460:	b0c00007 	ldb	r3,0(r22)
1000a464:	003e3c06 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a468:	8c402014 	ori	r17,r17,128
1000a46c:	b0c00007 	ldb	r3,0(r22)
1000a470:	003e3906 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a474:	dc002715 	stw	r16,156(sp)
1000a478:	d8002515 	stw	zero,148(sp)
1000a47c:	1f3ff404 	addi	fp,r3,-48
1000a480:	0009883a 	mov	r4,zero
1000a484:	b021883a 	mov	r16,r22
1000a488:	01400284 	movi	r5,10
1000a48c:	000c8880 	call	1000c888 <__mulsi3>
1000a490:	80c00007 	ldb	r3,0(r16)
1000a494:	e089883a 	add	r4,fp,r2
1000a498:	b5800044 	addi	r22,r22,1
1000a49c:	1f3ff404 	addi	fp,r3,-48
1000a4a0:	b021883a 	mov	r16,r22
1000a4a4:	af3ff82e 	bgeu	r21,fp,1000a488 <__alt_data_end+0xf800a488>
1000a4a8:	d9002515 	stw	r4,148(sp)
1000a4ac:	dc002717 	ldw	r16,156(sp)
1000a4b0:	003e2a06 	br	10009d5c <__alt_data_end+0xf8009d5c>
1000a4b4:	9cc03fcc 	andi	r19,r19,255
1000a4b8:	b811883a 	mov	r8,r23
1000a4bc:	9802e91e 	bne	r19,zero,1000b064 <___vfiprintf_internal_r+0x1480>
1000a4c0:	8c400414 	ori	r17,r17,16
1000a4c4:	8880080c 	andi	r2,r17,32
1000a4c8:	103fb81e 	bne	r2,zero,1000a3ac <__alt_data_end+0xf800a3ac>
1000a4cc:	8880040c 	andi	r2,r17,16
1000a4d0:	10022e26 	beq	r2,zero,1000ad8c <___vfiprintf_internal_r+0x11a8>
1000a4d4:	d9402217 	ldw	r5,136(sp)
1000a4d8:	2cc00017 	ldw	r19,0(r5)
1000a4dc:	29400104 	addi	r5,r5,4
1000a4e0:	d9402215 	stw	r5,136(sp)
1000a4e4:	9829d7fa 	srai	r20,r19,31
1000a4e8:	a005883a 	mov	r2,r20
1000a4ec:	003fb506 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000a4f0:	9cc03fcc 	andi	r19,r19,255
1000a4f4:	b811883a 	mov	r8,r23
1000a4f8:	9802fa1e 	bne	r19,zero,1000b0e4 <___vfiprintf_internal_r+0x1500>
1000a4fc:	8c400414 	ori	r17,r17,16
1000a500:	8880080c 	andi	r2,r17,32
1000a504:	103f661e 	bne	r2,zero,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a508:	8880040c 	andi	r2,r17,16
1000a50c:	10020626 	beq	r2,zero,1000ad28 <___vfiprintf_internal_r+0x1144>
1000a510:	d9402217 	ldw	r5,136(sp)
1000a514:	d8001d85 	stb	zero,118(sp)
1000a518:	0029883a 	mov	r20,zero
1000a51c:	28800104 	addi	r2,r5,4
1000a520:	2cc00017 	ldw	r19,0(r5)
1000a524:	80020816 	blt	r16,zero,1000ad48 <___vfiprintf_internal_r+0x1164>
1000a528:	00ffdfc4 	movi	r3,-129
1000a52c:	d8802215 	stw	r2,136(sp)
1000a530:	88e2703a 	and	r17,r17,r3
1000a534:	983f651e 	bne	r19,zero,1000a2cc <__alt_data_end+0xf800a2cc>
1000a538:	002b883a 	mov	r21,zero
1000a53c:	8002cf26 	beq	r16,zero,1000b07c <___vfiprintf_internal_r+0x1498>
1000a540:	0027883a 	mov	r19,zero
1000a544:	0029883a 	mov	r20,zero
1000a548:	003f6106 	br	1000a2d0 <__alt_data_end+0xf800a2d0>
1000a54c:	9cc03fcc 	andi	r19,r19,255
1000a550:	b811883a 	mov	r8,r23
1000a554:	9802e01e 	bne	r19,zero,1000b0d8 <___vfiprintf_internal_r+0x14f4>
1000a558:	8c400414 	ori	r17,r17,16
1000a55c:	8880080c 	andi	r2,r17,32
1000a560:	1000641e 	bne	r2,zero,1000a6f4 <___vfiprintf_internal_r+0xb10>
1000a564:	8880040c 	andi	r2,r17,16
1000a568:	1001c81e 	bne	r2,zero,1000ac8c <___vfiprintf_internal_r+0x10a8>
1000a56c:	8880100c 	andi	r2,r17,64
1000a570:	d8001d85 	stb	zero,118(sp)
1000a574:	1002281e 	bne	r2,zero,1000ae18 <___vfiprintf_internal_r+0x1234>
1000a578:	d9002217 	ldw	r4,136(sp)
1000a57c:	0029883a 	mov	r20,zero
1000a580:	20800104 	addi	r2,r4,4
1000a584:	24c00017 	ldw	r19,0(r4)
1000a588:	8001c60e 	bge	r16,zero,1000aca4 <___vfiprintf_internal_r+0x10c0>
1000a58c:	d8802215 	stw	r2,136(sp)
1000a590:	002b883a 	mov	r21,zero
1000a594:	9d04b03a 	or	r2,r19,r20
1000a598:	103f911e 	bne	r2,zero,1000a3e0 <__alt_data_end+0xf800a3e0>
1000a59c:	00800044 	movi	r2,1
1000a5a0:	10803fcc 	andi	r2,r2,255
1000a5a4:	00c00044 	movi	r3,1
1000a5a8:	10c05f26 	beq	r2,r3,1000a728 <___vfiprintf_internal_r+0xb44>
1000a5ac:	00c00084 	movi	r3,2
1000a5b0:	10ffe31e 	bne	r2,r3,1000a540 <__alt_data_end+0xf800a540>
1000a5b4:	0027883a 	mov	r19,zero
1000a5b8:	0029883a 	mov	r20,zero
1000a5bc:	00015106 	br	1000ab04 <___vfiprintf_internal_r+0xf20>
1000a5c0:	9cc03fcc 	andi	r19,r19,255
1000a5c4:	b811883a 	mov	r8,r23
1000a5c8:	9802c01e 	bne	r19,zero,1000b0cc <___vfiprintf_internal_r+0x14e8>
1000a5cc:	01440074 	movhi	r5,4097
1000a5d0:	29486004 	addi	r5,r5,8576
1000a5d4:	d9402615 	stw	r5,152(sp)
1000a5d8:	8880080c 	andi	r2,r17,32
1000a5dc:	103f541e 	bne	r2,zero,1000a330 <__alt_data_end+0xf800a330>
1000a5e0:	8880040c 	andi	r2,r17,16
1000a5e4:	1001f226 	beq	r2,zero,1000adb0 <___vfiprintf_internal_r+0x11cc>
1000a5e8:	d9402217 	ldw	r5,136(sp)
1000a5ec:	0029883a 	mov	r20,zero
1000a5f0:	2cc00017 	ldw	r19,0(r5)
1000a5f4:	29400104 	addi	r5,r5,4
1000a5f8:	d9402215 	stw	r5,136(sp)
1000a5fc:	003f5106 	br	1000a344 <__alt_data_end+0xf800a344>
1000a600:	d8c02217 	ldw	r3,136(sp)
1000a604:	b811883a 	mov	r8,r23
1000a608:	d8001d85 	stb	zero,118(sp)
1000a60c:	1dc00017 	ldw	r23,0(r3)
1000a610:	1f000104 	addi	fp,r3,4
1000a614:	b8025926 	beq	r23,zero,1000af7c <___vfiprintf_internal_r+0x1398>
1000a618:	80023316 	blt	r16,zero,1000aee8 <___vfiprintf_internal_r+0x1304>
1000a61c:	800d883a 	mov	r6,r16
1000a620:	000b883a 	mov	r5,zero
1000a624:	b809883a 	mov	r4,r23
1000a628:	da002a15 	stw	r8,168(sp)
1000a62c:	0007d240 	call	10007d24 <memchr>
1000a630:	da002a17 	ldw	r8,168(sp)
1000a634:	10026826 	beq	r2,zero,1000afd8 <___vfiprintf_internal_r+0x13f4>
1000a638:	15e9c83a 	sub	r20,r2,r23
1000a63c:	dd401d83 	ldbu	r21,118(sp)
1000a640:	df002215 	stw	fp,136(sp)
1000a644:	0021883a 	mov	r16,zero
1000a648:	003e6906 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a64c:	9cc03fcc 	andi	r19,r19,255
1000a650:	b811883a 	mov	r8,r23
1000a654:	983fc126 	beq	r19,zero,1000a55c <__alt_data_end+0xf800a55c>
1000a658:	d8c02303 	ldbu	r3,140(sp)
1000a65c:	d8c01d85 	stb	r3,118(sp)
1000a660:	003fbe06 	br	1000a55c <__alt_data_end+0xf800a55c>
1000a664:	d9002217 	ldw	r4,136(sp)
1000a668:	d9402217 	ldw	r5,136(sp)
1000a66c:	21000017 	ldw	r4,0(r4)
1000a670:	28800104 	addi	r2,r5,4
1000a674:	d9002515 	stw	r4,148(sp)
1000a678:	203e3d16 	blt	r4,zero,10009f70 <__alt_data_end+0xf8009f70>
1000a67c:	d8802215 	stw	r2,136(sp)
1000a680:	b0c00007 	ldb	r3,0(r22)
1000a684:	003db406 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a688:	00c00ac4 	movi	r3,43
1000a68c:	d8c02305 	stb	r3,140(sp)
1000a690:	04c00044 	movi	r19,1
1000a694:	b0c00007 	ldb	r3,0(r22)
1000a698:	003daf06 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a69c:	b0c00007 	ldb	r3,0(r22)
1000a6a0:	01000a84 	movi	r4,42
1000a6a4:	b4000044 	addi	r16,r22,1
1000a6a8:	19025e26 	beq	r3,r4,1000b024 <___vfiprintf_internal_r+0x1440>
1000a6ac:	1f3ff404 	addi	fp,r3,-48
1000a6b0:	0009883a 	mov	r4,zero
1000a6b4:	af025236 	bltu	r21,fp,1000b000 <___vfiprintf_internal_r+0x141c>
1000a6b8:	01400284 	movi	r5,10
1000a6bc:	000c8880 	call	1000c888 <__mulsi3>
1000a6c0:	80c00007 	ldb	r3,0(r16)
1000a6c4:	1709883a 	add	r4,r2,fp
1000a6c8:	85800044 	addi	r22,r16,1
1000a6cc:	1f3ff404 	addi	fp,r3,-48
1000a6d0:	b021883a 	mov	r16,r22
1000a6d4:	af3ff82e 	bgeu	r21,fp,1000a6b8 <__alt_data_end+0xf800a6b8>
1000a6d8:	2021883a 	mov	r16,r4
1000a6dc:	203d9f0e 	bge	r4,zero,10009d5c <__alt_data_end+0xf8009d5c>
1000a6e0:	043fffc4 	movi	r16,-1
1000a6e4:	003d9d06 	br	10009d5c <__alt_data_end+0xf8009d5c>
1000a6e8:	8c401014 	ori	r17,r17,64
1000a6ec:	b0c00007 	ldb	r3,0(r22)
1000a6f0:	003d9906 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a6f4:	d9002217 	ldw	r4,136(sp)
1000a6f8:	d8001d85 	stb	zero,118(sp)
1000a6fc:	20c00204 	addi	r3,r4,8
1000a700:	24c00017 	ldw	r19,0(r4)
1000a704:	25000117 	ldw	r20,4(r4)
1000a708:	8001e716 	blt	r16,zero,1000aea8 <___vfiprintf_internal_r+0x12c4>
1000a70c:	013fdfc4 	movi	r4,-129
1000a710:	9d04b03a 	or	r2,r19,r20
1000a714:	d8c02215 	stw	r3,136(sp)
1000a718:	8922703a 	and	r17,r17,r4
1000a71c:	002b883a 	mov	r21,zero
1000a720:	103f2f1e 	bne	r2,zero,1000a3e0 <__alt_data_end+0xf800a3e0>
1000a724:	803e2f26 	beq	r16,zero,10009fe4 <__alt_data_end+0xf8009fe4>
1000a728:	0027883a 	mov	r19,zero
1000a72c:	9cc00c04 	addi	r19,r19,48
1000a730:	dcc019c5 	stb	r19,103(sp)
1000a734:	dd002817 	ldw	r20,160(sp)
1000a738:	ddc019c4 	addi	r23,sp,103
1000a73c:	003e2c06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a740:	9cc03fcc 	andi	r19,r19,255
1000a744:	b811883a 	mov	r8,r23
1000a748:	9802571e 	bne	r19,zero,1000b0a8 <___vfiprintf_internal_r+0x14c4>
1000a74c:	18005726 	beq	r3,zero,1000a8ac <___vfiprintf_internal_r+0xcc8>
1000a750:	04c00044 	movi	r19,1
1000a754:	d8c01005 	stb	r3,64(sp)
1000a758:	d8001d85 	stb	zero,118(sp)
1000a75c:	9829883a 	mov	r20,r19
1000a760:	ddc01004 	addi	r23,sp,64
1000a764:	003f0a06 	br	1000a390 <__alt_data_end+0xf800a390>
1000a768:	d9402017 	ldw	r5,128(sp)
1000a76c:	d9002117 	ldw	r4,132(sp)
1000a770:	d9801a04 	addi	r6,sp,104
1000a774:	da802a15 	stw	r10,168(sp)
1000a778:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000a77c:	da802a17 	ldw	r10,168(sp)
1000a780:	1000501e 	bne	r2,zero,1000a8c4 <___vfiprintf_internal_r+0xce0>
1000a784:	d9801b17 	ldw	r6,108(sp)
1000a788:	d8801c17 	ldw	r2,112(sp)
1000a78c:	d811883a 	mov	r8,sp
1000a790:	31000044 	addi	r4,r6,1
1000a794:	003e3606 	br	1000a070 <__alt_data_end+0xf800a070>
1000a798:	d9001b17 	ldw	r4,108(sp)
1000a79c:	d8801c17 	ldw	r2,112(sp)
1000a7a0:	21400044 	addi	r5,r4,1
1000a7a4:	d9801d87 	ldb	r6,118(sp)
1000a7a8:	303e5226 	beq	r6,zero,1000a0f4 <__alt_data_end+0xf800a0f4>
1000a7ac:	01800044 	movi	r6,1
1000a7b0:	d9001d84 	addi	r4,sp,118
1000a7b4:	1185883a 	add	r2,r2,r6
1000a7b8:	41000015 	stw	r4,0(r8)
1000a7bc:	41800115 	stw	r6,4(r8)
1000a7c0:	d8801c15 	stw	r2,112(sp)
1000a7c4:	d9401b15 	stw	r5,108(sp)
1000a7c8:	010001c4 	movi	r4,7
1000a7cc:	2140b00e 	bge	r4,r5,1000aa90 <___vfiprintf_internal_r+0xeac>
1000a7d0:	1000f61e 	bne	r2,zero,1000abac <___vfiprintf_internal_r+0xfc8>
1000a7d4:	3800b31e 	bne	r7,zero,1000aaa4 <___vfiprintf_internal_r+0xec0>
1000a7d8:	0009883a 	mov	r4,zero
1000a7dc:	300b883a 	mov	r5,r6
1000a7e0:	d811883a 	mov	r8,sp
1000a7e4:	01802004 	movi	r6,128
1000a7e8:	19be5226 	beq	r3,r6,1000a134 <__alt_data_end+0xf800a134>
1000a7ec:	8521c83a 	sub	r16,r16,r20
1000a7f0:	043e790e 	bge	zero,r16,1000a1d8 <__alt_data_end+0xf800a1d8>
1000a7f4:	05400404 	movi	r21,16
1000a7f8:	ac01b00e 	bge	r21,r16,1000aebc <___vfiprintf_internal_r+0x12d8>
1000a7fc:	01440074 	movhi	r5,4097
1000a800:	2948c604 	addi	r5,r5,8984
1000a804:	d9402315 	stw	r5,140(sp)
1000a808:	070001c4 	movi	fp,7
1000a80c:	00000506 	br	1000a824 <___vfiprintf_internal_r+0xc40>
1000a810:	21400084 	addi	r5,r4,2
1000a814:	42000204 	addi	r8,r8,8
1000a818:	1809883a 	mov	r4,r3
1000a81c:	843ffc04 	addi	r16,r16,-16
1000a820:	ac000d0e 	bge	r21,r16,1000a858 <___vfiprintf_internal_r+0xc74>
1000a824:	10800404 	addi	r2,r2,16
1000a828:	20c00044 	addi	r3,r4,1
1000a82c:	44800015 	stw	r18,0(r8)
1000a830:	45400115 	stw	r21,4(r8)
1000a834:	d8801c15 	stw	r2,112(sp)
1000a838:	d8c01b15 	stw	r3,108(sp)
1000a83c:	e0fff40e 	bge	fp,r3,1000a810 <__alt_data_end+0xf800a810>
1000a840:	1000101e 	bne	r2,zero,1000a884 <___vfiprintf_internal_r+0xca0>
1000a844:	843ffc04 	addi	r16,r16,-16
1000a848:	01400044 	movi	r5,1
1000a84c:	0009883a 	mov	r4,zero
1000a850:	d811883a 	mov	r8,sp
1000a854:	ac3ff316 	blt	r21,r16,1000a824 <__alt_data_end+0xf800a824>
1000a858:	d8c02317 	ldw	r3,140(sp)
1000a85c:	1405883a 	add	r2,r2,r16
1000a860:	44000115 	stw	r16,4(r8)
1000a864:	40c00015 	stw	r3,0(r8)
1000a868:	d8801c15 	stw	r2,112(sp)
1000a86c:	d9401b15 	stw	r5,108(sp)
1000a870:	00c001c4 	movi	r3,7
1000a874:	19401916 	blt	r3,r5,1000a8dc <___vfiprintf_internal_r+0xcf8>
1000a878:	42000204 	addi	r8,r8,8
1000a87c:	29400044 	addi	r5,r5,1
1000a880:	003e5506 	br	1000a1d8 <__alt_data_end+0xf800a1d8>
1000a884:	d9402017 	ldw	r5,128(sp)
1000a888:	d9002117 	ldw	r4,132(sp)
1000a88c:	d9801a04 	addi	r6,sp,104
1000a890:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000a894:	10000b1e 	bne	r2,zero,1000a8c4 <___vfiprintf_internal_r+0xce0>
1000a898:	d9001b17 	ldw	r4,108(sp)
1000a89c:	d8801c17 	ldw	r2,112(sp)
1000a8a0:	d811883a 	mov	r8,sp
1000a8a4:	21400044 	addi	r5,r4,1
1000a8a8:	003fdc06 	br	1000a81c <__alt_data_end+0xf800a81c>
1000a8ac:	d8801c17 	ldw	r2,112(sp)
1000a8b0:	10000426 	beq	r2,zero,1000a8c4 <___vfiprintf_internal_r+0xce0>
1000a8b4:	d9402017 	ldw	r5,128(sp)
1000a8b8:	d9002117 	ldw	r4,132(sp)
1000a8bc:	d9801a04 	addi	r6,sp,104
1000a8c0:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000a8c4:	d9402017 	ldw	r5,128(sp)
1000a8c8:	2880030b 	ldhu	r2,12(r5)
1000a8cc:	1080100c 	andi	r2,r2,64
1000a8d0:	10014d1e 	bne	r2,zero,1000ae08 <___vfiprintf_internal_r+0x1224>
1000a8d4:	d8802417 	ldw	r2,144(sp)
1000a8d8:	003d9706 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a8dc:	1000d21e 	bne	r2,zero,1000ac28 <___vfiprintf_internal_r+0x1044>
1000a8e0:	00c00044 	movi	r3,1
1000a8e4:	a005883a 	mov	r2,r20
1000a8e8:	ddc00015 	stw	r23,0(sp)
1000a8ec:	dd000115 	stw	r20,4(sp)
1000a8f0:	dd001c15 	stw	r20,112(sp)
1000a8f4:	d8c01b15 	stw	r3,108(sp)
1000a8f8:	d811883a 	mov	r8,sp
1000a8fc:	42000204 	addi	r8,r8,8
1000a900:	8c40010c 	andi	r17,r17,4
1000a904:	88004026 	beq	r17,zero,1000aa08 <___vfiprintf_internal_r+0xe24>
1000a908:	d9002517 	ldw	r4,148(sp)
1000a90c:	24e3c83a 	sub	r17,r4,r19
1000a910:	04403d0e 	bge	zero,r17,1000aa08 <___vfiprintf_internal_r+0xe24>
1000a914:	04000404 	movi	r16,16
1000a918:	8441a90e 	bge	r16,r17,1000afc0 <___vfiprintf_internal_r+0x13dc>
1000a91c:	00c40074 	movhi	r3,4097
1000a920:	18c8ca04 	addi	r3,r3,9000
1000a924:	d9001b17 	ldw	r4,108(sp)
1000a928:	d8c02315 	stw	r3,140(sp)
1000a92c:	050001c4 	movi	r20,7
1000a930:	dd402117 	ldw	r21,132(sp)
1000a934:	ddc02017 	ldw	r23,128(sp)
1000a938:	00000506 	br	1000a950 <___vfiprintf_internal_r+0xd6c>
1000a93c:	21400084 	addi	r5,r4,2
1000a940:	42000204 	addi	r8,r8,8
1000a944:	1809883a 	mov	r4,r3
1000a948:	8c7ffc04 	addi	r17,r17,-16
1000a94c:	84400f0e 	bge	r16,r17,1000a98c <___vfiprintf_internal_r+0xda8>
1000a950:	01440074 	movhi	r5,4097
1000a954:	10800404 	addi	r2,r2,16
1000a958:	20c00044 	addi	r3,r4,1
1000a95c:	2948ca04 	addi	r5,r5,9000
1000a960:	41400015 	stw	r5,0(r8)
1000a964:	44000115 	stw	r16,4(r8)
1000a968:	d8801c15 	stw	r2,112(sp)
1000a96c:	d8c01b15 	stw	r3,108(sp)
1000a970:	a0fff20e 	bge	r20,r3,1000a93c <__alt_data_end+0xf800a93c>
1000a974:	1000141e 	bne	r2,zero,1000a9c8 <___vfiprintf_internal_r+0xde4>
1000a978:	8c7ffc04 	addi	r17,r17,-16
1000a97c:	01400044 	movi	r5,1
1000a980:	0009883a 	mov	r4,zero
1000a984:	d811883a 	mov	r8,sp
1000a988:	847ff116 	blt	r16,r17,1000a950 <__alt_data_end+0xf800a950>
1000a98c:	d8c02317 	ldw	r3,140(sp)
1000a990:	1445883a 	add	r2,r2,r17
1000a994:	44400115 	stw	r17,4(r8)
1000a998:	40c00015 	stw	r3,0(r8)
1000a99c:	d8801c15 	stw	r2,112(sp)
1000a9a0:	d9401b15 	stw	r5,108(sp)
1000a9a4:	00c001c4 	movi	r3,7
1000a9a8:	1940170e 	bge	r3,r5,1000aa08 <___vfiprintf_internal_r+0xe24>
1000a9ac:	1000101e 	bne	r2,zero,1000a9f0 <___vfiprintf_internal_r+0xe0c>
1000a9b0:	d8802517 	ldw	r2,148(sp)
1000a9b4:	14c11616 	blt	r2,r19,1000ae10 <___vfiprintf_internal_r+0x122c>
1000a9b8:	d9002417 	ldw	r4,144(sp)
1000a9bc:	2089883a 	add	r4,r4,r2
1000a9c0:	d9002415 	stw	r4,144(sp)
1000a9c4:	003e1806 	br	1000a228 <__alt_data_end+0xf800a228>
1000a9c8:	d9801a04 	addi	r6,sp,104
1000a9cc:	b80b883a 	mov	r5,r23
1000a9d0:	a809883a 	mov	r4,r21
1000a9d4:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000a9d8:	103fba1e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000a9dc:	d9001b17 	ldw	r4,108(sp)
1000a9e0:	d8801c17 	ldw	r2,112(sp)
1000a9e4:	d811883a 	mov	r8,sp
1000a9e8:	21400044 	addi	r5,r4,1
1000a9ec:	003fd606 	br	1000a948 <__alt_data_end+0xf800a948>
1000a9f0:	d9402017 	ldw	r5,128(sp)
1000a9f4:	d9002117 	ldw	r4,132(sp)
1000a9f8:	d9801a04 	addi	r6,sp,104
1000a9fc:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000aa00:	103fb01e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000aa04:	d8801c17 	ldw	r2,112(sp)
1000aa08:	d8c02517 	ldw	r3,148(sp)
1000aa0c:	1cc0010e 	bge	r3,r19,1000aa14 <___vfiprintf_internal_r+0xe30>
1000aa10:	9807883a 	mov	r3,r19
1000aa14:	d9002417 	ldw	r4,144(sp)
1000aa18:	20c9883a 	add	r4,r4,r3
1000aa1c:	d9002415 	stw	r4,144(sp)
1000aa20:	103e0126 	beq	r2,zero,1000a228 <__alt_data_end+0xf800a228>
1000aa24:	d9402017 	ldw	r5,128(sp)
1000aa28:	d9002117 	ldw	r4,132(sp)
1000aa2c:	d9801a04 	addi	r6,sp,104
1000aa30:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000aa34:	103dfc26 	beq	r2,zero,1000a228 <__alt_data_end+0xf800a228>
1000aa38:	003fa206 	br	1000a8c4 <__alt_data_end+0xf800a8c4>
1000aa3c:	d9402017 	ldw	r5,128(sp)
1000aa40:	d9002117 	ldw	r4,132(sp)
1000aa44:	d9801a04 	addi	r6,sp,104
1000aa48:	d9c02b15 	stw	r7,172(sp)
1000aa4c:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000aa50:	d9c02b17 	ldw	r7,172(sp)
1000aa54:	103f9b1e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000aa58:	d9001b17 	ldw	r4,108(sp)
1000aa5c:	d8801c17 	ldw	r2,112(sp)
1000aa60:	d811883a 	mov	r8,sp
1000aa64:	21800044 	addi	r6,r4,1
1000aa68:	003dbf06 	br	1000a168 <__alt_data_end+0xf800a168>
1000aa6c:	1000d81e 	bne	r2,zero,1000add0 <___vfiprintf_internal_r+0x11ec>
1000aa70:	d9001d87 	ldb	r4,118(sp)
1000aa74:	20000a26 	beq	r4,zero,1000aaa0 <___vfiprintf_internal_r+0xebc>
1000aa78:	00800044 	movi	r2,1
1000aa7c:	d9001d84 	addi	r4,sp,118
1000aa80:	100b883a 	mov	r5,r2
1000aa84:	d9000015 	stw	r4,0(sp)
1000aa88:	d8800115 	stw	r2,4(sp)
1000aa8c:	d811883a 	mov	r8,sp
1000aa90:	2809883a 	mov	r4,r5
1000aa94:	42000204 	addi	r8,r8,8
1000aa98:	29400044 	addi	r5,r5,1
1000aa9c:	003d9506 	br	1000a0f4 <__alt_data_end+0xf800a0f4>
1000aaa0:	3800fd26 	beq	r7,zero,1000ae98 <___vfiprintf_internal_r+0x12b4>
1000aaa4:	00800084 	movi	r2,2
1000aaa8:	d9001d04 	addi	r4,sp,116
1000aaac:	d9000015 	stw	r4,0(sp)
1000aab0:	d8800115 	stw	r2,4(sp)
1000aab4:	01400044 	movi	r5,1
1000aab8:	d811883a 	mov	r8,sp
1000aabc:	2809883a 	mov	r4,r5
1000aac0:	42000204 	addi	r8,r8,8
1000aac4:	29400044 	addi	r5,r5,1
1000aac8:	003f4606 	br	1000a7e4 <__alt_data_end+0xf800a7e4>
1000aacc:	d8802517 	ldw	r2,148(sp)
1000aad0:	14c0010e 	bge	r2,r19,1000aad8 <___vfiprintf_internal_r+0xef4>
1000aad4:	9805883a 	mov	r2,r19
1000aad8:	d9402417 	ldw	r5,144(sp)
1000aadc:	288b883a 	add	r5,r5,r2
1000aae0:	d9402415 	stw	r5,144(sp)
1000aae4:	003dd006 	br	1000a228 <__alt_data_end+0xf800a228>
1000aae8:	d8001d85 	stb	zero,118(sp)
1000aaec:	80005d16 	blt	r16,zero,1000ac64 <___vfiprintf_internal_r+0x1080>
1000aaf0:	00ffdfc4 	movi	r3,-129
1000aaf4:	9d04b03a 	or	r2,r19,r20
1000aaf8:	88e2703a 	and	r17,r17,r3
1000aafc:	103d3726 	beq	r2,zero,10009fdc <__alt_data_end+0xf8009fdc>
1000ab00:	002b883a 	mov	r21,zero
1000ab04:	d9002617 	ldw	r4,152(sp)
1000ab08:	ddc01a04 	addi	r23,sp,104
1000ab0c:	988003cc 	andi	r2,r19,15
1000ab10:	a006973a 	slli	r3,r20,28
1000ab14:	2085883a 	add	r2,r4,r2
1000ab18:	9826d13a 	srli	r19,r19,4
1000ab1c:	10800003 	ldbu	r2,0(r2)
1000ab20:	a028d13a 	srli	r20,r20,4
1000ab24:	bdffffc4 	addi	r23,r23,-1
1000ab28:	1ce6b03a 	or	r19,r3,r19
1000ab2c:	b8800005 	stb	r2,0(r23)
1000ab30:	9d04b03a 	or	r2,r19,r20
1000ab34:	103ff51e 	bne	r2,zero,1000ab0c <__alt_data_end+0xf800ab0c>
1000ab38:	d8801e17 	ldw	r2,120(sp)
1000ab3c:	15e9c83a 	sub	r20,r2,r23
1000ab40:	003d2b06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000ab44:	d9402017 	ldw	r5,128(sp)
1000ab48:	d9002117 	ldw	r4,132(sp)
1000ab4c:	d9801a04 	addi	r6,sp,104
1000ab50:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000ab54:	103f5b1e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000ab58:	d8801c17 	ldw	r2,112(sp)
1000ab5c:	d811883a 	mov	r8,sp
1000ab60:	003f6706 	br	1000a900 <__alt_data_end+0xf800a900>
1000ab64:	d9402017 	ldw	r5,128(sp)
1000ab68:	d9002117 	ldw	r4,132(sp)
1000ab6c:	d9801a04 	addi	r6,sp,104
1000ab70:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000ab74:	103f531e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000ab78:	d811883a 	mov	r8,sp
1000ab7c:	003cd906 	br	10009ee4 <__alt_data_end+0xf8009ee4>
1000ab80:	10803fcc 	andi	r2,r2,255
1000ab84:	1080201c 	xori	r2,r2,128
1000ab88:	10bfe004 	addi	r2,r2,-128
1000ab8c:	00c00c04 	movi	r3,48
1000ab90:	10ffe926 	beq	r2,r3,1000ab38 <__alt_data_end+0xf800ab38>
1000ab94:	b8ffffc5 	stb	r3,-1(r23)
1000ab98:	d8c01e17 	ldw	r3,120(sp)
1000ab9c:	b8bfffc4 	addi	r2,r23,-1
1000aba0:	102f883a 	mov	r23,r2
1000aba4:	18a9c83a 	sub	r20,r3,r2
1000aba8:	003d1106 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000abac:	d9402017 	ldw	r5,128(sp)
1000abb0:	d9002117 	ldw	r4,132(sp)
1000abb4:	d9801a04 	addi	r6,sp,104
1000abb8:	d8c02a15 	stw	r3,168(sp)
1000abbc:	d9c02b15 	stw	r7,172(sp)
1000abc0:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000abc4:	d8c02a17 	ldw	r3,168(sp)
1000abc8:	d9c02b17 	ldw	r7,172(sp)
1000abcc:	103f3d1e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000abd0:	d9001b17 	ldw	r4,108(sp)
1000abd4:	d8801c17 	ldw	r2,112(sp)
1000abd8:	d811883a 	mov	r8,sp
1000abdc:	21400044 	addi	r5,r4,1
1000abe0:	003d4406 	br	1000a0f4 <__alt_data_end+0xf800a0f4>
1000abe4:	d9402017 	ldw	r5,128(sp)
1000abe8:	d9002117 	ldw	r4,132(sp)
1000abec:	d9801a04 	addi	r6,sp,104
1000abf0:	d8c02a15 	stw	r3,168(sp)
1000abf4:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000abf8:	d8c02a17 	ldw	r3,168(sp)
1000abfc:	103f311e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000ac00:	d9001b17 	ldw	r4,108(sp)
1000ac04:	d8801c17 	ldw	r2,112(sp)
1000ac08:	d811883a 	mov	r8,sp
1000ac0c:	21400044 	addi	r5,r4,1
1000ac10:	003ef406 	br	1000a7e4 <__alt_data_end+0xf800a7e4>
1000ac14:	1000bd1e 	bne	r2,zero,1000af0c <___vfiprintf_internal_r+0x1328>
1000ac18:	01400044 	movi	r5,1
1000ac1c:	0009883a 	mov	r4,zero
1000ac20:	d811883a 	mov	r8,sp
1000ac24:	003ef106 	br	1000a7ec <__alt_data_end+0xf800a7ec>
1000ac28:	d9402017 	ldw	r5,128(sp)
1000ac2c:	d9002117 	ldw	r4,132(sp)
1000ac30:	d9801a04 	addi	r6,sp,104
1000ac34:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000ac38:	103f221e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000ac3c:	d9401b17 	ldw	r5,108(sp)
1000ac40:	d8801c17 	ldw	r2,112(sp)
1000ac44:	d811883a 	mov	r8,sp
1000ac48:	29400044 	addi	r5,r5,1
1000ac4c:	003d6206 	br	1000a1d8 <__alt_data_end+0xf800a1d8>
1000ac50:	01440074 	movhi	r5,4097
1000ac54:	29486504 	addi	r5,r5,8596
1000ac58:	d9402615 	stw	r5,152(sp)
1000ac5c:	d8c02215 	stw	r3,136(sp)
1000ac60:	1023883a 	mov	r17,r2
1000ac64:	9d04b03a 	or	r2,r19,r20
1000ac68:	103fa51e 	bne	r2,zero,1000ab00 <__alt_data_end+0xf800ab00>
1000ac6c:	002b883a 	mov	r21,zero
1000ac70:	00800084 	movi	r2,2
1000ac74:	003e4a06 	br	1000a5a0 <__alt_data_end+0xf800a5a0>
1000ac78:	01440074 	movhi	r5,4097
1000ac7c:	29486504 	addi	r5,r5,8596
1000ac80:	002b883a 	mov	r21,zero
1000ac84:	d9402615 	stw	r5,152(sp)
1000ac88:	003f9e06 	br	1000ab04 <__alt_data_end+0xf800ab04>
1000ac8c:	d9402217 	ldw	r5,136(sp)
1000ac90:	d8001d85 	stb	zero,118(sp)
1000ac94:	0029883a 	mov	r20,zero
1000ac98:	28800104 	addi	r2,r5,4
1000ac9c:	2cc00017 	ldw	r19,0(r5)
1000aca0:	803e3a16 	blt	r16,zero,1000a58c <__alt_data_end+0xf800a58c>
1000aca4:	00ffdfc4 	movi	r3,-129
1000aca8:	d8802215 	stw	r2,136(sp)
1000acac:	88e2703a 	and	r17,r17,r3
1000acb0:	002b883a 	mov	r21,zero
1000acb4:	983e9b26 	beq	r19,zero,1000a724 <__alt_data_end+0xf800a724>
1000acb8:	00800244 	movi	r2,9
1000acbc:	14fdc936 	bltu	r2,r19,1000a3e4 <__alt_data_end+0xf800a3e4>
1000acc0:	003e9a06 	br	1000a72c <__alt_data_end+0xf800a72c>
1000acc4:	00800c04 	movi	r2,48
1000acc8:	d8c01d45 	stb	r3,117(sp)
1000accc:	d8801d05 	stb	r2,116(sp)
1000acd0:	d8001d85 	stb	zero,118(sp)
1000acd4:	88c00094 	ori	r3,r17,2
1000acd8:	80009c16 	blt	r16,zero,1000af4c <___vfiprintf_internal_r+0x1368>
1000acdc:	00bfdfc4 	movi	r2,-129
1000ace0:	88a2703a 	and	r17,r17,r2
1000ace4:	8c400094 	ori	r17,r17,2
1000ace8:	002b883a 	mov	r21,zero
1000acec:	003f8506 	br	1000ab04 <__alt_data_end+0xf800ab04>
1000acf0:	b029883a 	mov	r20,r22
1000acf4:	003c0b06 	br	10009d24 <__alt_data_end+0xf8009d24>
1000acf8:	04e7c83a 	sub	r19,zero,r19
1000acfc:	05400b44 	movi	r21,45
1000ad00:	9804c03a 	cmpne	r2,r19,zero
1000ad04:	0529c83a 	sub	r20,zero,r20
1000ad08:	dd401d85 	stb	r21,118(sp)
1000ad0c:	a0a9c83a 	sub	r20,r20,r2
1000ad10:	80009716 	blt	r16,zero,1000af70 <___vfiprintf_internal_r+0x138c>
1000ad14:	00bfdfc4 	movi	r2,-129
1000ad18:	88a2703a 	and	r17,r17,r2
1000ad1c:	003db006 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000ad20:	b0c00007 	ldb	r3,0(r22)
1000ad24:	003c0c06 	br	10009d58 <__alt_data_end+0xf8009d58>
1000ad28:	8880100c 	andi	r2,r17,64
1000ad2c:	d8001d85 	stb	zero,118(sp)
1000ad30:	1000461e 	bne	r2,zero,1000ae4c <___vfiprintf_internal_r+0x1268>
1000ad34:	d9002217 	ldw	r4,136(sp)
1000ad38:	0029883a 	mov	r20,zero
1000ad3c:	20800104 	addi	r2,r4,4
1000ad40:	24c00017 	ldw	r19,0(r4)
1000ad44:	803df80e 	bge	r16,zero,1000a528 <__alt_data_end+0xf800a528>
1000ad48:	9d06b03a 	or	r3,r19,r20
1000ad4c:	d8802215 	stw	r2,136(sp)
1000ad50:	183d5e1e 	bne	r3,zero,1000a2cc <__alt_data_end+0xf800a2cc>
1000ad54:	002b883a 	mov	r21,zero
1000ad58:	0005883a 	mov	r2,zero
1000ad5c:	003e1006 	br	1000a5a0 <__alt_data_end+0xf800a5a0>
1000ad60:	8880040c 	andi	r2,r17,16
1000ad64:	1000321e 	bne	r2,zero,1000ae30 <___vfiprintf_internal_r+0x124c>
1000ad68:	8c40100c 	andi	r17,r17,64
1000ad6c:	88008d26 	beq	r17,zero,1000afa4 <___vfiprintf_internal_r+0x13c0>
1000ad70:	d9402217 	ldw	r5,136(sp)
1000ad74:	d8c02417 	ldw	r3,144(sp)
1000ad78:	28800017 	ldw	r2,0(r5)
1000ad7c:	29400104 	addi	r5,r5,4
1000ad80:	d9402215 	stw	r5,136(sp)
1000ad84:	10c0000d 	sth	r3,0(r2)
1000ad88:	003bca06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000ad8c:	8880100c 	andi	r2,r17,64
1000ad90:	10003a26 	beq	r2,zero,1000ae7c <___vfiprintf_internal_r+0x1298>
1000ad94:	d8802217 	ldw	r2,136(sp)
1000ad98:	14c0000f 	ldh	r19,0(r2)
1000ad9c:	10800104 	addi	r2,r2,4
1000ada0:	d8802215 	stw	r2,136(sp)
1000ada4:	9829d7fa 	srai	r20,r19,31
1000ada8:	a005883a 	mov	r2,r20
1000adac:	003d8506 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000adb0:	8880100c 	andi	r2,r17,64
1000adb4:	10002b26 	beq	r2,zero,1000ae64 <___vfiprintf_internal_r+0x1280>
1000adb8:	d8802217 	ldw	r2,136(sp)
1000adbc:	0029883a 	mov	r20,zero
1000adc0:	14c0000b 	ldhu	r19,0(r2)
1000adc4:	10800104 	addi	r2,r2,4
1000adc8:	d8802215 	stw	r2,136(sp)
1000adcc:	003d5d06 	br	1000a344 <__alt_data_end+0xf800a344>
1000add0:	d9402017 	ldw	r5,128(sp)
1000add4:	d9002117 	ldw	r4,132(sp)
1000add8:	d9801a04 	addi	r6,sp,104
1000addc:	d8c02a15 	stw	r3,168(sp)
1000ade0:	d9c02b15 	stw	r7,172(sp)
1000ade4:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000ade8:	d8c02a17 	ldw	r3,168(sp)
1000adec:	d9c02b17 	ldw	r7,172(sp)
1000adf0:	103eb41e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000adf4:	d9001b17 	ldw	r4,108(sp)
1000adf8:	d8801c17 	ldw	r2,112(sp)
1000adfc:	d811883a 	mov	r8,sp
1000ae00:	21400044 	addi	r5,r4,1
1000ae04:	003e6706 	br	1000a7a4 <__alt_data_end+0xf800a7a4>
1000ae08:	00bfffc4 	movi	r2,-1
1000ae0c:	003c4a06 	br	10009f38 <__alt_data_end+0xf8009f38>
1000ae10:	9805883a 	mov	r2,r19
1000ae14:	003ee806 	br	1000a9b8 <__alt_data_end+0xf800a9b8>
1000ae18:	d8c02217 	ldw	r3,136(sp)
1000ae1c:	0029883a 	mov	r20,zero
1000ae20:	18800104 	addi	r2,r3,4
1000ae24:	1cc0000b 	ldhu	r19,0(r3)
1000ae28:	803f9e0e 	bge	r16,zero,1000aca4 <__alt_data_end+0xf800aca4>
1000ae2c:	003dd706 	br	1000a58c <__alt_data_end+0xf800a58c>
1000ae30:	d8c02217 	ldw	r3,136(sp)
1000ae34:	d9002417 	ldw	r4,144(sp)
1000ae38:	18800017 	ldw	r2,0(r3)
1000ae3c:	18c00104 	addi	r3,r3,4
1000ae40:	d8c02215 	stw	r3,136(sp)
1000ae44:	11000015 	stw	r4,0(r2)
1000ae48:	003b9a06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000ae4c:	d8c02217 	ldw	r3,136(sp)
1000ae50:	0029883a 	mov	r20,zero
1000ae54:	18800104 	addi	r2,r3,4
1000ae58:	1cc0000b 	ldhu	r19,0(r3)
1000ae5c:	803db20e 	bge	r16,zero,1000a528 <__alt_data_end+0xf800a528>
1000ae60:	003fb906 	br	1000ad48 <__alt_data_end+0xf800ad48>
1000ae64:	d9002217 	ldw	r4,136(sp)
1000ae68:	0029883a 	mov	r20,zero
1000ae6c:	24c00017 	ldw	r19,0(r4)
1000ae70:	21000104 	addi	r4,r4,4
1000ae74:	d9002215 	stw	r4,136(sp)
1000ae78:	003d3206 	br	1000a344 <__alt_data_end+0xf800a344>
1000ae7c:	d8c02217 	ldw	r3,136(sp)
1000ae80:	1cc00017 	ldw	r19,0(r3)
1000ae84:	18c00104 	addi	r3,r3,4
1000ae88:	d8c02215 	stw	r3,136(sp)
1000ae8c:	9829d7fa 	srai	r20,r19,31
1000ae90:	a005883a 	mov	r2,r20
1000ae94:	003d4b06 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000ae98:	0009883a 	mov	r4,zero
1000ae9c:	01400044 	movi	r5,1
1000aea0:	d811883a 	mov	r8,sp
1000aea4:	003e4f06 	br	1000a7e4 <__alt_data_end+0xf800a7e4>
1000aea8:	d8c02215 	stw	r3,136(sp)
1000aeac:	002b883a 	mov	r21,zero
1000aeb0:	003db806 	br	1000a594 <__alt_data_end+0xf800a594>
1000aeb4:	d811883a 	mov	r8,sp
1000aeb8:	003e9606 	br	1000a914 <__alt_data_end+0xf800a914>
1000aebc:	01040074 	movhi	r4,4097
1000aec0:	2108c604 	addi	r4,r4,8984
1000aec4:	d9002315 	stw	r4,140(sp)
1000aec8:	003e6306 	br	1000a858 <__alt_data_end+0xf800a858>
1000aecc:	b0c00043 	ldbu	r3,1(r22)
1000aed0:	8c400814 	ori	r17,r17,32
1000aed4:	b5800044 	addi	r22,r22,1
1000aed8:	18c03fcc 	andi	r3,r3,255
1000aedc:	18c0201c 	xori	r3,r3,128
1000aee0:	18ffe004 	addi	r3,r3,-128
1000aee4:	003b9c06 	br	10009d58 <__alt_data_end+0xf8009d58>
1000aee8:	b809883a 	mov	r4,r23
1000aeec:	da002a15 	stw	r8,168(sp)
1000aef0:	00023540 	call	10002354 <strlen>
1000aef4:	1029883a 	mov	r20,r2
1000aef8:	dd401d83 	ldbu	r21,118(sp)
1000aefc:	df002215 	stw	fp,136(sp)
1000af00:	0021883a 	mov	r16,zero
1000af04:	da002a17 	ldw	r8,168(sp)
1000af08:	003c3906 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000af0c:	d9402017 	ldw	r5,128(sp)
1000af10:	d9002117 	ldw	r4,132(sp)
1000af14:	d9801a04 	addi	r6,sp,104
1000af18:	0009ad00 	call	10009ad0 <__sprint_r.part.0>
1000af1c:	103e691e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
1000af20:	d9001b17 	ldw	r4,108(sp)
1000af24:	d8801c17 	ldw	r2,112(sp)
1000af28:	d811883a 	mov	r8,sp
1000af2c:	21400044 	addi	r5,r4,1
1000af30:	003e2e06 	br	1000a7ec <__alt_data_end+0xf800a7ec>
1000af34:	01040074 	movhi	r4,4097
1000af38:	2108ca04 	addi	r4,r4,9000
1000af3c:	d9002315 	stw	r4,140(sp)
1000af40:	d9001b17 	ldw	r4,108(sp)
1000af44:	21000044 	addi	r4,r4,1
1000af48:	003c5e06 	br	1000a0c4 <__alt_data_end+0xf800a0c4>
1000af4c:	002b883a 	mov	r21,zero
1000af50:	00800084 	movi	r2,2
1000af54:	10803fcc 	andi	r2,r2,255
1000af58:	01000044 	movi	r4,1
1000af5c:	11002b26 	beq	r2,r4,1000b00c <___vfiprintf_internal_r+0x1428>
1000af60:	01000084 	movi	r4,2
1000af64:	11002b1e 	bne	r2,r4,1000b014 <___vfiprintf_internal_r+0x1430>
1000af68:	1823883a 	mov	r17,r3
1000af6c:	003ee506 	br	1000ab04 <__alt_data_end+0xf800ab04>
1000af70:	8807883a 	mov	r3,r17
1000af74:	00800044 	movi	r2,1
1000af78:	003ff606 	br	1000af54 <__alt_data_end+0xf800af54>
1000af7c:	00800184 	movi	r2,6
1000af80:	1400012e 	bgeu	r2,r16,1000af88 <___vfiprintf_internal_r+0x13a4>
1000af84:	1021883a 	mov	r16,r2
1000af88:	8029883a 	mov	r20,r16
1000af8c:	8027883a 	mov	r19,r16
1000af90:	80002216 	blt	r16,zero,1000b01c <___vfiprintf_internal_r+0x1438>
1000af94:	05c40074 	movhi	r23,4097
1000af98:	df002215 	stw	fp,136(sp)
1000af9c:	bdc86a04 	addi	r23,r23,8616
1000afa0:	003cfb06 	br	1000a390 <__alt_data_end+0xf800a390>
1000afa4:	d9002217 	ldw	r4,136(sp)
1000afa8:	d9402417 	ldw	r5,144(sp)
1000afac:	20800017 	ldw	r2,0(r4)
1000afb0:	21000104 	addi	r4,r4,4
1000afb4:	d9002215 	stw	r4,136(sp)
1000afb8:	11400015 	stw	r5,0(r2)
1000afbc:	003b3d06 	br	10009cb4 <__alt_data_end+0xf8009cb4>
1000afc0:	01440074 	movhi	r5,4097
1000afc4:	2948ca04 	addi	r5,r5,9000
1000afc8:	d9402315 	stw	r5,140(sp)
1000afcc:	d9401b17 	ldw	r5,108(sp)
1000afd0:	29400044 	addi	r5,r5,1
1000afd4:	003e6d06 	br	1000a98c <__alt_data_end+0xf800a98c>
1000afd8:	8029883a 	mov	r20,r16
1000afdc:	dd401d83 	ldbu	r21,118(sp)
1000afe0:	df002215 	stw	fp,136(sp)
1000afe4:	0021883a 	mov	r16,zero
1000afe8:	003c0106 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000afec:	00c40074 	movhi	r3,4097
1000aff0:	18c8c604 	addi	r3,r3,8984
1000aff4:	d8c02315 	stw	r3,140(sp)
1000aff8:	280d883a 	mov	r6,r5
1000affc:	003c6906 	br	1000a1a4 <__alt_data_end+0xf800a1a4>
1000b000:	802d883a 	mov	r22,r16
1000b004:	0021883a 	mov	r16,zero
1000b008:	003b5406 	br	10009d5c <__alt_data_end+0xf8009d5c>
1000b00c:	1823883a 	mov	r17,r3
1000b010:	003cf306 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000b014:	1823883a 	mov	r17,r3
1000b018:	003cad06 	br	1000a2d0 <__alt_data_end+0xf800a2d0>
1000b01c:	0027883a 	mov	r19,zero
1000b020:	003fdc06 	br	1000af94 <__alt_data_end+0xf800af94>
1000b024:	d9402217 	ldw	r5,136(sp)
1000b028:	8005883a 	mov	r2,r16
1000b02c:	b0c00043 	ldbu	r3,1(r22)
1000b030:	2c000017 	ldw	r16,0(r5)
1000b034:	29000104 	addi	r4,r5,4
1000b038:	d9002215 	stw	r4,136(sp)
1000b03c:	102d883a 	mov	r22,r2
1000b040:	803fa50e 	bge	r16,zero,1000aed8 <__alt_data_end+0xf800aed8>
1000b044:	18c03fcc 	andi	r3,r3,255
1000b048:	18c0201c 	xori	r3,r3,128
1000b04c:	043fffc4 	movi	r16,-1
1000b050:	18ffe004 	addi	r3,r3,-128
1000b054:	003b4006 	br	10009d58 <__alt_data_end+0xf8009d58>
1000b058:	d9402303 	ldbu	r5,140(sp)
1000b05c:	d9401d85 	stb	r5,118(sp)
1000b060:	003cae06 	br	1000a31c <__alt_data_end+0xf800a31c>
1000b064:	d8c02303 	ldbu	r3,140(sp)
1000b068:	d8c01d85 	stb	r3,118(sp)
1000b06c:	003d1406 	br	1000a4c0 <__alt_data_end+0xf800a4c0>
1000b070:	d8c02303 	ldbu	r3,140(sp)
1000b074:	d8c01d85 	stb	r3,118(sp)
1000b078:	003cca06 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000b07c:	8880004c 	andi	r2,r17,1
1000b080:	002b883a 	mov	r21,zero
1000b084:	10000526 	beq	r2,zero,1000b09c <___vfiprintf_internal_r+0x14b8>
1000b088:	00800c04 	movi	r2,48
1000b08c:	d88019c5 	stb	r2,103(sp)
1000b090:	dd002817 	ldw	r20,160(sp)
1000b094:	ddc019c4 	addi	r23,sp,103
1000b098:	003bd506 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000b09c:	0029883a 	mov	r20,zero
1000b0a0:	ddc01a04 	addi	r23,sp,104
1000b0a4:	003bd206 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000b0a8:	d9002303 	ldbu	r4,140(sp)
1000b0ac:	d9001d85 	stb	r4,118(sp)
1000b0b0:	003da606 	br	1000a74c <__alt_data_end+0xf800a74c>
1000b0b4:	d8c02303 	ldbu	r3,140(sp)
1000b0b8:	d8c01d85 	stb	r3,118(sp)
1000b0bc:	003c7606 	br	1000a298 <__alt_data_end+0xf800a298>
1000b0c0:	d8c02303 	ldbu	r3,140(sp)
1000b0c4:	d8c01d85 	stb	r3,118(sp)
1000b0c8:	003c6506 	br	1000a260 <__alt_data_end+0xf800a260>
1000b0cc:	d9002303 	ldbu	r4,140(sp)
1000b0d0:	d9001d85 	stb	r4,118(sp)
1000b0d4:	003d3d06 	br	1000a5cc <__alt_data_end+0xf800a5cc>
1000b0d8:	d8c02303 	ldbu	r3,140(sp)
1000b0dc:	d8c01d85 	stb	r3,118(sp)
1000b0e0:	003d1d06 	br	1000a558 <__alt_data_end+0xf800a558>
1000b0e4:	d8c02303 	ldbu	r3,140(sp)
1000b0e8:	d8c01d85 	stb	r3,118(sp)
1000b0ec:	003d0306 	br	1000a4fc <__alt_data_end+0xf800a4fc>

1000b0f0 <__vfiprintf_internal>:
1000b0f0:	00840074 	movhi	r2,4097
1000b0f4:	108fc704 	addi	r2,r2,16156
1000b0f8:	300f883a 	mov	r7,r6
1000b0fc:	280d883a 	mov	r6,r5
1000b100:	200b883a 	mov	r5,r4
1000b104:	11000017 	ldw	r4,0(r2)
1000b108:	0009be41 	jmpi	10009be4 <___vfiprintf_internal_r>

1000b10c <__sbprintf>:
1000b10c:	2880030b 	ldhu	r2,12(r5)
1000b110:	2ac01917 	ldw	r11,100(r5)
1000b114:	2a80038b 	ldhu	r10,14(r5)
1000b118:	2a400717 	ldw	r9,28(r5)
1000b11c:	2a000917 	ldw	r8,36(r5)
1000b120:	defee204 	addi	sp,sp,-1144
1000b124:	00c10004 	movi	r3,1024
1000b128:	dc011a15 	stw	r16,1128(sp)
1000b12c:	10bfff4c 	andi	r2,r2,65533
1000b130:	2821883a 	mov	r16,r5
1000b134:	d8cb883a 	add	r5,sp,r3
1000b138:	dc811c15 	stw	r18,1136(sp)
1000b13c:	dc411b15 	stw	r17,1132(sp)
1000b140:	dfc11d15 	stw	ra,1140(sp)
1000b144:	2025883a 	mov	r18,r4
1000b148:	d881030d 	sth	r2,1036(sp)
1000b14c:	dac11915 	stw	r11,1124(sp)
1000b150:	da81038d 	sth	r10,1038(sp)
1000b154:	da410715 	stw	r9,1052(sp)
1000b158:	da010915 	stw	r8,1060(sp)
1000b15c:	dec10015 	stw	sp,1024(sp)
1000b160:	dec10415 	stw	sp,1040(sp)
1000b164:	d8c10215 	stw	r3,1032(sp)
1000b168:	d8c10515 	stw	r3,1044(sp)
1000b16c:	d8010615 	stw	zero,1048(sp)
1000b170:	0009be40 	call	10009be4 <___vfiprintf_internal_r>
1000b174:	1023883a 	mov	r17,r2
1000b178:	10000416 	blt	r2,zero,1000b18c <__sbprintf+0x80>
1000b17c:	d9410004 	addi	r5,sp,1024
1000b180:	9009883a 	mov	r4,r18
1000b184:	00063c00 	call	100063c0 <_fflush_r>
1000b188:	10000d1e 	bne	r2,zero,1000b1c0 <__sbprintf+0xb4>
1000b18c:	d881030b 	ldhu	r2,1036(sp)
1000b190:	1080100c 	andi	r2,r2,64
1000b194:	10000326 	beq	r2,zero,1000b1a4 <__sbprintf+0x98>
1000b198:	8080030b 	ldhu	r2,12(r16)
1000b19c:	10801014 	ori	r2,r2,64
1000b1a0:	8080030d 	sth	r2,12(r16)
1000b1a4:	8805883a 	mov	r2,r17
1000b1a8:	dfc11d17 	ldw	ra,1140(sp)
1000b1ac:	dc811c17 	ldw	r18,1136(sp)
1000b1b0:	dc411b17 	ldw	r17,1132(sp)
1000b1b4:	dc011a17 	ldw	r16,1128(sp)
1000b1b8:	dec11e04 	addi	sp,sp,1144
1000b1bc:	f800283a 	ret
1000b1c0:	047fffc4 	movi	r17,-1
1000b1c4:	003ff106 	br	1000b18c <__alt_data_end+0xf800b18c>

1000b1c8 <_write_r>:
1000b1c8:	defffd04 	addi	sp,sp,-12
1000b1cc:	2805883a 	mov	r2,r5
1000b1d0:	dc000015 	stw	r16,0(sp)
1000b1d4:	04040074 	movhi	r16,4097
1000b1d8:	dc400115 	stw	r17,4(sp)
1000b1dc:	300b883a 	mov	r5,r6
1000b1e0:	84169804 	addi	r16,r16,23136
1000b1e4:	2023883a 	mov	r17,r4
1000b1e8:	380d883a 	mov	r6,r7
1000b1ec:	1009883a 	mov	r4,r2
1000b1f0:	dfc00215 	stw	ra,8(sp)
1000b1f4:	80000015 	stw	zero,0(r16)
1000b1f8:	000fa8c0 	call	1000fa8c <write>
1000b1fc:	00ffffc4 	movi	r3,-1
1000b200:	10c00526 	beq	r2,r3,1000b218 <_write_r+0x50>
1000b204:	dfc00217 	ldw	ra,8(sp)
1000b208:	dc400117 	ldw	r17,4(sp)
1000b20c:	dc000017 	ldw	r16,0(sp)
1000b210:	dec00304 	addi	sp,sp,12
1000b214:	f800283a 	ret
1000b218:	80c00017 	ldw	r3,0(r16)
1000b21c:	183ff926 	beq	r3,zero,1000b204 <__alt_data_end+0xf800b204>
1000b220:	88c00015 	stw	r3,0(r17)
1000b224:	003ff706 	br	1000b204 <__alt_data_end+0xf800b204>

1000b228 <_close_r>:
1000b228:	defffd04 	addi	sp,sp,-12
1000b22c:	dc000015 	stw	r16,0(sp)
1000b230:	04040074 	movhi	r16,4097
1000b234:	dc400115 	stw	r17,4(sp)
1000b238:	84169804 	addi	r16,r16,23136
1000b23c:	2023883a 	mov	r17,r4
1000b240:	2809883a 	mov	r4,r5
1000b244:	dfc00215 	stw	ra,8(sp)
1000b248:	80000015 	stw	zero,0(r16)
1000b24c:	000f1a00 	call	1000f1a0 <close>
1000b250:	00ffffc4 	movi	r3,-1
1000b254:	10c00526 	beq	r2,r3,1000b26c <_close_r+0x44>
1000b258:	dfc00217 	ldw	ra,8(sp)
1000b25c:	dc400117 	ldw	r17,4(sp)
1000b260:	dc000017 	ldw	r16,0(sp)
1000b264:	dec00304 	addi	sp,sp,12
1000b268:	f800283a 	ret
1000b26c:	80c00017 	ldw	r3,0(r16)
1000b270:	183ff926 	beq	r3,zero,1000b258 <__alt_data_end+0xf800b258>
1000b274:	88c00015 	stw	r3,0(r17)
1000b278:	003ff706 	br	1000b258 <__alt_data_end+0xf800b258>

1000b27c <_calloc_r>:
1000b27c:	defffe04 	addi	sp,sp,-8
1000b280:	2805883a 	mov	r2,r5
1000b284:	dc000015 	stw	r16,0(sp)
1000b288:	300b883a 	mov	r5,r6
1000b28c:	2021883a 	mov	r16,r4
1000b290:	1009883a 	mov	r4,r2
1000b294:	dfc00115 	stw	ra,4(sp)
1000b298:	000c8880 	call	1000c888 <__mulsi3>
1000b29c:	100b883a 	mov	r5,r2
1000b2a0:	8009883a 	mov	r4,r16
1000b2a4:	00075180 	call	10007518 <_malloc_r>
1000b2a8:	10002926 	beq	r2,zero,1000b350 <_calloc_r+0xd4>
1000b2ac:	11bfff17 	ldw	r6,-4(r2)
1000b2b0:	1021883a 	mov	r16,r2
1000b2b4:	00bfff04 	movi	r2,-4
1000b2b8:	308c703a 	and	r6,r6,r2
1000b2bc:	00c00904 	movi	r3,36
1000b2c0:	308d883a 	add	r6,r6,r2
1000b2c4:	19801636 	bltu	r3,r6,1000b320 <_calloc_r+0xa4>
1000b2c8:	008004c4 	movi	r2,19
1000b2cc:	11800b2e 	bgeu	r2,r6,1000b2fc <_calloc_r+0x80>
1000b2d0:	80000015 	stw	zero,0(r16)
1000b2d4:	80000115 	stw	zero,4(r16)
1000b2d8:	008006c4 	movi	r2,27
1000b2dc:	11801a2e 	bgeu	r2,r6,1000b348 <_calloc_r+0xcc>
1000b2e0:	80000215 	stw	zero,8(r16)
1000b2e4:	80000315 	stw	zero,12(r16)
1000b2e8:	30c0151e 	bne	r6,r3,1000b340 <_calloc_r+0xc4>
1000b2ec:	80000415 	stw	zero,16(r16)
1000b2f0:	80800604 	addi	r2,r16,24
1000b2f4:	80000515 	stw	zero,20(r16)
1000b2f8:	00000106 	br	1000b300 <_calloc_r+0x84>
1000b2fc:	8005883a 	mov	r2,r16
1000b300:	10000015 	stw	zero,0(r2)
1000b304:	10000115 	stw	zero,4(r2)
1000b308:	10000215 	stw	zero,8(r2)
1000b30c:	8005883a 	mov	r2,r16
1000b310:	dfc00117 	ldw	ra,4(sp)
1000b314:	dc000017 	ldw	r16,0(sp)
1000b318:	dec00204 	addi	sp,sp,8
1000b31c:	f800283a 	ret
1000b320:	000b883a 	mov	r5,zero
1000b324:	8009883a 	mov	r4,r16
1000b328:	00080ac0 	call	100080ac <memset>
1000b32c:	8005883a 	mov	r2,r16
1000b330:	dfc00117 	ldw	ra,4(sp)
1000b334:	dc000017 	ldw	r16,0(sp)
1000b338:	dec00204 	addi	sp,sp,8
1000b33c:	f800283a 	ret
1000b340:	80800404 	addi	r2,r16,16
1000b344:	003fee06 	br	1000b300 <__alt_data_end+0xf800b300>
1000b348:	80800204 	addi	r2,r16,8
1000b34c:	003fec06 	br	1000b300 <__alt_data_end+0xf800b300>
1000b350:	0005883a 	mov	r2,zero
1000b354:	003fee06 	br	1000b310 <__alt_data_end+0xf800b310>

1000b358 <_fclose_r>:
1000b358:	28003926 	beq	r5,zero,1000b440 <_fclose_r+0xe8>
1000b35c:	defffc04 	addi	sp,sp,-16
1000b360:	dc400115 	stw	r17,4(sp)
1000b364:	dc000015 	stw	r16,0(sp)
1000b368:	dfc00315 	stw	ra,12(sp)
1000b36c:	dc800215 	stw	r18,8(sp)
1000b370:	2023883a 	mov	r17,r4
1000b374:	2821883a 	mov	r16,r5
1000b378:	20000226 	beq	r4,zero,1000b384 <_fclose_r+0x2c>
1000b37c:	20800e17 	ldw	r2,56(r4)
1000b380:	10002726 	beq	r2,zero,1000b420 <_fclose_r+0xc8>
1000b384:	8080030f 	ldh	r2,12(r16)
1000b388:	1000071e 	bne	r2,zero,1000b3a8 <_fclose_r+0x50>
1000b38c:	0005883a 	mov	r2,zero
1000b390:	dfc00317 	ldw	ra,12(sp)
1000b394:	dc800217 	ldw	r18,8(sp)
1000b398:	dc400117 	ldw	r17,4(sp)
1000b39c:	dc000017 	ldw	r16,0(sp)
1000b3a0:	dec00404 	addi	sp,sp,16
1000b3a4:	f800283a 	ret
1000b3a8:	800b883a 	mov	r5,r16
1000b3ac:	8809883a 	mov	r4,r17
1000b3b0:	00061a40 	call	100061a4 <__sflush_r>
1000b3b4:	1025883a 	mov	r18,r2
1000b3b8:	80800b17 	ldw	r2,44(r16)
1000b3bc:	10000426 	beq	r2,zero,1000b3d0 <_fclose_r+0x78>
1000b3c0:	81400717 	ldw	r5,28(r16)
1000b3c4:	8809883a 	mov	r4,r17
1000b3c8:	103ee83a 	callr	r2
1000b3cc:	10001616 	blt	r2,zero,1000b428 <_fclose_r+0xd0>
1000b3d0:	8080030b 	ldhu	r2,12(r16)
1000b3d4:	1080200c 	andi	r2,r2,128
1000b3d8:	1000151e 	bne	r2,zero,1000b430 <_fclose_r+0xd8>
1000b3dc:	81400c17 	ldw	r5,48(r16)
1000b3e0:	28000526 	beq	r5,zero,1000b3f8 <_fclose_r+0xa0>
1000b3e4:	80801004 	addi	r2,r16,64
1000b3e8:	28800226 	beq	r5,r2,1000b3f4 <_fclose_r+0x9c>
1000b3ec:	8809883a 	mov	r4,r17
1000b3f0:	00069200 	call	10006920 <_free_r>
1000b3f4:	80000c15 	stw	zero,48(r16)
1000b3f8:	81401117 	ldw	r5,68(r16)
1000b3fc:	28000326 	beq	r5,zero,1000b40c <_fclose_r+0xb4>
1000b400:	8809883a 	mov	r4,r17
1000b404:	00069200 	call	10006920 <_free_r>
1000b408:	80001115 	stw	zero,68(r16)
1000b40c:	00067bc0 	call	100067bc <__sfp_lock_acquire>
1000b410:	8000030d 	sth	zero,12(r16)
1000b414:	00067c00 	call	100067c0 <__sfp_lock_release>
1000b418:	9005883a 	mov	r2,r18
1000b41c:	003fdc06 	br	1000b390 <__alt_data_end+0xf800b390>
1000b420:	00067ac0 	call	100067ac <__sinit>
1000b424:	003fd706 	br	1000b384 <__alt_data_end+0xf800b384>
1000b428:	04bfffc4 	movi	r18,-1
1000b42c:	003fe806 	br	1000b3d0 <__alt_data_end+0xf800b3d0>
1000b430:	81400417 	ldw	r5,16(r16)
1000b434:	8809883a 	mov	r4,r17
1000b438:	00069200 	call	10006920 <_free_r>
1000b43c:	003fe706 	br	1000b3dc <__alt_data_end+0xf800b3dc>
1000b440:	0005883a 	mov	r2,zero
1000b444:	f800283a 	ret

1000b448 <fclose>:
1000b448:	00840074 	movhi	r2,4097
1000b44c:	108fc704 	addi	r2,r2,16156
1000b450:	200b883a 	mov	r5,r4
1000b454:	11000017 	ldw	r4,0(r2)
1000b458:	000b3581 	jmpi	1000b358 <_fclose_r>

1000b45c <__fputwc>:
1000b45c:	defff804 	addi	sp,sp,-32
1000b460:	dcc00415 	stw	r19,16(sp)
1000b464:	dc800315 	stw	r18,12(sp)
1000b468:	dc000115 	stw	r16,4(sp)
1000b46c:	dfc00715 	stw	ra,28(sp)
1000b470:	dd400615 	stw	r21,24(sp)
1000b474:	dd000515 	stw	r20,20(sp)
1000b478:	dc400215 	stw	r17,8(sp)
1000b47c:	2027883a 	mov	r19,r4
1000b480:	2825883a 	mov	r18,r5
1000b484:	3021883a 	mov	r16,r6
1000b488:	00073080 	call	10007308 <__locale_mb_cur_max>
1000b48c:	00c00044 	movi	r3,1
1000b490:	10c03e26 	beq	r2,r3,1000b58c <__fputwc+0x130>
1000b494:	81c01704 	addi	r7,r16,92
1000b498:	900d883a 	mov	r6,r18
1000b49c:	d80b883a 	mov	r5,sp
1000b4a0:	9809883a 	mov	r4,r19
1000b4a4:	000b92c0 	call	1000b92c <_wcrtomb_r>
1000b4a8:	1029883a 	mov	r20,r2
1000b4ac:	00bfffc4 	movi	r2,-1
1000b4b0:	a0802026 	beq	r20,r2,1000b534 <__fputwc+0xd8>
1000b4b4:	d9400003 	ldbu	r5,0(sp)
1000b4b8:	a0001c26 	beq	r20,zero,1000b52c <__fputwc+0xd0>
1000b4bc:	0023883a 	mov	r17,zero
1000b4c0:	05400284 	movi	r21,10
1000b4c4:	00000906 	br	1000b4ec <__fputwc+0x90>
1000b4c8:	80800017 	ldw	r2,0(r16)
1000b4cc:	11400005 	stb	r5,0(r2)
1000b4d0:	80c00017 	ldw	r3,0(r16)
1000b4d4:	18c00044 	addi	r3,r3,1
1000b4d8:	80c00015 	stw	r3,0(r16)
1000b4dc:	8c400044 	addi	r17,r17,1
1000b4e0:	dc45883a 	add	r2,sp,r17
1000b4e4:	8d00112e 	bgeu	r17,r20,1000b52c <__fputwc+0xd0>
1000b4e8:	11400003 	ldbu	r5,0(r2)
1000b4ec:	80c00217 	ldw	r3,8(r16)
1000b4f0:	18ffffc4 	addi	r3,r3,-1
1000b4f4:	80c00215 	stw	r3,8(r16)
1000b4f8:	183ff30e 	bge	r3,zero,1000b4c8 <__alt_data_end+0xf800b4c8>
1000b4fc:	80800617 	ldw	r2,24(r16)
1000b500:	18801916 	blt	r3,r2,1000b568 <__fputwc+0x10c>
1000b504:	80800017 	ldw	r2,0(r16)
1000b508:	11400005 	stb	r5,0(r2)
1000b50c:	80800017 	ldw	r2,0(r16)
1000b510:	10c00003 	ldbu	r3,0(r2)
1000b514:	10800044 	addi	r2,r2,1
1000b518:	1d402326 	beq	r3,r21,1000b5a8 <__fputwc+0x14c>
1000b51c:	80800015 	stw	r2,0(r16)
1000b520:	8c400044 	addi	r17,r17,1
1000b524:	dc45883a 	add	r2,sp,r17
1000b528:	8d3fef36 	bltu	r17,r20,1000b4e8 <__alt_data_end+0xf800b4e8>
1000b52c:	9005883a 	mov	r2,r18
1000b530:	00000406 	br	1000b544 <__fputwc+0xe8>
1000b534:	80c0030b 	ldhu	r3,12(r16)
1000b538:	a005883a 	mov	r2,r20
1000b53c:	18c01014 	ori	r3,r3,64
1000b540:	80c0030d 	sth	r3,12(r16)
1000b544:	dfc00717 	ldw	ra,28(sp)
1000b548:	dd400617 	ldw	r21,24(sp)
1000b54c:	dd000517 	ldw	r20,20(sp)
1000b550:	dcc00417 	ldw	r19,16(sp)
1000b554:	dc800317 	ldw	r18,12(sp)
1000b558:	dc400217 	ldw	r17,8(sp)
1000b55c:	dc000117 	ldw	r16,4(sp)
1000b560:	dec00804 	addi	sp,sp,32
1000b564:	f800283a 	ret
1000b568:	800d883a 	mov	r6,r16
1000b56c:	29403fcc 	andi	r5,r5,255
1000b570:	9809883a 	mov	r4,r19
1000b574:	000b7d40 	call	1000b7d4 <__swbuf_r>
1000b578:	10bfffe0 	cmpeqi	r2,r2,-1
1000b57c:	10803fcc 	andi	r2,r2,255
1000b580:	103fd626 	beq	r2,zero,1000b4dc <__alt_data_end+0xf800b4dc>
1000b584:	00bfffc4 	movi	r2,-1
1000b588:	003fee06 	br	1000b544 <__alt_data_end+0xf800b544>
1000b58c:	90ffffc4 	addi	r3,r18,-1
1000b590:	01003f84 	movi	r4,254
1000b594:	20ffbf36 	bltu	r4,r3,1000b494 <__alt_data_end+0xf800b494>
1000b598:	900b883a 	mov	r5,r18
1000b59c:	dc800005 	stb	r18,0(sp)
1000b5a0:	1029883a 	mov	r20,r2
1000b5a4:	003fc506 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b5a8:	800d883a 	mov	r6,r16
1000b5ac:	a80b883a 	mov	r5,r21
1000b5b0:	9809883a 	mov	r4,r19
1000b5b4:	000b7d40 	call	1000b7d4 <__swbuf_r>
1000b5b8:	10bfffe0 	cmpeqi	r2,r2,-1
1000b5bc:	003fef06 	br	1000b57c <__alt_data_end+0xf800b57c>

1000b5c0 <_fputwc_r>:
1000b5c0:	3080030b 	ldhu	r2,12(r6)
1000b5c4:	10c8000c 	andi	r3,r2,8192
1000b5c8:	1800051e 	bne	r3,zero,1000b5e0 <_fputwc_r+0x20>
1000b5cc:	30c01917 	ldw	r3,100(r6)
1000b5d0:	10880014 	ori	r2,r2,8192
1000b5d4:	3080030d 	sth	r2,12(r6)
1000b5d8:	18880014 	ori	r2,r3,8192
1000b5dc:	30801915 	stw	r2,100(r6)
1000b5e0:	000b45c1 	jmpi	1000b45c <__fputwc>

1000b5e4 <fputwc>:
1000b5e4:	00840074 	movhi	r2,4097
1000b5e8:	defffc04 	addi	sp,sp,-16
1000b5ec:	108fc704 	addi	r2,r2,16156
1000b5f0:	dc000115 	stw	r16,4(sp)
1000b5f4:	14000017 	ldw	r16,0(r2)
1000b5f8:	dc400215 	stw	r17,8(sp)
1000b5fc:	dfc00315 	stw	ra,12(sp)
1000b600:	2023883a 	mov	r17,r4
1000b604:	80000226 	beq	r16,zero,1000b610 <fputwc+0x2c>
1000b608:	80800e17 	ldw	r2,56(r16)
1000b60c:	10001026 	beq	r2,zero,1000b650 <fputwc+0x6c>
1000b610:	2880030b 	ldhu	r2,12(r5)
1000b614:	10c8000c 	andi	r3,r2,8192
1000b618:	1800051e 	bne	r3,zero,1000b630 <fputwc+0x4c>
1000b61c:	28c01917 	ldw	r3,100(r5)
1000b620:	10880014 	ori	r2,r2,8192
1000b624:	2880030d 	sth	r2,12(r5)
1000b628:	18880014 	ori	r2,r3,8192
1000b62c:	28801915 	stw	r2,100(r5)
1000b630:	280d883a 	mov	r6,r5
1000b634:	8009883a 	mov	r4,r16
1000b638:	880b883a 	mov	r5,r17
1000b63c:	dfc00317 	ldw	ra,12(sp)
1000b640:	dc400217 	ldw	r17,8(sp)
1000b644:	dc000117 	ldw	r16,4(sp)
1000b648:	dec00404 	addi	sp,sp,16
1000b64c:	000b45c1 	jmpi	1000b45c <__fputwc>
1000b650:	8009883a 	mov	r4,r16
1000b654:	d9400015 	stw	r5,0(sp)
1000b658:	00067ac0 	call	100067ac <__sinit>
1000b65c:	d9400017 	ldw	r5,0(sp)
1000b660:	003feb06 	br	1000b610 <__alt_data_end+0xf800b610>

1000b664 <_fstat_r>:
1000b664:	defffd04 	addi	sp,sp,-12
1000b668:	2805883a 	mov	r2,r5
1000b66c:	dc000015 	stw	r16,0(sp)
1000b670:	04040074 	movhi	r16,4097
1000b674:	dc400115 	stw	r17,4(sp)
1000b678:	84169804 	addi	r16,r16,23136
1000b67c:	2023883a 	mov	r17,r4
1000b680:	300b883a 	mov	r5,r6
1000b684:	1009883a 	mov	r4,r2
1000b688:	dfc00215 	stw	ra,8(sp)
1000b68c:	80000015 	stw	zero,0(r16)
1000b690:	000f2f40 	call	1000f2f4 <fstat>
1000b694:	00ffffc4 	movi	r3,-1
1000b698:	10c00526 	beq	r2,r3,1000b6b0 <_fstat_r+0x4c>
1000b69c:	dfc00217 	ldw	ra,8(sp)
1000b6a0:	dc400117 	ldw	r17,4(sp)
1000b6a4:	dc000017 	ldw	r16,0(sp)
1000b6a8:	dec00304 	addi	sp,sp,12
1000b6ac:	f800283a 	ret
1000b6b0:	80c00017 	ldw	r3,0(r16)
1000b6b4:	183ff926 	beq	r3,zero,1000b69c <__alt_data_end+0xf800b69c>
1000b6b8:	88c00015 	stw	r3,0(r17)
1000b6bc:	003ff706 	br	1000b69c <__alt_data_end+0xf800b69c>

1000b6c0 <_isatty_r>:
1000b6c0:	defffd04 	addi	sp,sp,-12
1000b6c4:	dc000015 	stw	r16,0(sp)
1000b6c8:	04040074 	movhi	r16,4097
1000b6cc:	dc400115 	stw	r17,4(sp)
1000b6d0:	84169804 	addi	r16,r16,23136
1000b6d4:	2023883a 	mov	r17,r4
1000b6d8:	2809883a 	mov	r4,r5
1000b6dc:	dfc00215 	stw	ra,8(sp)
1000b6e0:	80000015 	stw	zero,0(r16)
1000b6e4:	000f3fc0 	call	1000f3fc <isatty>
1000b6e8:	00ffffc4 	movi	r3,-1
1000b6ec:	10c00526 	beq	r2,r3,1000b704 <_isatty_r+0x44>
1000b6f0:	dfc00217 	ldw	ra,8(sp)
1000b6f4:	dc400117 	ldw	r17,4(sp)
1000b6f8:	dc000017 	ldw	r16,0(sp)
1000b6fc:	dec00304 	addi	sp,sp,12
1000b700:	f800283a 	ret
1000b704:	80c00017 	ldw	r3,0(r16)
1000b708:	183ff926 	beq	r3,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b70c:	88c00015 	stw	r3,0(r17)
1000b710:	003ff706 	br	1000b6f0 <__alt_data_end+0xf800b6f0>

1000b714 <_lseek_r>:
1000b714:	defffd04 	addi	sp,sp,-12
1000b718:	2805883a 	mov	r2,r5
1000b71c:	dc000015 	stw	r16,0(sp)
1000b720:	04040074 	movhi	r16,4097
1000b724:	dc400115 	stw	r17,4(sp)
1000b728:	300b883a 	mov	r5,r6
1000b72c:	84169804 	addi	r16,r16,23136
1000b730:	2023883a 	mov	r17,r4
1000b734:	380d883a 	mov	r6,r7
1000b738:	1009883a 	mov	r4,r2
1000b73c:	dfc00215 	stw	ra,8(sp)
1000b740:	80000015 	stw	zero,0(r16)
1000b744:	000f5e40 	call	1000f5e4 <lseek>
1000b748:	00ffffc4 	movi	r3,-1
1000b74c:	10c00526 	beq	r2,r3,1000b764 <_lseek_r+0x50>
1000b750:	dfc00217 	ldw	ra,8(sp)
1000b754:	dc400117 	ldw	r17,4(sp)
1000b758:	dc000017 	ldw	r16,0(sp)
1000b75c:	dec00304 	addi	sp,sp,12
1000b760:	f800283a 	ret
1000b764:	80c00017 	ldw	r3,0(r16)
1000b768:	183ff926 	beq	r3,zero,1000b750 <__alt_data_end+0xf800b750>
1000b76c:	88c00015 	stw	r3,0(r17)
1000b770:	003ff706 	br	1000b750 <__alt_data_end+0xf800b750>

1000b774 <_read_r>:
1000b774:	defffd04 	addi	sp,sp,-12
1000b778:	2805883a 	mov	r2,r5
1000b77c:	dc000015 	stw	r16,0(sp)
1000b780:	04040074 	movhi	r16,4097
1000b784:	dc400115 	stw	r17,4(sp)
1000b788:	300b883a 	mov	r5,r6
1000b78c:	84169804 	addi	r16,r16,23136
1000b790:	2023883a 	mov	r17,r4
1000b794:	380d883a 	mov	r6,r7
1000b798:	1009883a 	mov	r4,r2
1000b79c:	dfc00215 	stw	ra,8(sp)
1000b7a0:	80000015 	stw	zero,0(r16)
1000b7a4:	000f7d40 	call	1000f7d4 <read>
1000b7a8:	00ffffc4 	movi	r3,-1
1000b7ac:	10c00526 	beq	r2,r3,1000b7c4 <_read_r+0x50>
1000b7b0:	dfc00217 	ldw	ra,8(sp)
1000b7b4:	dc400117 	ldw	r17,4(sp)
1000b7b8:	dc000017 	ldw	r16,0(sp)
1000b7bc:	dec00304 	addi	sp,sp,12
1000b7c0:	f800283a 	ret
1000b7c4:	80c00017 	ldw	r3,0(r16)
1000b7c8:	183ff926 	beq	r3,zero,1000b7b0 <__alt_data_end+0xf800b7b0>
1000b7cc:	88c00015 	stw	r3,0(r17)
1000b7d0:	003ff706 	br	1000b7b0 <__alt_data_end+0xf800b7b0>

1000b7d4 <__swbuf_r>:
1000b7d4:	defffb04 	addi	sp,sp,-20
1000b7d8:	dcc00315 	stw	r19,12(sp)
1000b7dc:	dc800215 	stw	r18,8(sp)
1000b7e0:	dc000015 	stw	r16,0(sp)
1000b7e4:	dfc00415 	stw	ra,16(sp)
1000b7e8:	dc400115 	stw	r17,4(sp)
1000b7ec:	2025883a 	mov	r18,r4
1000b7f0:	2827883a 	mov	r19,r5
1000b7f4:	3021883a 	mov	r16,r6
1000b7f8:	20000226 	beq	r4,zero,1000b804 <__swbuf_r+0x30>
1000b7fc:	20800e17 	ldw	r2,56(r4)
1000b800:	10004226 	beq	r2,zero,1000b90c <__swbuf_r+0x138>
1000b804:	80800617 	ldw	r2,24(r16)
1000b808:	8100030b 	ldhu	r4,12(r16)
1000b80c:	80800215 	stw	r2,8(r16)
1000b810:	2080020c 	andi	r2,r4,8
1000b814:	10003626 	beq	r2,zero,1000b8f0 <__swbuf_r+0x11c>
1000b818:	80c00417 	ldw	r3,16(r16)
1000b81c:	18003426 	beq	r3,zero,1000b8f0 <__swbuf_r+0x11c>
1000b820:	2088000c 	andi	r2,r4,8192
1000b824:	9c403fcc 	andi	r17,r19,255
1000b828:	10001a26 	beq	r2,zero,1000b894 <__swbuf_r+0xc0>
1000b82c:	80800017 	ldw	r2,0(r16)
1000b830:	81000517 	ldw	r4,20(r16)
1000b834:	10c7c83a 	sub	r3,r2,r3
1000b838:	1900200e 	bge	r3,r4,1000b8bc <__swbuf_r+0xe8>
1000b83c:	18c00044 	addi	r3,r3,1
1000b840:	81000217 	ldw	r4,8(r16)
1000b844:	11400044 	addi	r5,r2,1
1000b848:	81400015 	stw	r5,0(r16)
1000b84c:	213fffc4 	addi	r4,r4,-1
1000b850:	81000215 	stw	r4,8(r16)
1000b854:	14c00005 	stb	r19,0(r2)
1000b858:	80800517 	ldw	r2,20(r16)
1000b85c:	10c01e26 	beq	r2,r3,1000b8d8 <__swbuf_r+0x104>
1000b860:	8080030b 	ldhu	r2,12(r16)
1000b864:	1080004c 	andi	r2,r2,1
1000b868:	10000226 	beq	r2,zero,1000b874 <__swbuf_r+0xa0>
1000b86c:	00800284 	movi	r2,10
1000b870:	88801926 	beq	r17,r2,1000b8d8 <__swbuf_r+0x104>
1000b874:	8805883a 	mov	r2,r17
1000b878:	dfc00417 	ldw	ra,16(sp)
1000b87c:	dcc00317 	ldw	r19,12(sp)
1000b880:	dc800217 	ldw	r18,8(sp)
1000b884:	dc400117 	ldw	r17,4(sp)
1000b888:	dc000017 	ldw	r16,0(sp)
1000b88c:	dec00504 	addi	sp,sp,20
1000b890:	f800283a 	ret
1000b894:	81401917 	ldw	r5,100(r16)
1000b898:	00b7ffc4 	movi	r2,-8193
1000b89c:	21080014 	ori	r4,r4,8192
1000b8a0:	2884703a 	and	r2,r5,r2
1000b8a4:	80801915 	stw	r2,100(r16)
1000b8a8:	80800017 	ldw	r2,0(r16)
1000b8ac:	8100030d 	sth	r4,12(r16)
1000b8b0:	81000517 	ldw	r4,20(r16)
1000b8b4:	10c7c83a 	sub	r3,r2,r3
1000b8b8:	193fe016 	blt	r3,r4,1000b83c <__alt_data_end+0xf800b83c>
1000b8bc:	800b883a 	mov	r5,r16
1000b8c0:	9009883a 	mov	r4,r18
1000b8c4:	00063c00 	call	100063c0 <_fflush_r>
1000b8c8:	1000071e 	bne	r2,zero,1000b8e8 <__swbuf_r+0x114>
1000b8cc:	80800017 	ldw	r2,0(r16)
1000b8d0:	00c00044 	movi	r3,1
1000b8d4:	003fda06 	br	1000b840 <__alt_data_end+0xf800b840>
1000b8d8:	800b883a 	mov	r5,r16
1000b8dc:	9009883a 	mov	r4,r18
1000b8e0:	00063c00 	call	100063c0 <_fflush_r>
1000b8e4:	103fe326 	beq	r2,zero,1000b874 <__alt_data_end+0xf800b874>
1000b8e8:	00bfffc4 	movi	r2,-1
1000b8ec:	003fe206 	br	1000b878 <__alt_data_end+0xf800b878>
1000b8f0:	800b883a 	mov	r5,r16
1000b8f4:	9009883a 	mov	r4,r18
1000b8f8:	00047a00 	call	100047a0 <__swsetup_r>
1000b8fc:	103ffa1e 	bne	r2,zero,1000b8e8 <__alt_data_end+0xf800b8e8>
1000b900:	8100030b 	ldhu	r4,12(r16)
1000b904:	80c00417 	ldw	r3,16(r16)
1000b908:	003fc506 	br	1000b820 <__alt_data_end+0xf800b820>
1000b90c:	00067ac0 	call	100067ac <__sinit>
1000b910:	003fbc06 	br	1000b804 <__alt_data_end+0xf800b804>

1000b914 <__swbuf>:
1000b914:	00840074 	movhi	r2,4097
1000b918:	108fc704 	addi	r2,r2,16156
1000b91c:	280d883a 	mov	r6,r5
1000b920:	200b883a 	mov	r5,r4
1000b924:	11000017 	ldw	r4,0(r2)
1000b928:	000b7d41 	jmpi	1000b7d4 <__swbuf_r>

1000b92c <_wcrtomb_r>:
1000b92c:	defff604 	addi	sp,sp,-40
1000b930:	00840074 	movhi	r2,4097
1000b934:	dc800815 	stw	r18,32(sp)
1000b938:	dc400715 	stw	r17,28(sp)
1000b93c:	dc000615 	stw	r16,24(sp)
1000b940:	108fcb04 	addi	r2,r2,16172
1000b944:	dfc00915 	stw	ra,36(sp)
1000b948:	2021883a 	mov	r16,r4
1000b94c:	3823883a 	mov	r17,r7
1000b950:	14800017 	ldw	r18,0(r2)
1000b954:	28001426 	beq	r5,zero,1000b9a8 <_wcrtomb_r+0x7c>
1000b958:	d9400415 	stw	r5,16(sp)
1000b95c:	d9800515 	stw	r6,20(sp)
1000b960:	00072fc0 	call	100072fc <__locale_charset>
1000b964:	d9800517 	ldw	r6,20(sp)
1000b968:	d9400417 	ldw	r5,16(sp)
1000b96c:	100f883a 	mov	r7,r2
1000b970:	dc400015 	stw	r17,0(sp)
1000b974:	8009883a 	mov	r4,r16
1000b978:	903ee83a 	callr	r18
1000b97c:	00ffffc4 	movi	r3,-1
1000b980:	10c0031e 	bne	r2,r3,1000b990 <_wcrtomb_r+0x64>
1000b984:	88000015 	stw	zero,0(r17)
1000b988:	00c02284 	movi	r3,138
1000b98c:	80c00015 	stw	r3,0(r16)
1000b990:	dfc00917 	ldw	ra,36(sp)
1000b994:	dc800817 	ldw	r18,32(sp)
1000b998:	dc400717 	ldw	r17,28(sp)
1000b99c:	dc000617 	ldw	r16,24(sp)
1000b9a0:	dec00a04 	addi	sp,sp,40
1000b9a4:	f800283a 	ret
1000b9a8:	00072fc0 	call	100072fc <__locale_charset>
1000b9ac:	100f883a 	mov	r7,r2
1000b9b0:	dc400015 	stw	r17,0(sp)
1000b9b4:	000d883a 	mov	r6,zero
1000b9b8:	d9400104 	addi	r5,sp,4
1000b9bc:	8009883a 	mov	r4,r16
1000b9c0:	903ee83a 	callr	r18
1000b9c4:	003fed06 	br	1000b97c <__alt_data_end+0xf800b97c>

1000b9c8 <wcrtomb>:
1000b9c8:	defff604 	addi	sp,sp,-40
1000b9cc:	00840074 	movhi	r2,4097
1000b9d0:	dc800615 	stw	r18,24(sp)
1000b9d4:	dc400515 	stw	r17,20(sp)
1000b9d8:	108fc704 	addi	r2,r2,16156
1000b9dc:	dfc00915 	stw	ra,36(sp)
1000b9e0:	dd000815 	stw	r20,32(sp)
1000b9e4:	dcc00715 	stw	r19,28(sp)
1000b9e8:	dc000415 	stw	r16,16(sp)
1000b9ec:	3025883a 	mov	r18,r6
1000b9f0:	14400017 	ldw	r17,0(r2)
1000b9f4:	20001926 	beq	r4,zero,1000ba5c <wcrtomb+0x94>
1000b9f8:	00840074 	movhi	r2,4097
1000b9fc:	108fcb04 	addi	r2,r2,16172
1000ba00:	15000017 	ldw	r20,0(r2)
1000ba04:	2021883a 	mov	r16,r4
1000ba08:	2827883a 	mov	r19,r5
1000ba0c:	00072fc0 	call	100072fc <__locale_charset>
1000ba10:	100f883a 	mov	r7,r2
1000ba14:	dc800015 	stw	r18,0(sp)
1000ba18:	980d883a 	mov	r6,r19
1000ba1c:	800b883a 	mov	r5,r16
1000ba20:	8809883a 	mov	r4,r17
1000ba24:	a03ee83a 	callr	r20
1000ba28:	00ffffc4 	movi	r3,-1
1000ba2c:	10c0031e 	bne	r2,r3,1000ba3c <wcrtomb+0x74>
1000ba30:	90000015 	stw	zero,0(r18)
1000ba34:	00c02284 	movi	r3,138
1000ba38:	88c00015 	stw	r3,0(r17)
1000ba3c:	dfc00917 	ldw	ra,36(sp)
1000ba40:	dd000817 	ldw	r20,32(sp)
1000ba44:	dcc00717 	ldw	r19,28(sp)
1000ba48:	dc800617 	ldw	r18,24(sp)
1000ba4c:	dc400517 	ldw	r17,20(sp)
1000ba50:	dc000417 	ldw	r16,16(sp)
1000ba54:	dec00a04 	addi	sp,sp,40
1000ba58:	f800283a 	ret
1000ba5c:	00840074 	movhi	r2,4097
1000ba60:	108fcb04 	addi	r2,r2,16172
1000ba64:	14000017 	ldw	r16,0(r2)
1000ba68:	00072fc0 	call	100072fc <__locale_charset>
1000ba6c:	100f883a 	mov	r7,r2
1000ba70:	dc800015 	stw	r18,0(sp)
1000ba74:	000d883a 	mov	r6,zero
1000ba78:	d9400104 	addi	r5,sp,4
1000ba7c:	8809883a 	mov	r4,r17
1000ba80:	803ee83a 	callr	r16
1000ba84:	003fe806 	br	1000ba28 <__alt_data_end+0xf800ba28>

1000ba88 <__ascii_wctomb>:
1000ba88:	28000526 	beq	r5,zero,1000baa0 <__ascii_wctomb+0x18>
1000ba8c:	00803fc4 	movi	r2,255
1000ba90:	11800536 	bltu	r2,r6,1000baa8 <__ascii_wctomb+0x20>
1000ba94:	29800005 	stb	r6,0(r5)
1000ba98:	00800044 	movi	r2,1
1000ba9c:	f800283a 	ret
1000baa0:	0005883a 	mov	r2,zero
1000baa4:	f800283a 	ret
1000baa8:	00802284 	movi	r2,138
1000baac:	20800015 	stw	r2,0(r4)
1000bab0:	00bfffc4 	movi	r2,-1
1000bab4:	f800283a 	ret

1000bab8 <_wctomb_r>:
1000bab8:	00840074 	movhi	r2,4097
1000babc:	defff904 	addi	sp,sp,-28
1000bac0:	108fcb04 	addi	r2,r2,16172
1000bac4:	dfc00615 	stw	ra,24(sp)
1000bac8:	dc400515 	stw	r17,20(sp)
1000bacc:	dc000415 	stw	r16,16(sp)
1000bad0:	3823883a 	mov	r17,r7
1000bad4:	14000017 	ldw	r16,0(r2)
1000bad8:	d9000115 	stw	r4,4(sp)
1000badc:	d9400215 	stw	r5,8(sp)
1000bae0:	d9800315 	stw	r6,12(sp)
1000bae4:	00072fc0 	call	100072fc <__locale_charset>
1000bae8:	d9800317 	ldw	r6,12(sp)
1000baec:	d9400217 	ldw	r5,8(sp)
1000baf0:	d9000117 	ldw	r4,4(sp)
1000baf4:	100f883a 	mov	r7,r2
1000baf8:	dc400015 	stw	r17,0(sp)
1000bafc:	803ee83a 	callr	r16
1000bb00:	dfc00617 	ldw	ra,24(sp)
1000bb04:	dc400517 	ldw	r17,20(sp)
1000bb08:	dc000417 	ldw	r16,16(sp)
1000bb0c:	dec00704 	addi	sp,sp,28
1000bb10:	f800283a 	ret

1000bb14 <__udivdi3>:
1000bb14:	defff404 	addi	sp,sp,-48
1000bb18:	dcc00515 	stw	r19,20(sp)
1000bb1c:	dc000215 	stw	r16,8(sp)
1000bb20:	dfc00b15 	stw	ra,44(sp)
1000bb24:	df000a15 	stw	fp,40(sp)
1000bb28:	ddc00915 	stw	r23,36(sp)
1000bb2c:	dd800815 	stw	r22,32(sp)
1000bb30:	dd400715 	stw	r21,28(sp)
1000bb34:	dd000615 	stw	r20,24(sp)
1000bb38:	dc800415 	stw	r18,16(sp)
1000bb3c:	dc400315 	stw	r17,12(sp)
1000bb40:	2027883a 	mov	r19,r4
1000bb44:	2821883a 	mov	r16,r5
1000bb48:	3800461e 	bne	r7,zero,1000bc64 <__udivdi3+0x150>
1000bb4c:	3023883a 	mov	r17,r6
1000bb50:	2025883a 	mov	r18,r4
1000bb54:	2980572e 	bgeu	r5,r6,1000bcb4 <__udivdi3+0x1a0>
1000bb58:	00bfffd4 	movui	r2,65535
1000bb5c:	282d883a 	mov	r22,r5
1000bb60:	1180b236 	bltu	r2,r6,1000be2c <__udivdi3+0x318>
1000bb64:	00803fc4 	movi	r2,255
1000bb68:	1185803a 	cmpltu	r2,r2,r6
1000bb6c:	100490fa 	slli	r2,r2,3
1000bb70:	3086d83a 	srl	r3,r6,r2
1000bb74:	01040074 	movhi	r4,4097
1000bb78:	2108ce04 	addi	r4,r4,9016
1000bb7c:	20c7883a 	add	r3,r4,r3
1000bb80:	18c00003 	ldbu	r3,0(r3)
1000bb84:	1885883a 	add	r2,r3,r2
1000bb88:	00c00804 	movi	r3,32
1000bb8c:	1887c83a 	sub	r3,r3,r2
1000bb90:	18000526 	beq	r3,zero,1000bba8 <__udivdi3+0x94>
1000bb94:	80e0983a 	sll	r16,r16,r3
1000bb98:	9884d83a 	srl	r2,r19,r2
1000bb9c:	30e2983a 	sll	r17,r6,r3
1000bba0:	98e4983a 	sll	r18,r19,r3
1000bba4:	142cb03a 	or	r22,r2,r16
1000bba8:	882ad43a 	srli	r21,r17,16
1000bbac:	b009883a 	mov	r4,r22
1000bbb0:	8d3fffcc 	andi	r20,r17,65535
1000bbb4:	a80b883a 	mov	r5,r21
1000bbb8:	000c8300 	call	1000c830 <__umodsi3>
1000bbbc:	b009883a 	mov	r4,r22
1000bbc0:	a80b883a 	mov	r5,r21
1000bbc4:	1027883a 	mov	r19,r2
1000bbc8:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bbcc:	100b883a 	mov	r5,r2
1000bbd0:	a009883a 	mov	r4,r20
1000bbd4:	102d883a 	mov	r22,r2
1000bbd8:	000c8880 	call	1000c888 <__mulsi3>
1000bbdc:	9826943a 	slli	r19,r19,16
1000bbe0:	9006d43a 	srli	r3,r18,16
1000bbe4:	1cc6b03a 	or	r3,r3,r19
1000bbe8:	1880052e 	bgeu	r3,r2,1000bc00 <__udivdi3+0xec>
1000bbec:	1c47883a 	add	r3,r3,r17
1000bbf0:	b13fffc4 	addi	r4,r22,-1
1000bbf4:	1c400136 	bltu	r3,r17,1000bbfc <__udivdi3+0xe8>
1000bbf8:	18814236 	bltu	r3,r2,1000c104 <__udivdi3+0x5f0>
1000bbfc:	202d883a 	mov	r22,r4
1000bc00:	18a1c83a 	sub	r16,r3,r2
1000bc04:	8009883a 	mov	r4,r16
1000bc08:	a80b883a 	mov	r5,r21
1000bc0c:	000c8300 	call	1000c830 <__umodsi3>
1000bc10:	1027883a 	mov	r19,r2
1000bc14:	8009883a 	mov	r4,r16
1000bc18:	a80b883a 	mov	r5,r21
1000bc1c:	9826943a 	slli	r19,r19,16
1000bc20:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bc24:	100b883a 	mov	r5,r2
1000bc28:	a009883a 	mov	r4,r20
1000bc2c:	94bfffcc 	andi	r18,r18,65535
1000bc30:	1021883a 	mov	r16,r2
1000bc34:	94e4b03a 	or	r18,r18,r19
1000bc38:	000c8880 	call	1000c888 <__mulsi3>
1000bc3c:	9080052e 	bgeu	r18,r2,1000bc54 <__udivdi3+0x140>
1000bc40:	8ca5883a 	add	r18,r17,r18
1000bc44:	80ffffc4 	addi	r3,r16,-1
1000bc48:	94410c36 	bltu	r18,r17,1000c07c <__udivdi3+0x568>
1000bc4c:	90810b2e 	bgeu	r18,r2,1000c07c <__udivdi3+0x568>
1000bc50:	843fff84 	addi	r16,r16,-2
1000bc54:	b004943a 	slli	r2,r22,16
1000bc58:	0007883a 	mov	r3,zero
1000bc5c:	1404b03a 	or	r2,r2,r16
1000bc60:	00005e06 	br	1000bddc <__udivdi3+0x2c8>
1000bc64:	29c05b36 	bltu	r5,r7,1000bdd4 <__udivdi3+0x2c0>
1000bc68:	00bfffd4 	movui	r2,65535
1000bc6c:	11c0672e 	bgeu	r2,r7,1000be0c <__udivdi3+0x2f8>
1000bc70:	00804034 	movhi	r2,256
1000bc74:	10bfffc4 	addi	r2,r2,-1
1000bc78:	11c10a36 	bltu	r2,r7,1000c0a4 <__udivdi3+0x590>
1000bc7c:	00800404 	movi	r2,16
1000bc80:	3886d83a 	srl	r3,r7,r2
1000bc84:	01040074 	movhi	r4,4097
1000bc88:	2108ce04 	addi	r4,r4,9016
1000bc8c:	20c7883a 	add	r3,r4,r3
1000bc90:	18c00003 	ldbu	r3,0(r3)
1000bc94:	05c00804 	movi	r23,32
1000bc98:	1885883a 	add	r2,r3,r2
1000bc9c:	b8afc83a 	sub	r23,r23,r2
1000bca0:	b800671e 	bne	r23,zero,1000be40 <__udivdi3+0x32c>
1000bca4:	3c010536 	bltu	r7,r16,1000c0bc <__udivdi3+0x5a8>
1000bca8:	9985403a 	cmpgeu	r2,r19,r6
1000bcac:	0007883a 	mov	r3,zero
1000bcb0:	00004a06 	br	1000bddc <__udivdi3+0x2c8>
1000bcb4:	3000041e 	bne	r6,zero,1000bcc8 <__udivdi3+0x1b4>
1000bcb8:	000b883a 	mov	r5,zero
1000bcbc:	01000044 	movi	r4,1
1000bcc0:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bcc4:	1023883a 	mov	r17,r2
1000bcc8:	00bfffd4 	movui	r2,65535
1000bccc:	1440532e 	bgeu	r2,r17,1000be1c <__udivdi3+0x308>
1000bcd0:	00804034 	movhi	r2,256
1000bcd4:	10bfffc4 	addi	r2,r2,-1
1000bcd8:	1440f436 	bltu	r2,r17,1000c0ac <__udivdi3+0x598>
1000bcdc:	00800404 	movi	r2,16
1000bce0:	8886d83a 	srl	r3,r17,r2
1000bce4:	01040074 	movhi	r4,4097
1000bce8:	2108ce04 	addi	r4,r4,9016
1000bcec:	20c7883a 	add	r3,r4,r3
1000bcf0:	18c00003 	ldbu	r3,0(r3)
1000bcf4:	1885883a 	add	r2,r3,r2
1000bcf8:	00c00804 	movi	r3,32
1000bcfc:	1887c83a 	sub	r3,r3,r2
1000bd00:	1800a51e 	bne	r3,zero,1000bf98 <__udivdi3+0x484>
1000bd04:	882ad43a 	srli	r21,r17,16
1000bd08:	8461c83a 	sub	r16,r16,r17
1000bd0c:	8d3fffcc 	andi	r20,r17,65535
1000bd10:	00c00044 	movi	r3,1
1000bd14:	a80b883a 	mov	r5,r21
1000bd18:	8009883a 	mov	r4,r16
1000bd1c:	d8c00115 	stw	r3,4(sp)
1000bd20:	000c8300 	call	1000c830 <__umodsi3>
1000bd24:	a80b883a 	mov	r5,r21
1000bd28:	8009883a 	mov	r4,r16
1000bd2c:	1027883a 	mov	r19,r2
1000bd30:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bd34:	a00b883a 	mov	r5,r20
1000bd38:	1009883a 	mov	r4,r2
1000bd3c:	102d883a 	mov	r22,r2
1000bd40:	000c8880 	call	1000c888 <__mulsi3>
1000bd44:	9826943a 	slli	r19,r19,16
1000bd48:	900ed43a 	srli	r7,r18,16
1000bd4c:	d8c00117 	ldw	r3,4(sp)
1000bd50:	3cceb03a 	or	r7,r7,r19
1000bd54:	3880052e 	bgeu	r7,r2,1000bd6c <__udivdi3+0x258>
1000bd58:	3c4f883a 	add	r7,r7,r17
1000bd5c:	b13fffc4 	addi	r4,r22,-1
1000bd60:	3c400136 	bltu	r7,r17,1000bd68 <__udivdi3+0x254>
1000bd64:	3880e436 	bltu	r7,r2,1000c0f8 <__udivdi3+0x5e4>
1000bd68:	202d883a 	mov	r22,r4
1000bd6c:	38a1c83a 	sub	r16,r7,r2
1000bd70:	8009883a 	mov	r4,r16
1000bd74:	a80b883a 	mov	r5,r21
1000bd78:	d8c00115 	stw	r3,4(sp)
1000bd7c:	000c8300 	call	1000c830 <__umodsi3>
1000bd80:	1027883a 	mov	r19,r2
1000bd84:	8009883a 	mov	r4,r16
1000bd88:	a80b883a 	mov	r5,r21
1000bd8c:	9826943a 	slli	r19,r19,16
1000bd90:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bd94:	a00b883a 	mov	r5,r20
1000bd98:	1009883a 	mov	r4,r2
1000bd9c:	94bfffcc 	andi	r18,r18,65535
1000bda0:	1021883a 	mov	r16,r2
1000bda4:	94e4b03a 	or	r18,r18,r19
1000bda8:	000c8880 	call	1000c888 <__mulsi3>
1000bdac:	d8c00117 	ldw	r3,4(sp)
1000bdb0:	9080052e 	bgeu	r18,r2,1000bdc8 <__udivdi3+0x2b4>
1000bdb4:	8ca5883a 	add	r18,r17,r18
1000bdb8:	813fffc4 	addi	r4,r16,-1
1000bdbc:	9440ad36 	bltu	r18,r17,1000c074 <__udivdi3+0x560>
1000bdc0:	9080ac2e 	bgeu	r18,r2,1000c074 <__udivdi3+0x560>
1000bdc4:	843fff84 	addi	r16,r16,-2
1000bdc8:	b004943a 	slli	r2,r22,16
1000bdcc:	1404b03a 	or	r2,r2,r16
1000bdd0:	00000206 	br	1000bddc <__udivdi3+0x2c8>
1000bdd4:	0007883a 	mov	r3,zero
1000bdd8:	0005883a 	mov	r2,zero
1000bddc:	dfc00b17 	ldw	ra,44(sp)
1000bde0:	df000a17 	ldw	fp,40(sp)
1000bde4:	ddc00917 	ldw	r23,36(sp)
1000bde8:	dd800817 	ldw	r22,32(sp)
1000bdec:	dd400717 	ldw	r21,28(sp)
1000bdf0:	dd000617 	ldw	r20,24(sp)
1000bdf4:	dcc00517 	ldw	r19,20(sp)
1000bdf8:	dc800417 	ldw	r18,16(sp)
1000bdfc:	dc400317 	ldw	r17,12(sp)
1000be00:	dc000217 	ldw	r16,8(sp)
1000be04:	dec00c04 	addi	sp,sp,48
1000be08:	f800283a 	ret
1000be0c:	00803fc4 	movi	r2,255
1000be10:	11c5803a 	cmpltu	r2,r2,r7
1000be14:	100490fa 	slli	r2,r2,3
1000be18:	003f9906 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000be1c:	00803fc4 	movi	r2,255
1000be20:	1445803a 	cmpltu	r2,r2,r17
1000be24:	100490fa 	slli	r2,r2,3
1000be28:	003fad06 	br	1000bce0 <__alt_data_end+0xf800bce0>
1000be2c:	00804034 	movhi	r2,256
1000be30:	10bfffc4 	addi	r2,r2,-1
1000be34:	11809f36 	bltu	r2,r6,1000c0b4 <__udivdi3+0x5a0>
1000be38:	00800404 	movi	r2,16
1000be3c:	003f4c06 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000be40:	3dce983a 	sll	r7,r7,r23
1000be44:	30b8d83a 	srl	fp,r6,r2
1000be48:	80a2d83a 	srl	r17,r16,r2
1000be4c:	35cc983a 	sll	r6,r6,r23
1000be50:	3f38b03a 	or	fp,r7,fp
1000be54:	e024d43a 	srli	r18,fp,16
1000be58:	9884d83a 	srl	r2,r19,r2
1000be5c:	85e0983a 	sll	r16,r16,r23
1000be60:	8809883a 	mov	r4,r17
1000be64:	900b883a 	mov	r5,r18
1000be68:	d9800015 	stw	r6,0(sp)
1000be6c:	1420b03a 	or	r16,r2,r16
1000be70:	000c8300 	call	1000c830 <__umodsi3>
1000be74:	900b883a 	mov	r5,r18
1000be78:	8809883a 	mov	r4,r17
1000be7c:	1029883a 	mov	r20,r2
1000be80:	e5bfffcc 	andi	r22,fp,65535
1000be84:	000c7cc0 	call	1000c7cc <__udivsi3>
1000be88:	100b883a 	mov	r5,r2
1000be8c:	b009883a 	mov	r4,r22
1000be90:	102b883a 	mov	r21,r2
1000be94:	000c8880 	call	1000c888 <__mulsi3>
1000be98:	a028943a 	slli	r20,r20,16
1000be9c:	8006d43a 	srli	r3,r16,16
1000bea0:	1d06b03a 	or	r3,r3,r20
1000bea4:	1880042e 	bgeu	r3,r2,1000beb8 <__udivdi3+0x3a4>
1000bea8:	1f07883a 	add	r3,r3,fp
1000beac:	a93fffc4 	addi	r4,r21,-1
1000beb0:	1f00892e 	bgeu	r3,fp,1000c0d8 <__udivdi3+0x5c4>
1000beb4:	202b883a 	mov	r21,r4
1000beb8:	18a3c83a 	sub	r17,r3,r2
1000bebc:	8809883a 	mov	r4,r17
1000bec0:	900b883a 	mov	r5,r18
1000bec4:	000c8300 	call	1000c830 <__umodsi3>
1000bec8:	1029883a 	mov	r20,r2
1000becc:	8809883a 	mov	r4,r17
1000bed0:	900b883a 	mov	r5,r18
1000bed4:	a028943a 	slli	r20,r20,16
1000bed8:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bedc:	100b883a 	mov	r5,r2
1000bee0:	b009883a 	mov	r4,r22
1000bee4:	843fffcc 	andi	r16,r16,65535
1000bee8:	1023883a 	mov	r17,r2
1000beec:	8520b03a 	or	r16,r16,r20
1000bef0:	000c8880 	call	1000c888 <__mulsi3>
1000bef4:	8080042e 	bgeu	r16,r2,1000bf08 <__udivdi3+0x3f4>
1000bef8:	8721883a 	add	r16,r16,fp
1000befc:	88ffffc4 	addi	r3,r17,-1
1000bf00:	8700712e 	bgeu	r16,fp,1000c0c8 <__udivdi3+0x5b4>
1000bf04:	1823883a 	mov	r17,r3
1000bf08:	a80e943a 	slli	r7,r21,16
1000bf0c:	d8c00017 	ldw	r3,0(sp)
1000bf10:	80a1c83a 	sub	r16,r16,r2
1000bf14:	3c64b03a 	or	r18,r7,r17
1000bf18:	1d3fffcc 	andi	r20,r3,65535
1000bf1c:	9022d43a 	srli	r17,r18,16
1000bf20:	95bfffcc 	andi	r22,r18,65535
1000bf24:	a00b883a 	mov	r5,r20
1000bf28:	b009883a 	mov	r4,r22
1000bf2c:	182ad43a 	srli	r21,r3,16
1000bf30:	000c8880 	call	1000c888 <__mulsi3>
1000bf34:	a00b883a 	mov	r5,r20
1000bf38:	8809883a 	mov	r4,r17
1000bf3c:	1039883a 	mov	fp,r2
1000bf40:	000c8880 	call	1000c888 <__mulsi3>
1000bf44:	8809883a 	mov	r4,r17
1000bf48:	a80b883a 	mov	r5,r21
1000bf4c:	1029883a 	mov	r20,r2
1000bf50:	000c8880 	call	1000c888 <__mulsi3>
1000bf54:	a80b883a 	mov	r5,r21
1000bf58:	b009883a 	mov	r4,r22
1000bf5c:	1023883a 	mov	r17,r2
1000bf60:	000c8880 	call	1000c888 <__mulsi3>
1000bf64:	e006d43a 	srli	r3,fp,16
1000bf68:	1505883a 	add	r2,r2,r20
1000bf6c:	1887883a 	add	r3,r3,r2
1000bf70:	1d00022e 	bgeu	r3,r20,1000bf7c <__udivdi3+0x468>
1000bf74:	00800074 	movhi	r2,1
1000bf78:	88a3883a 	add	r17,r17,r2
1000bf7c:	1804d43a 	srli	r2,r3,16
1000bf80:	1463883a 	add	r17,r2,r17
1000bf84:	84404436 	bltu	r16,r17,1000c098 <__udivdi3+0x584>
1000bf88:	84403e26 	beq	r16,r17,1000c084 <__udivdi3+0x570>
1000bf8c:	9005883a 	mov	r2,r18
1000bf90:	0007883a 	mov	r3,zero
1000bf94:	003f9106 	br	1000bddc <__alt_data_end+0xf800bddc>
1000bf98:	88e2983a 	sll	r17,r17,r3
1000bf9c:	80aed83a 	srl	r23,r16,r2
1000bfa0:	80e0983a 	sll	r16,r16,r3
1000bfa4:	882ad43a 	srli	r21,r17,16
1000bfa8:	9884d83a 	srl	r2,r19,r2
1000bfac:	b809883a 	mov	r4,r23
1000bfb0:	a80b883a 	mov	r5,r21
1000bfb4:	98e4983a 	sll	r18,r19,r3
1000bfb8:	142cb03a 	or	r22,r2,r16
1000bfbc:	000c8300 	call	1000c830 <__umodsi3>
1000bfc0:	b809883a 	mov	r4,r23
1000bfc4:	a80b883a 	mov	r5,r21
1000bfc8:	1027883a 	mov	r19,r2
1000bfcc:	8d3fffcc 	andi	r20,r17,65535
1000bfd0:	000c7cc0 	call	1000c7cc <__udivsi3>
1000bfd4:	a009883a 	mov	r4,r20
1000bfd8:	100b883a 	mov	r5,r2
1000bfdc:	102f883a 	mov	r23,r2
1000bfe0:	000c8880 	call	1000c888 <__mulsi3>
1000bfe4:	9826943a 	slli	r19,r19,16
1000bfe8:	b008d43a 	srli	r4,r22,16
1000bfec:	24c8b03a 	or	r4,r4,r19
1000bff0:	2080062e 	bgeu	r4,r2,1000c00c <__udivdi3+0x4f8>
1000bff4:	2449883a 	add	r4,r4,r17
1000bff8:	b8ffffc4 	addi	r3,r23,-1
1000bffc:	24403c36 	bltu	r4,r17,1000c0f0 <__udivdi3+0x5dc>
1000c000:	20803b2e 	bgeu	r4,r2,1000c0f0 <__udivdi3+0x5dc>
1000c004:	bdffff84 	addi	r23,r23,-2
1000c008:	2449883a 	add	r4,r4,r17
1000c00c:	20a1c83a 	sub	r16,r4,r2
1000c010:	a80b883a 	mov	r5,r21
1000c014:	8009883a 	mov	r4,r16
1000c018:	000c8300 	call	1000c830 <__umodsi3>
1000c01c:	a80b883a 	mov	r5,r21
1000c020:	8009883a 	mov	r4,r16
1000c024:	1027883a 	mov	r19,r2
1000c028:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c02c:	a009883a 	mov	r4,r20
1000c030:	100b883a 	mov	r5,r2
1000c034:	9826943a 	slli	r19,r19,16
1000c038:	1039883a 	mov	fp,r2
1000c03c:	000c8880 	call	1000c888 <__mulsi3>
1000c040:	b13fffcc 	andi	r4,r22,65535
1000c044:	24c8b03a 	or	r4,r4,r19
1000c048:	2080062e 	bgeu	r4,r2,1000c064 <__udivdi3+0x550>
1000c04c:	2449883a 	add	r4,r4,r17
1000c050:	e0ffffc4 	addi	r3,fp,-1
1000c054:	24402436 	bltu	r4,r17,1000c0e8 <__udivdi3+0x5d4>
1000c058:	2080232e 	bgeu	r4,r2,1000c0e8 <__udivdi3+0x5d4>
1000c05c:	e73fff84 	addi	fp,fp,-2
1000c060:	2449883a 	add	r4,r4,r17
1000c064:	b82e943a 	slli	r23,r23,16
1000c068:	20a1c83a 	sub	r16,r4,r2
1000c06c:	bf06b03a 	or	r3,r23,fp
1000c070:	003f2806 	br	1000bd14 <__alt_data_end+0xf800bd14>
1000c074:	2021883a 	mov	r16,r4
1000c078:	003f5306 	br	1000bdc8 <__alt_data_end+0xf800bdc8>
1000c07c:	1821883a 	mov	r16,r3
1000c080:	003ef406 	br	1000bc54 <__alt_data_end+0xf800bc54>
1000c084:	1806943a 	slli	r3,r3,16
1000c088:	9de6983a 	sll	r19,r19,r23
1000c08c:	e73fffcc 	andi	fp,fp,65535
1000c090:	1f07883a 	add	r3,r3,fp
1000c094:	98ffbd2e 	bgeu	r19,r3,1000bf8c <__alt_data_end+0xf800bf8c>
1000c098:	90bfffc4 	addi	r2,r18,-1
1000c09c:	0007883a 	mov	r3,zero
1000c0a0:	003f4e06 	br	1000bddc <__alt_data_end+0xf800bddc>
1000c0a4:	00800604 	movi	r2,24
1000c0a8:	003ef506 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000c0ac:	00800604 	movi	r2,24
1000c0b0:	003f0b06 	br	1000bce0 <__alt_data_end+0xf800bce0>
1000c0b4:	00800604 	movi	r2,24
1000c0b8:	003ead06 	br	1000bb70 <__alt_data_end+0xf800bb70>
1000c0bc:	0007883a 	mov	r3,zero
1000c0c0:	00800044 	movi	r2,1
1000c0c4:	003f4506 	br	1000bddc <__alt_data_end+0xf800bddc>
1000c0c8:	80bf8e2e 	bgeu	r16,r2,1000bf04 <__alt_data_end+0xf800bf04>
1000c0cc:	8c7fff84 	addi	r17,r17,-2
1000c0d0:	8721883a 	add	r16,r16,fp
1000c0d4:	003f8c06 	br	1000bf08 <__alt_data_end+0xf800bf08>
1000c0d8:	18bf762e 	bgeu	r3,r2,1000beb4 <__alt_data_end+0xf800beb4>
1000c0dc:	ad7fff84 	addi	r21,r21,-2
1000c0e0:	1f07883a 	add	r3,r3,fp
1000c0e4:	003f7406 	br	1000beb8 <__alt_data_end+0xf800beb8>
1000c0e8:	1839883a 	mov	fp,r3
1000c0ec:	003fdd06 	br	1000c064 <__alt_data_end+0xf800c064>
1000c0f0:	182f883a 	mov	r23,r3
1000c0f4:	003fc506 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c0f8:	b5bfff84 	addi	r22,r22,-2
1000c0fc:	3c4f883a 	add	r7,r7,r17
1000c100:	003f1a06 	br	1000bd6c <__alt_data_end+0xf800bd6c>
1000c104:	b5bfff84 	addi	r22,r22,-2
1000c108:	1c47883a 	add	r3,r3,r17
1000c10c:	003ebc06 	br	1000bc00 <__alt_data_end+0xf800bc00>

1000c110 <__umoddi3>:
1000c110:	defff304 	addi	sp,sp,-52
1000c114:	df000b15 	stw	fp,44(sp)
1000c118:	dc400415 	stw	r17,16(sp)
1000c11c:	dc000315 	stw	r16,12(sp)
1000c120:	dfc00c15 	stw	ra,48(sp)
1000c124:	ddc00a15 	stw	r23,40(sp)
1000c128:	dd800915 	stw	r22,36(sp)
1000c12c:	dd400815 	stw	r21,32(sp)
1000c130:	dd000715 	stw	r20,28(sp)
1000c134:	dcc00615 	stw	r19,24(sp)
1000c138:	dc800515 	stw	r18,20(sp)
1000c13c:	2021883a 	mov	r16,r4
1000c140:	2823883a 	mov	r17,r5
1000c144:	2839883a 	mov	fp,r5
1000c148:	3800401e 	bne	r7,zero,1000c24c <__umoddi3+0x13c>
1000c14c:	3027883a 	mov	r19,r6
1000c150:	2029883a 	mov	r20,r4
1000c154:	2980552e 	bgeu	r5,r6,1000c2ac <__umoddi3+0x19c>
1000c158:	00bfffd4 	movui	r2,65535
1000c15c:	1180a236 	bltu	r2,r6,1000c3e8 <__umoddi3+0x2d8>
1000c160:	01003fc4 	movi	r4,255
1000c164:	2189803a 	cmpltu	r4,r4,r6
1000c168:	200890fa 	slli	r4,r4,3
1000c16c:	3104d83a 	srl	r2,r6,r4
1000c170:	00c40074 	movhi	r3,4097
1000c174:	18c8ce04 	addi	r3,r3,9016
1000c178:	1885883a 	add	r2,r3,r2
1000c17c:	10c00003 	ldbu	r3,0(r2)
1000c180:	00800804 	movi	r2,32
1000c184:	1909883a 	add	r4,r3,r4
1000c188:	1125c83a 	sub	r18,r2,r4
1000c18c:	90000526 	beq	r18,zero,1000c1a4 <__umoddi3+0x94>
1000c190:	8ca2983a 	sll	r17,r17,r18
1000c194:	8108d83a 	srl	r4,r16,r4
1000c198:	34a6983a 	sll	r19,r6,r18
1000c19c:	84a8983a 	sll	r20,r16,r18
1000c1a0:	2478b03a 	or	fp,r4,r17
1000c1a4:	982cd43a 	srli	r22,r19,16
1000c1a8:	e009883a 	mov	r4,fp
1000c1ac:	9dffffcc 	andi	r23,r19,65535
1000c1b0:	b00b883a 	mov	r5,r22
1000c1b4:	000c8300 	call	1000c830 <__umodsi3>
1000c1b8:	b00b883a 	mov	r5,r22
1000c1bc:	e009883a 	mov	r4,fp
1000c1c0:	102b883a 	mov	r21,r2
1000c1c4:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c1c8:	100b883a 	mov	r5,r2
1000c1cc:	b809883a 	mov	r4,r23
1000c1d0:	000c8880 	call	1000c888 <__mulsi3>
1000c1d4:	a82a943a 	slli	r21,r21,16
1000c1d8:	a006d43a 	srli	r3,r20,16
1000c1dc:	1d46b03a 	or	r3,r3,r21
1000c1e0:	1880032e 	bgeu	r3,r2,1000c1f0 <__umoddi3+0xe0>
1000c1e4:	1cc7883a 	add	r3,r3,r19
1000c1e8:	1cc00136 	bltu	r3,r19,1000c1f0 <__umoddi3+0xe0>
1000c1ec:	18813136 	bltu	r3,r2,1000c6b4 <__umoddi3+0x5a4>
1000c1f0:	18a1c83a 	sub	r16,r3,r2
1000c1f4:	b00b883a 	mov	r5,r22
1000c1f8:	8009883a 	mov	r4,r16
1000c1fc:	000c8300 	call	1000c830 <__umodsi3>
1000c200:	b00b883a 	mov	r5,r22
1000c204:	8009883a 	mov	r4,r16
1000c208:	1023883a 	mov	r17,r2
1000c20c:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c210:	100b883a 	mov	r5,r2
1000c214:	b809883a 	mov	r4,r23
1000c218:	8822943a 	slli	r17,r17,16
1000c21c:	000c8880 	call	1000c888 <__mulsi3>
1000c220:	a0ffffcc 	andi	r3,r20,65535
1000c224:	1c46b03a 	or	r3,r3,r17
1000c228:	1880042e 	bgeu	r3,r2,1000c23c <__umoddi3+0x12c>
1000c22c:	1cc7883a 	add	r3,r3,r19
1000c230:	1cc00236 	bltu	r3,r19,1000c23c <__umoddi3+0x12c>
1000c234:	1880012e 	bgeu	r3,r2,1000c23c <__umoddi3+0x12c>
1000c238:	1cc7883a 	add	r3,r3,r19
1000c23c:	1885c83a 	sub	r2,r3,r2
1000c240:	1484d83a 	srl	r2,r2,r18
1000c244:	0007883a 	mov	r3,zero
1000c248:	00005306 	br	1000c398 <__umoddi3+0x288>
1000c24c:	29c05036 	bltu	r5,r7,1000c390 <__umoddi3+0x280>
1000c250:	00bfffd4 	movui	r2,65535
1000c254:	11c05c2e 	bgeu	r2,r7,1000c3c8 <__umoddi3+0x2b8>
1000c258:	00804034 	movhi	r2,256
1000c25c:	10bfffc4 	addi	r2,r2,-1
1000c260:	11c10636 	bltu	r2,r7,1000c67c <__umoddi3+0x56c>
1000c264:	01000404 	movi	r4,16
1000c268:	3904d83a 	srl	r2,r7,r4
1000c26c:	00c40074 	movhi	r3,4097
1000c270:	18c8ce04 	addi	r3,r3,9016
1000c274:	1885883a 	add	r2,r3,r2
1000c278:	14c00003 	ldbu	r19,0(r2)
1000c27c:	00c00804 	movi	r3,32
1000c280:	9927883a 	add	r19,r19,r4
1000c284:	1ce9c83a 	sub	r20,r3,r19
1000c288:	a0005c1e 	bne	r20,zero,1000c3fc <__umoddi3+0x2ec>
1000c28c:	3c400136 	bltu	r7,r17,1000c294 <__umoddi3+0x184>
1000c290:	81810a36 	bltu	r16,r6,1000c6bc <__umoddi3+0x5ac>
1000c294:	8185c83a 	sub	r2,r16,r6
1000c298:	89e3c83a 	sub	r17,r17,r7
1000c29c:	8089803a 	cmpltu	r4,r16,r2
1000c2a0:	8939c83a 	sub	fp,r17,r4
1000c2a4:	e007883a 	mov	r3,fp
1000c2a8:	00003b06 	br	1000c398 <__umoddi3+0x288>
1000c2ac:	3000041e 	bne	r6,zero,1000c2c0 <__umoddi3+0x1b0>
1000c2b0:	000b883a 	mov	r5,zero
1000c2b4:	01000044 	movi	r4,1
1000c2b8:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c2bc:	1027883a 	mov	r19,r2
1000c2c0:	00bfffd4 	movui	r2,65535
1000c2c4:	14c0442e 	bgeu	r2,r19,1000c3d8 <__umoddi3+0x2c8>
1000c2c8:	00804034 	movhi	r2,256
1000c2cc:	10bfffc4 	addi	r2,r2,-1
1000c2d0:	14c0ec36 	bltu	r2,r19,1000c684 <__umoddi3+0x574>
1000c2d4:	00800404 	movi	r2,16
1000c2d8:	9886d83a 	srl	r3,r19,r2
1000c2dc:	01040074 	movhi	r4,4097
1000c2e0:	2108ce04 	addi	r4,r4,9016
1000c2e4:	20c7883a 	add	r3,r4,r3
1000c2e8:	18c00003 	ldbu	r3,0(r3)
1000c2ec:	1887883a 	add	r3,r3,r2
1000c2f0:	00800804 	movi	r2,32
1000c2f4:	10e5c83a 	sub	r18,r2,r3
1000c2f8:	9000ab1e 	bne	r18,zero,1000c5a8 <__umoddi3+0x498>
1000c2fc:	982cd43a 	srli	r22,r19,16
1000c300:	8ce3c83a 	sub	r17,r17,r19
1000c304:	9dffffcc 	andi	r23,r19,65535
1000c308:	b00b883a 	mov	r5,r22
1000c30c:	8809883a 	mov	r4,r17
1000c310:	000c8300 	call	1000c830 <__umodsi3>
1000c314:	b00b883a 	mov	r5,r22
1000c318:	8809883a 	mov	r4,r17
1000c31c:	102b883a 	mov	r21,r2
1000c320:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c324:	b80b883a 	mov	r5,r23
1000c328:	1009883a 	mov	r4,r2
1000c32c:	000c8880 	call	1000c888 <__mulsi3>
1000c330:	a82a943a 	slli	r21,r21,16
1000c334:	a006d43a 	srli	r3,r20,16
1000c338:	1d46b03a 	or	r3,r3,r21
1000c33c:	1880042e 	bgeu	r3,r2,1000c350 <__umoddi3+0x240>
1000c340:	1cc7883a 	add	r3,r3,r19
1000c344:	1cc00236 	bltu	r3,r19,1000c350 <__umoddi3+0x240>
1000c348:	1880012e 	bgeu	r3,r2,1000c350 <__umoddi3+0x240>
1000c34c:	1cc7883a 	add	r3,r3,r19
1000c350:	18a1c83a 	sub	r16,r3,r2
1000c354:	b00b883a 	mov	r5,r22
1000c358:	8009883a 	mov	r4,r16
1000c35c:	000c8300 	call	1000c830 <__umodsi3>
1000c360:	1023883a 	mov	r17,r2
1000c364:	b00b883a 	mov	r5,r22
1000c368:	8009883a 	mov	r4,r16
1000c36c:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c370:	8822943a 	slli	r17,r17,16
1000c374:	b80b883a 	mov	r5,r23
1000c378:	1009883a 	mov	r4,r2
1000c37c:	000c8880 	call	1000c888 <__mulsi3>
1000c380:	a53fffcc 	andi	r20,r20,65535
1000c384:	a446b03a 	or	r3,r20,r17
1000c388:	18bfac2e 	bgeu	r3,r2,1000c23c <__alt_data_end+0xf800c23c>
1000c38c:	003fa706 	br	1000c22c <__alt_data_end+0xf800c22c>
1000c390:	2005883a 	mov	r2,r4
1000c394:	2807883a 	mov	r3,r5
1000c398:	dfc00c17 	ldw	ra,48(sp)
1000c39c:	df000b17 	ldw	fp,44(sp)
1000c3a0:	ddc00a17 	ldw	r23,40(sp)
1000c3a4:	dd800917 	ldw	r22,36(sp)
1000c3a8:	dd400817 	ldw	r21,32(sp)
1000c3ac:	dd000717 	ldw	r20,28(sp)
1000c3b0:	dcc00617 	ldw	r19,24(sp)
1000c3b4:	dc800517 	ldw	r18,20(sp)
1000c3b8:	dc400417 	ldw	r17,16(sp)
1000c3bc:	dc000317 	ldw	r16,12(sp)
1000c3c0:	dec00d04 	addi	sp,sp,52
1000c3c4:	f800283a 	ret
1000c3c8:	04c03fc4 	movi	r19,255
1000c3cc:	99c9803a 	cmpltu	r4,r19,r7
1000c3d0:	200890fa 	slli	r4,r4,3
1000c3d4:	003fa406 	br	1000c268 <__alt_data_end+0xf800c268>
1000c3d8:	00803fc4 	movi	r2,255
1000c3dc:	14c5803a 	cmpltu	r2,r2,r19
1000c3e0:	100490fa 	slli	r2,r2,3
1000c3e4:	003fbc06 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c3e8:	00804034 	movhi	r2,256
1000c3ec:	10bfffc4 	addi	r2,r2,-1
1000c3f0:	1180a636 	bltu	r2,r6,1000c68c <__umoddi3+0x57c>
1000c3f4:	01000404 	movi	r4,16
1000c3f8:	003f5c06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c3fc:	3d0e983a 	sll	r7,r7,r20
1000c400:	34ead83a 	srl	r21,r6,r19
1000c404:	8cc6d83a 	srl	r3,r17,r19
1000c408:	8d10983a 	sll	r8,r17,r20
1000c40c:	3d6ab03a 	or	r21,r7,r21
1000c410:	a82cd43a 	srli	r22,r21,16
1000c414:	84e2d83a 	srl	r17,r16,r19
1000c418:	1809883a 	mov	r4,r3
1000c41c:	b00b883a 	mov	r5,r22
1000c420:	8a22b03a 	or	r17,r17,r8
1000c424:	3524983a 	sll	r18,r6,r20
1000c428:	dc400015 	stw	r17,0(sp)
1000c42c:	d8c00115 	stw	r3,4(sp)
1000c430:	000c8300 	call	1000c830 <__umodsi3>
1000c434:	d8c00117 	ldw	r3,4(sp)
1000c438:	b00b883a 	mov	r5,r22
1000c43c:	1039883a 	mov	fp,r2
1000c440:	1809883a 	mov	r4,r3
1000c444:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c448:	adffffcc 	andi	r23,r21,65535
1000c44c:	100b883a 	mov	r5,r2
1000c450:	b809883a 	mov	r4,r23
1000c454:	1023883a 	mov	r17,r2
1000c458:	000c8880 	call	1000c888 <__mulsi3>
1000c45c:	d9400017 	ldw	r5,0(sp)
1000c460:	e008943a 	slli	r4,fp,16
1000c464:	8520983a 	sll	r16,r16,r20
1000c468:	2806d43a 	srli	r3,r5,16
1000c46c:	1906b03a 	or	r3,r3,r4
1000c470:	1880042e 	bgeu	r3,r2,1000c484 <__umoddi3+0x374>
1000c474:	1d47883a 	add	r3,r3,r21
1000c478:	893fffc4 	addi	r4,r17,-1
1000c47c:	1d40892e 	bgeu	r3,r21,1000c6a4 <__umoddi3+0x594>
1000c480:	2023883a 	mov	r17,r4
1000c484:	18b9c83a 	sub	fp,r3,r2
1000c488:	b00b883a 	mov	r5,r22
1000c48c:	e009883a 	mov	r4,fp
1000c490:	000c8300 	call	1000c830 <__umodsi3>
1000c494:	b00b883a 	mov	r5,r22
1000c498:	e009883a 	mov	r4,fp
1000c49c:	d8800215 	stw	r2,8(sp)
1000c4a0:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c4a4:	100b883a 	mov	r5,r2
1000c4a8:	b809883a 	mov	r4,r23
1000c4ac:	102d883a 	mov	r22,r2
1000c4b0:	000c8880 	call	1000c888 <__mulsi3>
1000c4b4:	d9800217 	ldw	r6,8(sp)
1000c4b8:	d8c00017 	ldw	r3,0(sp)
1000c4bc:	300c943a 	slli	r6,r6,16
1000c4c0:	1a3fffcc 	andi	r8,r3,65535
1000c4c4:	4190b03a 	or	r8,r8,r6
1000c4c8:	4080042e 	bgeu	r8,r2,1000c4dc <__umoddi3+0x3cc>
1000c4cc:	4551883a 	add	r8,r8,r21
1000c4d0:	b0ffffc4 	addi	r3,r22,-1
1000c4d4:	45406f2e 	bgeu	r8,r21,1000c694 <__umoddi3+0x584>
1000c4d8:	182d883a 	mov	r22,r3
1000c4dc:	880e943a 	slli	r7,r17,16
1000c4e0:	9006d43a 	srli	r3,r18,16
1000c4e4:	91bfffcc 	andi	r6,r18,65535
1000c4e8:	3dacb03a 	or	r22,r7,r22
1000c4ec:	b02ed43a 	srli	r23,r22,16
1000c4f0:	b5bfffcc 	andi	r22,r22,65535
1000c4f4:	300b883a 	mov	r5,r6
1000c4f8:	b009883a 	mov	r4,r22
1000c4fc:	40a3c83a 	sub	r17,r8,r2
1000c500:	d8c00115 	stw	r3,4(sp)
1000c504:	d9800215 	stw	r6,8(sp)
1000c508:	000c8880 	call	1000c888 <__mulsi3>
1000c50c:	d9800217 	ldw	r6,8(sp)
1000c510:	b809883a 	mov	r4,r23
1000c514:	1039883a 	mov	fp,r2
1000c518:	300b883a 	mov	r5,r6
1000c51c:	000c8880 	call	1000c888 <__mulsi3>
1000c520:	d8c00117 	ldw	r3,4(sp)
1000c524:	b809883a 	mov	r4,r23
1000c528:	d8800215 	stw	r2,8(sp)
1000c52c:	180b883a 	mov	r5,r3
1000c530:	000c8880 	call	1000c888 <__mulsi3>
1000c534:	d8c00117 	ldw	r3,4(sp)
1000c538:	b009883a 	mov	r4,r22
1000c53c:	102f883a 	mov	r23,r2
1000c540:	180b883a 	mov	r5,r3
1000c544:	000c8880 	call	1000c888 <__mulsi3>
1000c548:	d9800217 	ldw	r6,8(sp)
1000c54c:	e006d43a 	srli	r3,fp,16
1000c550:	1185883a 	add	r2,r2,r6
1000c554:	1885883a 	add	r2,r3,r2
1000c558:	1180022e 	bgeu	r2,r6,1000c564 <__umoddi3+0x454>
1000c55c:	00c00074 	movhi	r3,1
1000c560:	b8ef883a 	add	r23,r23,r3
1000c564:	1006d43a 	srli	r3,r2,16
1000c568:	1004943a 	slli	r2,r2,16
1000c56c:	e73fffcc 	andi	fp,fp,65535
1000c570:	1dc7883a 	add	r3,r3,r23
1000c574:	1739883a 	add	fp,r2,fp
1000c578:	88c03a36 	bltu	r17,r3,1000c664 <__umoddi3+0x554>
1000c57c:	88c05126 	beq	r17,r3,1000c6c4 <__umoddi3+0x5b4>
1000c580:	88c9c83a 	sub	r4,r17,r3
1000c584:	e00f883a 	mov	r7,fp
1000c588:	81cfc83a 	sub	r7,r16,r7
1000c58c:	81c7803a 	cmpltu	r3,r16,r7
1000c590:	20c7c83a 	sub	r3,r4,r3
1000c594:	1cc4983a 	sll	r2,r3,r19
1000c598:	3d0ed83a 	srl	r7,r7,r20
1000c59c:	1d06d83a 	srl	r3,r3,r20
1000c5a0:	11c4b03a 	or	r2,r2,r7
1000c5a4:	003f7c06 	br	1000c398 <__alt_data_end+0xf800c398>
1000c5a8:	9ca6983a 	sll	r19,r19,r18
1000c5ac:	88f8d83a 	srl	fp,r17,r3
1000c5b0:	80c4d83a 	srl	r2,r16,r3
1000c5b4:	982cd43a 	srli	r22,r19,16
1000c5b8:	8ca2983a 	sll	r17,r17,r18
1000c5bc:	e009883a 	mov	r4,fp
1000c5c0:	b00b883a 	mov	r5,r22
1000c5c4:	146ab03a 	or	r21,r2,r17
1000c5c8:	000c8300 	call	1000c830 <__umodsi3>
1000c5cc:	b00b883a 	mov	r5,r22
1000c5d0:	e009883a 	mov	r4,fp
1000c5d4:	1029883a 	mov	r20,r2
1000c5d8:	9dffffcc 	andi	r23,r19,65535
1000c5dc:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c5e0:	b809883a 	mov	r4,r23
1000c5e4:	100b883a 	mov	r5,r2
1000c5e8:	000c8880 	call	1000c888 <__mulsi3>
1000c5ec:	a008943a 	slli	r4,r20,16
1000c5f0:	a806d43a 	srli	r3,r21,16
1000c5f4:	84a8983a 	sll	r20,r16,r18
1000c5f8:	1906b03a 	or	r3,r3,r4
1000c5fc:	1880042e 	bgeu	r3,r2,1000c610 <__umoddi3+0x500>
1000c600:	1cc7883a 	add	r3,r3,r19
1000c604:	1cc00236 	bltu	r3,r19,1000c610 <__umoddi3+0x500>
1000c608:	1880012e 	bgeu	r3,r2,1000c610 <__umoddi3+0x500>
1000c60c:	1cc7883a 	add	r3,r3,r19
1000c610:	18a3c83a 	sub	r17,r3,r2
1000c614:	b00b883a 	mov	r5,r22
1000c618:	8809883a 	mov	r4,r17
1000c61c:	000c8300 	call	1000c830 <__umodsi3>
1000c620:	b00b883a 	mov	r5,r22
1000c624:	8809883a 	mov	r4,r17
1000c628:	1021883a 	mov	r16,r2
1000c62c:	000c7cc0 	call	1000c7cc <__udivsi3>
1000c630:	100b883a 	mov	r5,r2
1000c634:	b809883a 	mov	r4,r23
1000c638:	8020943a 	slli	r16,r16,16
1000c63c:	000c8880 	call	1000c888 <__mulsi3>
1000c640:	a8ffffcc 	andi	r3,r21,65535
1000c644:	1c06b03a 	or	r3,r3,r16
1000c648:	1880042e 	bgeu	r3,r2,1000c65c <__umoddi3+0x54c>
1000c64c:	1cc7883a 	add	r3,r3,r19
1000c650:	1cc00236 	bltu	r3,r19,1000c65c <__umoddi3+0x54c>
1000c654:	1880012e 	bgeu	r3,r2,1000c65c <__umoddi3+0x54c>
1000c658:	1cc7883a 	add	r3,r3,r19
1000c65c:	18a3c83a 	sub	r17,r3,r2
1000c660:	003f2906 	br	1000c308 <__alt_data_end+0xf800c308>
1000c664:	e48fc83a 	sub	r7,fp,r18
1000c668:	1d49c83a 	sub	r4,r3,r21
1000c66c:	e1f9803a 	cmpltu	fp,fp,r7
1000c670:	2739c83a 	sub	fp,r4,fp
1000c674:	8f09c83a 	sub	r4,r17,fp
1000c678:	003fc306 	br	1000c588 <__alt_data_end+0xf800c588>
1000c67c:	01000604 	movi	r4,24
1000c680:	003ef906 	br	1000c268 <__alt_data_end+0xf800c268>
1000c684:	00800604 	movi	r2,24
1000c688:	003f1306 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c68c:	01000604 	movi	r4,24
1000c690:	003eb606 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c694:	40bf902e 	bgeu	r8,r2,1000c4d8 <__alt_data_end+0xf800c4d8>
1000c698:	b5bfff84 	addi	r22,r22,-2
1000c69c:	4551883a 	add	r8,r8,r21
1000c6a0:	003f8e06 	br	1000c4dc <__alt_data_end+0xf800c4dc>
1000c6a4:	18bf762e 	bgeu	r3,r2,1000c480 <__alt_data_end+0xf800c480>
1000c6a8:	8c7fff84 	addi	r17,r17,-2
1000c6ac:	1d47883a 	add	r3,r3,r21
1000c6b0:	003f7406 	br	1000c484 <__alt_data_end+0xf800c484>
1000c6b4:	1cc7883a 	add	r3,r3,r19
1000c6b8:	003ecd06 	br	1000c1f0 <__alt_data_end+0xf800c1f0>
1000c6bc:	8005883a 	mov	r2,r16
1000c6c0:	003ef806 	br	1000c2a4 <__alt_data_end+0xf800c2a4>
1000c6c4:	873fe736 	bltu	r16,fp,1000c664 <__alt_data_end+0xf800c664>
1000c6c8:	e00f883a 	mov	r7,fp
1000c6cc:	0009883a 	mov	r4,zero
1000c6d0:	003fad06 	br	1000c588 <__alt_data_end+0xf800c588>

1000c6d4 <__divsi3>:
1000c6d4:	20001b16 	blt	r4,zero,1000c744 <__divsi3+0x70>
1000c6d8:	000f883a 	mov	r7,zero
1000c6dc:	28001616 	blt	r5,zero,1000c738 <__divsi3+0x64>
1000c6e0:	200d883a 	mov	r6,r4
1000c6e4:	29001a2e 	bgeu	r5,r4,1000c750 <__divsi3+0x7c>
1000c6e8:	00800804 	movi	r2,32
1000c6ec:	00c00044 	movi	r3,1
1000c6f0:	00000106 	br	1000c6f8 <__divsi3+0x24>
1000c6f4:	10000d26 	beq	r2,zero,1000c72c <__divsi3+0x58>
1000c6f8:	294b883a 	add	r5,r5,r5
1000c6fc:	10bfffc4 	addi	r2,r2,-1
1000c700:	18c7883a 	add	r3,r3,r3
1000c704:	293ffb36 	bltu	r5,r4,1000c6f4 <__alt_data_end+0xf800c6f4>
1000c708:	0005883a 	mov	r2,zero
1000c70c:	18000726 	beq	r3,zero,1000c72c <__divsi3+0x58>
1000c710:	0005883a 	mov	r2,zero
1000c714:	31400236 	bltu	r6,r5,1000c720 <__divsi3+0x4c>
1000c718:	314dc83a 	sub	r6,r6,r5
1000c71c:	10c4b03a 	or	r2,r2,r3
1000c720:	1806d07a 	srli	r3,r3,1
1000c724:	280ad07a 	srli	r5,r5,1
1000c728:	183ffa1e 	bne	r3,zero,1000c714 <__alt_data_end+0xf800c714>
1000c72c:	38000126 	beq	r7,zero,1000c734 <__divsi3+0x60>
1000c730:	0085c83a 	sub	r2,zero,r2
1000c734:	f800283a 	ret
1000c738:	014bc83a 	sub	r5,zero,r5
1000c73c:	39c0005c 	xori	r7,r7,1
1000c740:	003fe706 	br	1000c6e0 <__alt_data_end+0xf800c6e0>
1000c744:	0109c83a 	sub	r4,zero,r4
1000c748:	01c00044 	movi	r7,1
1000c74c:	003fe306 	br	1000c6dc <__alt_data_end+0xf800c6dc>
1000c750:	00c00044 	movi	r3,1
1000c754:	003fee06 	br	1000c710 <__alt_data_end+0xf800c710>

1000c758 <__modsi3>:
1000c758:	20001716 	blt	r4,zero,1000c7b8 <__modsi3+0x60>
1000c75c:	000f883a 	mov	r7,zero
1000c760:	2005883a 	mov	r2,r4
1000c764:	28001216 	blt	r5,zero,1000c7b0 <__modsi3+0x58>
1000c768:	2900162e 	bgeu	r5,r4,1000c7c4 <__modsi3+0x6c>
1000c76c:	01800804 	movi	r6,32
1000c770:	00c00044 	movi	r3,1
1000c774:	00000106 	br	1000c77c <__modsi3+0x24>
1000c778:	30000a26 	beq	r6,zero,1000c7a4 <__modsi3+0x4c>
1000c77c:	294b883a 	add	r5,r5,r5
1000c780:	31bfffc4 	addi	r6,r6,-1
1000c784:	18c7883a 	add	r3,r3,r3
1000c788:	293ffb36 	bltu	r5,r4,1000c778 <__alt_data_end+0xf800c778>
1000c78c:	18000526 	beq	r3,zero,1000c7a4 <__modsi3+0x4c>
1000c790:	1806d07a 	srli	r3,r3,1
1000c794:	11400136 	bltu	r2,r5,1000c79c <__modsi3+0x44>
1000c798:	1145c83a 	sub	r2,r2,r5
1000c79c:	280ad07a 	srli	r5,r5,1
1000c7a0:	183ffb1e 	bne	r3,zero,1000c790 <__alt_data_end+0xf800c790>
1000c7a4:	38000126 	beq	r7,zero,1000c7ac <__modsi3+0x54>
1000c7a8:	0085c83a 	sub	r2,zero,r2
1000c7ac:	f800283a 	ret
1000c7b0:	014bc83a 	sub	r5,zero,r5
1000c7b4:	003fec06 	br	1000c768 <__alt_data_end+0xf800c768>
1000c7b8:	0109c83a 	sub	r4,zero,r4
1000c7bc:	01c00044 	movi	r7,1
1000c7c0:	003fe706 	br	1000c760 <__alt_data_end+0xf800c760>
1000c7c4:	00c00044 	movi	r3,1
1000c7c8:	003ff106 	br	1000c790 <__alt_data_end+0xf800c790>

1000c7cc <__udivsi3>:
1000c7cc:	200d883a 	mov	r6,r4
1000c7d0:	2900152e 	bgeu	r5,r4,1000c828 <__udivsi3+0x5c>
1000c7d4:	28001416 	blt	r5,zero,1000c828 <__udivsi3+0x5c>
1000c7d8:	00800804 	movi	r2,32
1000c7dc:	00c00044 	movi	r3,1
1000c7e0:	00000206 	br	1000c7ec <__udivsi3+0x20>
1000c7e4:	10000e26 	beq	r2,zero,1000c820 <__udivsi3+0x54>
1000c7e8:	28000516 	blt	r5,zero,1000c800 <__udivsi3+0x34>
1000c7ec:	294b883a 	add	r5,r5,r5
1000c7f0:	10bfffc4 	addi	r2,r2,-1
1000c7f4:	18c7883a 	add	r3,r3,r3
1000c7f8:	293ffa36 	bltu	r5,r4,1000c7e4 <__alt_data_end+0xf800c7e4>
1000c7fc:	18000826 	beq	r3,zero,1000c820 <__udivsi3+0x54>
1000c800:	0005883a 	mov	r2,zero
1000c804:	31400236 	bltu	r6,r5,1000c810 <__udivsi3+0x44>
1000c808:	314dc83a 	sub	r6,r6,r5
1000c80c:	10c4b03a 	or	r2,r2,r3
1000c810:	1806d07a 	srli	r3,r3,1
1000c814:	280ad07a 	srli	r5,r5,1
1000c818:	183ffa1e 	bne	r3,zero,1000c804 <__alt_data_end+0xf800c804>
1000c81c:	f800283a 	ret
1000c820:	0005883a 	mov	r2,zero
1000c824:	f800283a 	ret
1000c828:	00c00044 	movi	r3,1
1000c82c:	003ff406 	br	1000c800 <__alt_data_end+0xf800c800>

1000c830 <__umodsi3>:
1000c830:	2005883a 	mov	r2,r4
1000c834:	2900122e 	bgeu	r5,r4,1000c880 <__umodsi3+0x50>
1000c838:	28001116 	blt	r5,zero,1000c880 <__umodsi3+0x50>
1000c83c:	01800804 	movi	r6,32
1000c840:	00c00044 	movi	r3,1
1000c844:	00000206 	br	1000c850 <__umodsi3+0x20>
1000c848:	30000c26 	beq	r6,zero,1000c87c <__umodsi3+0x4c>
1000c84c:	28000516 	blt	r5,zero,1000c864 <__umodsi3+0x34>
1000c850:	294b883a 	add	r5,r5,r5
1000c854:	31bfffc4 	addi	r6,r6,-1
1000c858:	18c7883a 	add	r3,r3,r3
1000c85c:	293ffa36 	bltu	r5,r4,1000c848 <__alt_data_end+0xf800c848>
1000c860:	18000626 	beq	r3,zero,1000c87c <__umodsi3+0x4c>
1000c864:	1806d07a 	srli	r3,r3,1
1000c868:	11400136 	bltu	r2,r5,1000c870 <__umodsi3+0x40>
1000c86c:	1145c83a 	sub	r2,r2,r5
1000c870:	280ad07a 	srli	r5,r5,1
1000c874:	183ffb1e 	bne	r3,zero,1000c864 <__alt_data_end+0xf800c864>
1000c878:	f800283a 	ret
1000c87c:	f800283a 	ret
1000c880:	00c00044 	movi	r3,1
1000c884:	003ff706 	br	1000c864 <__alt_data_end+0xf800c864>

1000c888 <__mulsi3>:
1000c888:	0005883a 	mov	r2,zero
1000c88c:	20000726 	beq	r4,zero,1000c8ac <__mulsi3+0x24>
1000c890:	20c0004c 	andi	r3,r4,1
1000c894:	2008d07a 	srli	r4,r4,1
1000c898:	18000126 	beq	r3,zero,1000c8a0 <__mulsi3+0x18>
1000c89c:	1145883a 	add	r2,r2,r5
1000c8a0:	294b883a 	add	r5,r5,r5
1000c8a4:	203ffa1e 	bne	r4,zero,1000c890 <__alt_data_end+0xf800c890>
1000c8a8:	f800283a 	ret
1000c8ac:	f800283a 	ret

1000c8b0 <__adddf3>:
1000c8b0:	02c00434 	movhi	r11,16
1000c8b4:	5affffc4 	addi	r11,r11,-1
1000c8b8:	2806d7fa 	srli	r3,r5,31
1000c8bc:	2ad4703a 	and	r10,r5,r11
1000c8c0:	3ad2703a 	and	r9,r7,r11
1000c8c4:	3804d53a 	srli	r2,r7,20
1000c8c8:	3018d77a 	srli	r12,r6,29
1000c8cc:	280ad53a 	srli	r5,r5,20
1000c8d0:	501490fa 	slli	r10,r10,3
1000c8d4:	2010d77a 	srli	r8,r4,29
1000c8d8:	481290fa 	slli	r9,r9,3
1000c8dc:	380ed7fa 	srli	r7,r7,31
1000c8e0:	defffb04 	addi	sp,sp,-20
1000c8e4:	dc800215 	stw	r18,8(sp)
1000c8e8:	dc400115 	stw	r17,4(sp)
1000c8ec:	dc000015 	stw	r16,0(sp)
1000c8f0:	dfc00415 	stw	ra,16(sp)
1000c8f4:	dcc00315 	stw	r19,12(sp)
1000c8f8:	1c803fcc 	andi	r18,r3,255
1000c8fc:	2c01ffcc 	andi	r16,r5,2047
1000c900:	5210b03a 	or	r8,r10,r8
1000c904:	202290fa 	slli	r17,r4,3
1000c908:	1081ffcc 	andi	r2,r2,2047
1000c90c:	4b12b03a 	or	r9,r9,r12
1000c910:	300c90fa 	slli	r6,r6,3
1000c914:	91c07526 	beq	r18,r7,1000caec <__adddf3+0x23c>
1000c918:	8087c83a 	sub	r3,r16,r2
1000c91c:	00c0ab0e 	bge	zero,r3,1000cbcc <__adddf3+0x31c>
1000c920:	10002a1e 	bne	r2,zero,1000c9cc <__adddf3+0x11c>
1000c924:	4984b03a 	or	r2,r9,r6
1000c928:	1000961e 	bne	r2,zero,1000cb84 <__adddf3+0x2d4>
1000c92c:	888001cc 	andi	r2,r17,7
1000c930:	10000726 	beq	r2,zero,1000c950 <__adddf3+0xa0>
1000c934:	888003cc 	andi	r2,r17,15
1000c938:	00c00104 	movi	r3,4
1000c93c:	10c00426 	beq	r2,r3,1000c950 <__adddf3+0xa0>
1000c940:	88c7883a 	add	r3,r17,r3
1000c944:	1c63803a 	cmpltu	r17,r3,r17
1000c948:	4451883a 	add	r8,r8,r17
1000c94c:	1823883a 	mov	r17,r3
1000c950:	4080202c 	andhi	r2,r8,128
1000c954:	10005926 	beq	r2,zero,1000cabc <__adddf3+0x20c>
1000c958:	84000044 	addi	r16,r16,1
1000c95c:	0081ffc4 	movi	r2,2047
1000c960:	8080ba26 	beq	r16,r2,1000cc4c <__adddf3+0x39c>
1000c964:	00bfe034 	movhi	r2,65408
1000c968:	10bfffc4 	addi	r2,r2,-1
1000c96c:	4090703a 	and	r8,r8,r2
1000c970:	4004977a 	slli	r2,r8,29
1000c974:	4010927a 	slli	r8,r8,9
1000c978:	8822d0fa 	srli	r17,r17,3
1000c97c:	8401ffcc 	andi	r16,r16,2047
1000c980:	4010d33a 	srli	r8,r8,12
1000c984:	9007883a 	mov	r3,r18
1000c988:	1444b03a 	or	r2,r2,r17
1000c98c:	8401ffcc 	andi	r16,r16,2047
1000c990:	8020953a 	slli	r16,r16,20
1000c994:	18c03fcc 	andi	r3,r3,255
1000c998:	01000434 	movhi	r4,16
1000c99c:	213fffc4 	addi	r4,r4,-1
1000c9a0:	180697fa 	slli	r3,r3,31
1000c9a4:	4110703a 	and	r8,r8,r4
1000c9a8:	4410b03a 	or	r8,r8,r16
1000c9ac:	40c6b03a 	or	r3,r8,r3
1000c9b0:	dfc00417 	ldw	ra,16(sp)
1000c9b4:	dcc00317 	ldw	r19,12(sp)
1000c9b8:	dc800217 	ldw	r18,8(sp)
1000c9bc:	dc400117 	ldw	r17,4(sp)
1000c9c0:	dc000017 	ldw	r16,0(sp)
1000c9c4:	dec00504 	addi	sp,sp,20
1000c9c8:	f800283a 	ret
1000c9cc:	0081ffc4 	movi	r2,2047
1000c9d0:	80bfd626 	beq	r16,r2,1000c92c <__alt_data_end+0xf800c92c>
1000c9d4:	4a402034 	orhi	r9,r9,128
1000c9d8:	00800e04 	movi	r2,56
1000c9dc:	10c09f16 	blt	r2,r3,1000cc5c <__adddf3+0x3ac>
1000c9e0:	008007c4 	movi	r2,31
1000c9e4:	10c0c216 	blt	r2,r3,1000ccf0 <__adddf3+0x440>
1000c9e8:	00800804 	movi	r2,32
1000c9ec:	10c5c83a 	sub	r2,r2,r3
1000c9f0:	488a983a 	sll	r5,r9,r2
1000c9f4:	30c8d83a 	srl	r4,r6,r3
1000c9f8:	3084983a 	sll	r2,r6,r2
1000c9fc:	48c6d83a 	srl	r3,r9,r3
1000ca00:	290cb03a 	or	r6,r5,r4
1000ca04:	1004c03a 	cmpne	r2,r2,zero
1000ca08:	308cb03a 	or	r6,r6,r2
1000ca0c:	898dc83a 	sub	r6,r17,r6
1000ca10:	89a3803a 	cmpltu	r17,r17,r6
1000ca14:	40d1c83a 	sub	r8,r8,r3
1000ca18:	4451c83a 	sub	r8,r8,r17
1000ca1c:	3023883a 	mov	r17,r6
1000ca20:	4080202c 	andhi	r2,r8,128
1000ca24:	10002326 	beq	r2,zero,1000cab4 <__adddf3+0x204>
1000ca28:	04c02034 	movhi	r19,128
1000ca2c:	9cffffc4 	addi	r19,r19,-1
1000ca30:	44e6703a 	and	r19,r8,r19
1000ca34:	98007626 	beq	r19,zero,1000cc10 <__adddf3+0x360>
1000ca38:	9809883a 	mov	r4,r19
1000ca3c:	000f0ec0 	call	1000f0ec <__clzsi2>
1000ca40:	10fffe04 	addi	r3,r2,-8
1000ca44:	010007c4 	movi	r4,31
1000ca48:	20c07716 	blt	r4,r3,1000cc28 <__adddf3+0x378>
1000ca4c:	00800804 	movi	r2,32
1000ca50:	10c5c83a 	sub	r2,r2,r3
1000ca54:	8884d83a 	srl	r2,r17,r2
1000ca58:	98d0983a 	sll	r8,r19,r3
1000ca5c:	88e2983a 	sll	r17,r17,r3
1000ca60:	1204b03a 	or	r2,r2,r8
1000ca64:	1c007416 	blt	r3,r16,1000cc38 <__adddf3+0x388>
1000ca68:	1c21c83a 	sub	r16,r3,r16
1000ca6c:	82000044 	addi	r8,r16,1
1000ca70:	00c007c4 	movi	r3,31
1000ca74:	1a009116 	blt	r3,r8,1000ccbc <__adddf3+0x40c>
1000ca78:	00c00804 	movi	r3,32
1000ca7c:	1a07c83a 	sub	r3,r3,r8
1000ca80:	8a08d83a 	srl	r4,r17,r8
1000ca84:	88e2983a 	sll	r17,r17,r3
1000ca88:	10c6983a 	sll	r3,r2,r3
1000ca8c:	1210d83a 	srl	r8,r2,r8
1000ca90:	8804c03a 	cmpne	r2,r17,zero
1000ca94:	1906b03a 	or	r3,r3,r4
1000ca98:	18a2b03a 	or	r17,r3,r2
1000ca9c:	0021883a 	mov	r16,zero
1000caa0:	003fa206 	br	1000c92c <__alt_data_end+0xf800c92c>
1000caa4:	1890b03a 	or	r8,r3,r2
1000caa8:	40017d26 	beq	r8,zero,1000d0a0 <__adddf3+0x7f0>
1000caac:	1011883a 	mov	r8,r2
1000cab0:	1823883a 	mov	r17,r3
1000cab4:	888001cc 	andi	r2,r17,7
1000cab8:	103f9e1e 	bne	r2,zero,1000c934 <__alt_data_end+0xf800c934>
1000cabc:	4004977a 	slli	r2,r8,29
1000cac0:	8822d0fa 	srli	r17,r17,3
1000cac4:	4010d0fa 	srli	r8,r8,3
1000cac8:	9007883a 	mov	r3,r18
1000cacc:	1444b03a 	or	r2,r2,r17
1000cad0:	0101ffc4 	movi	r4,2047
1000cad4:	81002426 	beq	r16,r4,1000cb68 <__adddf3+0x2b8>
1000cad8:	8120703a 	and	r16,r16,r4
1000cadc:	01000434 	movhi	r4,16
1000cae0:	213fffc4 	addi	r4,r4,-1
1000cae4:	4110703a 	and	r8,r8,r4
1000cae8:	003fa806 	br	1000c98c <__alt_data_end+0xf800c98c>
1000caec:	8089c83a 	sub	r4,r16,r2
1000caf0:	01005e0e 	bge	zero,r4,1000cc6c <__adddf3+0x3bc>
1000caf4:	10002b26 	beq	r2,zero,1000cba4 <__adddf3+0x2f4>
1000caf8:	0081ffc4 	movi	r2,2047
1000cafc:	80bf8b26 	beq	r16,r2,1000c92c <__alt_data_end+0xf800c92c>
1000cb00:	4a402034 	orhi	r9,r9,128
1000cb04:	00800e04 	movi	r2,56
1000cb08:	1100a40e 	bge	r2,r4,1000cd9c <__adddf3+0x4ec>
1000cb0c:	498cb03a 	or	r6,r9,r6
1000cb10:	300ac03a 	cmpne	r5,r6,zero
1000cb14:	0013883a 	mov	r9,zero
1000cb18:	2c4b883a 	add	r5,r5,r17
1000cb1c:	2c63803a 	cmpltu	r17,r5,r17
1000cb20:	4a11883a 	add	r8,r9,r8
1000cb24:	8a11883a 	add	r8,r17,r8
1000cb28:	2823883a 	mov	r17,r5
1000cb2c:	4080202c 	andhi	r2,r8,128
1000cb30:	103fe026 	beq	r2,zero,1000cab4 <__alt_data_end+0xf800cab4>
1000cb34:	84000044 	addi	r16,r16,1
1000cb38:	0081ffc4 	movi	r2,2047
1000cb3c:	8080d226 	beq	r16,r2,1000ce88 <__adddf3+0x5d8>
1000cb40:	00bfe034 	movhi	r2,65408
1000cb44:	10bfffc4 	addi	r2,r2,-1
1000cb48:	4090703a 	and	r8,r8,r2
1000cb4c:	880ad07a 	srli	r5,r17,1
1000cb50:	400897fa 	slli	r4,r8,31
1000cb54:	88c0004c 	andi	r3,r17,1
1000cb58:	28e2b03a 	or	r17,r5,r3
1000cb5c:	4010d07a 	srli	r8,r8,1
1000cb60:	2462b03a 	or	r17,r4,r17
1000cb64:	003f7106 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cb68:	4088b03a 	or	r4,r8,r2
1000cb6c:	20014526 	beq	r4,zero,1000d084 <__adddf3+0x7d4>
1000cb70:	01000434 	movhi	r4,16
1000cb74:	42000234 	orhi	r8,r8,8
1000cb78:	213fffc4 	addi	r4,r4,-1
1000cb7c:	4110703a 	and	r8,r8,r4
1000cb80:	003f8206 	br	1000c98c <__alt_data_end+0xf800c98c>
1000cb84:	18ffffc4 	addi	r3,r3,-1
1000cb88:	1800491e 	bne	r3,zero,1000ccb0 <__adddf3+0x400>
1000cb8c:	898bc83a 	sub	r5,r17,r6
1000cb90:	8963803a 	cmpltu	r17,r17,r5
1000cb94:	4251c83a 	sub	r8,r8,r9
1000cb98:	4451c83a 	sub	r8,r8,r17
1000cb9c:	2823883a 	mov	r17,r5
1000cba0:	003f9f06 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cba4:	4984b03a 	or	r2,r9,r6
1000cba8:	103f6026 	beq	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cbac:	213fffc4 	addi	r4,r4,-1
1000cbb0:	2000931e 	bne	r4,zero,1000ce00 <__adddf3+0x550>
1000cbb4:	898d883a 	add	r6,r17,r6
1000cbb8:	3463803a 	cmpltu	r17,r6,r17
1000cbbc:	4251883a 	add	r8,r8,r9
1000cbc0:	8a11883a 	add	r8,r17,r8
1000cbc4:	3023883a 	mov	r17,r6
1000cbc8:	003fd806 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000cbcc:	1800541e 	bne	r3,zero,1000cd20 <__adddf3+0x470>
1000cbd0:	80800044 	addi	r2,r16,1
1000cbd4:	1081ffcc 	andi	r2,r2,2047
1000cbd8:	00c00044 	movi	r3,1
1000cbdc:	1880a00e 	bge	r3,r2,1000ce60 <__adddf3+0x5b0>
1000cbe0:	8989c83a 	sub	r4,r17,r6
1000cbe4:	8905803a 	cmpltu	r2,r17,r4
1000cbe8:	4267c83a 	sub	r19,r8,r9
1000cbec:	98a7c83a 	sub	r19,r19,r2
1000cbf0:	9880202c 	andhi	r2,r19,128
1000cbf4:	10006326 	beq	r2,zero,1000cd84 <__adddf3+0x4d4>
1000cbf8:	3463c83a 	sub	r17,r6,r17
1000cbfc:	4a07c83a 	sub	r3,r9,r8
1000cc00:	344d803a 	cmpltu	r6,r6,r17
1000cc04:	19a7c83a 	sub	r19,r3,r6
1000cc08:	3825883a 	mov	r18,r7
1000cc0c:	983f8a1e 	bne	r19,zero,1000ca38 <__alt_data_end+0xf800ca38>
1000cc10:	8809883a 	mov	r4,r17
1000cc14:	000f0ec0 	call	1000f0ec <__clzsi2>
1000cc18:	10800804 	addi	r2,r2,32
1000cc1c:	10fffe04 	addi	r3,r2,-8
1000cc20:	010007c4 	movi	r4,31
1000cc24:	20ff890e 	bge	r4,r3,1000ca4c <__alt_data_end+0xf800ca4c>
1000cc28:	10bff604 	addi	r2,r2,-40
1000cc2c:	8884983a 	sll	r2,r17,r2
1000cc30:	0023883a 	mov	r17,zero
1000cc34:	1c3f8c0e 	bge	r3,r16,1000ca68 <__alt_data_end+0xf800ca68>
1000cc38:	023fe034 	movhi	r8,65408
1000cc3c:	423fffc4 	addi	r8,r8,-1
1000cc40:	80e1c83a 	sub	r16,r16,r3
1000cc44:	1210703a 	and	r8,r2,r8
1000cc48:	003f3806 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cc4c:	9007883a 	mov	r3,r18
1000cc50:	0011883a 	mov	r8,zero
1000cc54:	0005883a 	mov	r2,zero
1000cc58:	003f4c06 	br	1000c98c <__alt_data_end+0xf800c98c>
1000cc5c:	498cb03a 	or	r6,r9,r6
1000cc60:	300cc03a 	cmpne	r6,r6,zero
1000cc64:	0007883a 	mov	r3,zero
1000cc68:	003f6806 	br	1000ca0c <__alt_data_end+0xf800ca0c>
1000cc6c:	20009c1e 	bne	r4,zero,1000cee0 <__adddf3+0x630>
1000cc70:	80800044 	addi	r2,r16,1
1000cc74:	1141ffcc 	andi	r5,r2,2047
1000cc78:	01000044 	movi	r4,1
1000cc7c:	2140670e 	bge	r4,r5,1000ce1c <__adddf3+0x56c>
1000cc80:	0101ffc4 	movi	r4,2047
1000cc84:	11007f26 	beq	r2,r4,1000ce84 <__adddf3+0x5d4>
1000cc88:	898d883a 	add	r6,r17,r6
1000cc8c:	4247883a 	add	r3,r8,r9
1000cc90:	3451803a 	cmpltu	r8,r6,r17
1000cc94:	40d1883a 	add	r8,r8,r3
1000cc98:	402297fa 	slli	r17,r8,31
1000cc9c:	300cd07a 	srli	r6,r6,1
1000cca0:	4010d07a 	srli	r8,r8,1
1000cca4:	1021883a 	mov	r16,r2
1000cca8:	89a2b03a 	or	r17,r17,r6
1000ccac:	003f1f06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000ccb0:	0081ffc4 	movi	r2,2047
1000ccb4:	80bf481e 	bne	r16,r2,1000c9d8 <__alt_data_end+0xf800c9d8>
1000ccb8:	003f1c06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000ccbc:	843ff844 	addi	r16,r16,-31
1000ccc0:	01000804 	movi	r4,32
1000ccc4:	1406d83a 	srl	r3,r2,r16
1000ccc8:	41005026 	beq	r8,r4,1000ce0c <__adddf3+0x55c>
1000cccc:	01001004 	movi	r4,64
1000ccd0:	2211c83a 	sub	r8,r4,r8
1000ccd4:	1204983a 	sll	r2,r2,r8
1000ccd8:	88a2b03a 	or	r17,r17,r2
1000ccdc:	8822c03a 	cmpne	r17,r17,zero
1000cce0:	1c62b03a 	or	r17,r3,r17
1000cce4:	0011883a 	mov	r8,zero
1000cce8:	0021883a 	mov	r16,zero
1000ccec:	003f7106 	br	1000cab4 <__alt_data_end+0xf800cab4>
1000ccf0:	193ff804 	addi	r4,r3,-32
1000ccf4:	00800804 	movi	r2,32
1000ccf8:	4908d83a 	srl	r4,r9,r4
1000ccfc:	18804526 	beq	r3,r2,1000ce14 <__adddf3+0x564>
1000cd00:	00801004 	movi	r2,64
1000cd04:	10c5c83a 	sub	r2,r2,r3
1000cd08:	4886983a 	sll	r3,r9,r2
1000cd0c:	198cb03a 	or	r6,r3,r6
1000cd10:	300cc03a 	cmpne	r6,r6,zero
1000cd14:	218cb03a 	or	r6,r4,r6
1000cd18:	0007883a 	mov	r3,zero
1000cd1c:	003f3b06 	br	1000ca0c <__alt_data_end+0xf800ca0c>
1000cd20:	80002a26 	beq	r16,zero,1000cdcc <__adddf3+0x51c>
1000cd24:	0101ffc4 	movi	r4,2047
1000cd28:	11006826 	beq	r2,r4,1000cecc <__adddf3+0x61c>
1000cd2c:	00c7c83a 	sub	r3,zero,r3
1000cd30:	42002034 	orhi	r8,r8,128
1000cd34:	01000e04 	movi	r4,56
1000cd38:	20c07c16 	blt	r4,r3,1000cf2c <__adddf3+0x67c>
1000cd3c:	010007c4 	movi	r4,31
1000cd40:	20c0da16 	blt	r4,r3,1000d0ac <__adddf3+0x7fc>
1000cd44:	01000804 	movi	r4,32
1000cd48:	20c9c83a 	sub	r4,r4,r3
1000cd4c:	4114983a 	sll	r10,r8,r4
1000cd50:	88cad83a 	srl	r5,r17,r3
1000cd54:	8908983a 	sll	r4,r17,r4
1000cd58:	40c6d83a 	srl	r3,r8,r3
1000cd5c:	5162b03a 	or	r17,r10,r5
1000cd60:	2008c03a 	cmpne	r4,r4,zero
1000cd64:	8922b03a 	or	r17,r17,r4
1000cd68:	3463c83a 	sub	r17,r6,r17
1000cd6c:	48c7c83a 	sub	r3,r9,r3
1000cd70:	344d803a 	cmpltu	r6,r6,r17
1000cd74:	1991c83a 	sub	r8,r3,r6
1000cd78:	1021883a 	mov	r16,r2
1000cd7c:	3825883a 	mov	r18,r7
1000cd80:	003f2706 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cd84:	24d0b03a 	or	r8,r4,r19
1000cd88:	40001b1e 	bne	r8,zero,1000cdf8 <__adddf3+0x548>
1000cd8c:	0005883a 	mov	r2,zero
1000cd90:	0007883a 	mov	r3,zero
1000cd94:	0021883a 	mov	r16,zero
1000cd98:	003f4d06 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000cd9c:	008007c4 	movi	r2,31
1000cda0:	11003c16 	blt	r2,r4,1000ce94 <__adddf3+0x5e4>
1000cda4:	00800804 	movi	r2,32
1000cda8:	1105c83a 	sub	r2,r2,r4
1000cdac:	488e983a 	sll	r7,r9,r2
1000cdb0:	310ad83a 	srl	r5,r6,r4
1000cdb4:	3084983a 	sll	r2,r6,r2
1000cdb8:	4912d83a 	srl	r9,r9,r4
1000cdbc:	394ab03a 	or	r5,r7,r5
1000cdc0:	1004c03a 	cmpne	r2,r2,zero
1000cdc4:	288ab03a 	or	r5,r5,r2
1000cdc8:	003f5306 	br	1000cb18 <__alt_data_end+0xf800cb18>
1000cdcc:	4448b03a 	or	r4,r8,r17
1000cdd0:	20003e26 	beq	r4,zero,1000cecc <__adddf3+0x61c>
1000cdd4:	00c6303a 	nor	r3,zero,r3
1000cdd8:	18003a1e 	bne	r3,zero,1000cec4 <__adddf3+0x614>
1000cddc:	3463c83a 	sub	r17,r6,r17
1000cde0:	4a07c83a 	sub	r3,r9,r8
1000cde4:	344d803a 	cmpltu	r6,r6,r17
1000cde8:	1991c83a 	sub	r8,r3,r6
1000cdec:	1021883a 	mov	r16,r2
1000cdf0:	3825883a 	mov	r18,r7
1000cdf4:	003f0a06 	br	1000ca20 <__alt_data_end+0xf800ca20>
1000cdf8:	2023883a 	mov	r17,r4
1000cdfc:	003f0d06 	br	1000ca34 <__alt_data_end+0xf800ca34>
1000ce00:	0081ffc4 	movi	r2,2047
1000ce04:	80bf3f1e 	bne	r16,r2,1000cb04 <__alt_data_end+0xf800cb04>
1000ce08:	003ec806 	br	1000c92c <__alt_data_end+0xf800c92c>
1000ce0c:	0005883a 	mov	r2,zero
1000ce10:	003fb106 	br	1000ccd8 <__alt_data_end+0xf800ccd8>
1000ce14:	0007883a 	mov	r3,zero
1000ce18:	003fbc06 	br	1000cd0c <__alt_data_end+0xf800cd0c>
1000ce1c:	4444b03a 	or	r2,r8,r17
1000ce20:	8000871e 	bne	r16,zero,1000d040 <__adddf3+0x790>
1000ce24:	1000ba26 	beq	r2,zero,1000d110 <__adddf3+0x860>
1000ce28:	4984b03a 	or	r2,r9,r6
1000ce2c:	103ebf26 	beq	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000ce30:	8985883a 	add	r2,r17,r6
1000ce34:	4247883a 	add	r3,r8,r9
1000ce38:	1451803a 	cmpltu	r8,r2,r17
1000ce3c:	40d1883a 	add	r8,r8,r3
1000ce40:	40c0202c 	andhi	r3,r8,128
1000ce44:	1023883a 	mov	r17,r2
1000ce48:	183f1a26 	beq	r3,zero,1000cab4 <__alt_data_end+0xf800cab4>
1000ce4c:	00bfe034 	movhi	r2,65408
1000ce50:	10bfffc4 	addi	r2,r2,-1
1000ce54:	2021883a 	mov	r16,r4
1000ce58:	4090703a 	and	r8,r8,r2
1000ce5c:	003eb306 	br	1000c92c <__alt_data_end+0xf800c92c>
1000ce60:	4444b03a 	or	r2,r8,r17
1000ce64:	8000291e 	bne	r16,zero,1000cf0c <__adddf3+0x65c>
1000ce68:	10004b1e 	bne	r2,zero,1000cf98 <__adddf3+0x6e8>
1000ce6c:	4990b03a 	or	r8,r9,r6
1000ce70:	40008b26 	beq	r8,zero,1000d0a0 <__adddf3+0x7f0>
1000ce74:	4811883a 	mov	r8,r9
1000ce78:	3023883a 	mov	r17,r6
1000ce7c:	3825883a 	mov	r18,r7
1000ce80:	003eaa06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000ce84:	1021883a 	mov	r16,r2
1000ce88:	0011883a 	mov	r8,zero
1000ce8c:	0005883a 	mov	r2,zero
1000ce90:	003f0f06 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000ce94:	217ff804 	addi	r5,r4,-32
1000ce98:	00800804 	movi	r2,32
1000ce9c:	494ad83a 	srl	r5,r9,r5
1000cea0:	20807d26 	beq	r4,r2,1000d098 <__adddf3+0x7e8>
1000cea4:	00801004 	movi	r2,64
1000cea8:	1109c83a 	sub	r4,r2,r4
1000ceac:	4912983a 	sll	r9,r9,r4
1000ceb0:	498cb03a 	or	r6,r9,r6
1000ceb4:	300cc03a 	cmpne	r6,r6,zero
1000ceb8:	298ab03a 	or	r5,r5,r6
1000cebc:	0013883a 	mov	r9,zero
1000cec0:	003f1506 	br	1000cb18 <__alt_data_end+0xf800cb18>
1000cec4:	0101ffc4 	movi	r4,2047
1000cec8:	113f9a1e 	bne	r2,r4,1000cd34 <__alt_data_end+0xf800cd34>
1000cecc:	4811883a 	mov	r8,r9
1000ced0:	3023883a 	mov	r17,r6
1000ced4:	1021883a 	mov	r16,r2
1000ced8:	3825883a 	mov	r18,r7
1000cedc:	003e9306 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cee0:	8000161e 	bne	r16,zero,1000cf3c <__adddf3+0x68c>
1000cee4:	444ab03a 	or	r5,r8,r17
1000cee8:	28005126 	beq	r5,zero,1000d030 <__adddf3+0x780>
1000ceec:	0108303a 	nor	r4,zero,r4
1000cef0:	20004d1e 	bne	r4,zero,1000d028 <__adddf3+0x778>
1000cef4:	89a3883a 	add	r17,r17,r6
1000cef8:	4253883a 	add	r9,r8,r9
1000cefc:	898d803a 	cmpltu	r6,r17,r6
1000cf00:	3251883a 	add	r8,r6,r9
1000cf04:	1021883a 	mov	r16,r2
1000cf08:	003f0806 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000cf0c:	1000301e 	bne	r2,zero,1000cfd0 <__adddf3+0x720>
1000cf10:	4984b03a 	or	r2,r9,r6
1000cf14:	10007126 	beq	r2,zero,1000d0dc <__adddf3+0x82c>
1000cf18:	4811883a 	mov	r8,r9
1000cf1c:	3023883a 	mov	r17,r6
1000cf20:	3825883a 	mov	r18,r7
1000cf24:	0401ffc4 	movi	r16,2047
1000cf28:	003e8006 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cf2c:	4462b03a 	or	r17,r8,r17
1000cf30:	8822c03a 	cmpne	r17,r17,zero
1000cf34:	0007883a 	mov	r3,zero
1000cf38:	003f8b06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000cf3c:	0141ffc4 	movi	r5,2047
1000cf40:	11403b26 	beq	r2,r5,1000d030 <__adddf3+0x780>
1000cf44:	0109c83a 	sub	r4,zero,r4
1000cf48:	42002034 	orhi	r8,r8,128
1000cf4c:	01400e04 	movi	r5,56
1000cf50:	29006716 	blt	r5,r4,1000d0f0 <__adddf3+0x840>
1000cf54:	014007c4 	movi	r5,31
1000cf58:	29007016 	blt	r5,r4,1000d11c <__adddf3+0x86c>
1000cf5c:	01400804 	movi	r5,32
1000cf60:	290bc83a 	sub	r5,r5,r4
1000cf64:	4154983a 	sll	r10,r8,r5
1000cf68:	890ed83a 	srl	r7,r17,r4
1000cf6c:	894a983a 	sll	r5,r17,r5
1000cf70:	4108d83a 	srl	r4,r8,r4
1000cf74:	51e2b03a 	or	r17,r10,r7
1000cf78:	280ac03a 	cmpne	r5,r5,zero
1000cf7c:	8962b03a 	or	r17,r17,r5
1000cf80:	89a3883a 	add	r17,r17,r6
1000cf84:	2253883a 	add	r9,r4,r9
1000cf88:	898d803a 	cmpltu	r6,r17,r6
1000cf8c:	3251883a 	add	r8,r6,r9
1000cf90:	1021883a 	mov	r16,r2
1000cf94:	003ee506 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000cf98:	4984b03a 	or	r2,r9,r6
1000cf9c:	103e6326 	beq	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cfa0:	8987c83a 	sub	r3,r17,r6
1000cfa4:	88c9803a 	cmpltu	r4,r17,r3
1000cfa8:	4245c83a 	sub	r2,r8,r9
1000cfac:	1105c83a 	sub	r2,r2,r4
1000cfb0:	1100202c 	andhi	r4,r2,128
1000cfb4:	203ebb26 	beq	r4,zero,1000caa4 <__alt_data_end+0xf800caa4>
1000cfb8:	3463c83a 	sub	r17,r6,r17
1000cfbc:	4a07c83a 	sub	r3,r9,r8
1000cfc0:	344d803a 	cmpltu	r6,r6,r17
1000cfc4:	1991c83a 	sub	r8,r3,r6
1000cfc8:	3825883a 	mov	r18,r7
1000cfcc:	003e5706 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cfd0:	4984b03a 	or	r2,r9,r6
1000cfd4:	10002e26 	beq	r2,zero,1000d090 <__adddf3+0x7e0>
1000cfd8:	4004d0fa 	srli	r2,r8,3
1000cfdc:	8822d0fa 	srli	r17,r17,3
1000cfe0:	4010977a 	slli	r8,r8,29
1000cfe4:	10c0022c 	andhi	r3,r2,8
1000cfe8:	4462b03a 	or	r17,r8,r17
1000cfec:	18000826 	beq	r3,zero,1000d010 <__adddf3+0x760>
1000cff0:	4808d0fa 	srli	r4,r9,3
1000cff4:	20c0022c 	andhi	r3,r4,8
1000cff8:	1800051e 	bne	r3,zero,1000d010 <__adddf3+0x760>
1000cffc:	300cd0fa 	srli	r6,r6,3
1000d000:	4806977a 	slli	r3,r9,29
1000d004:	2005883a 	mov	r2,r4
1000d008:	3825883a 	mov	r18,r7
1000d00c:	19a2b03a 	or	r17,r3,r6
1000d010:	8810d77a 	srli	r8,r17,29
1000d014:	100490fa 	slli	r2,r2,3
1000d018:	882290fa 	slli	r17,r17,3
1000d01c:	0401ffc4 	movi	r16,2047
1000d020:	4090b03a 	or	r8,r8,r2
1000d024:	003e4106 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d028:	0141ffc4 	movi	r5,2047
1000d02c:	117fc71e 	bne	r2,r5,1000cf4c <__alt_data_end+0xf800cf4c>
1000d030:	4811883a 	mov	r8,r9
1000d034:	3023883a 	mov	r17,r6
1000d038:	1021883a 	mov	r16,r2
1000d03c:	003e3b06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d040:	10002f26 	beq	r2,zero,1000d100 <__adddf3+0x850>
1000d044:	4984b03a 	or	r2,r9,r6
1000d048:	10001126 	beq	r2,zero,1000d090 <__adddf3+0x7e0>
1000d04c:	4004d0fa 	srli	r2,r8,3
1000d050:	8822d0fa 	srli	r17,r17,3
1000d054:	4010977a 	slli	r8,r8,29
1000d058:	10c0022c 	andhi	r3,r2,8
1000d05c:	4462b03a 	or	r17,r8,r17
1000d060:	183feb26 	beq	r3,zero,1000d010 <__alt_data_end+0xf800d010>
1000d064:	4808d0fa 	srli	r4,r9,3
1000d068:	20c0022c 	andhi	r3,r4,8
1000d06c:	183fe81e 	bne	r3,zero,1000d010 <__alt_data_end+0xf800d010>
1000d070:	300cd0fa 	srli	r6,r6,3
1000d074:	4806977a 	slli	r3,r9,29
1000d078:	2005883a 	mov	r2,r4
1000d07c:	19a2b03a 	or	r17,r3,r6
1000d080:	003fe306 	br	1000d010 <__alt_data_end+0xf800d010>
1000d084:	0011883a 	mov	r8,zero
1000d088:	0005883a 	mov	r2,zero
1000d08c:	003e3f06 	br	1000c98c <__alt_data_end+0xf800c98c>
1000d090:	0401ffc4 	movi	r16,2047
1000d094:	003e2506 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d098:	0013883a 	mov	r9,zero
1000d09c:	003f8406 	br	1000ceb0 <__alt_data_end+0xf800ceb0>
1000d0a0:	0005883a 	mov	r2,zero
1000d0a4:	0007883a 	mov	r3,zero
1000d0a8:	003e8906 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000d0ac:	197ff804 	addi	r5,r3,-32
1000d0b0:	01000804 	movi	r4,32
1000d0b4:	414ad83a 	srl	r5,r8,r5
1000d0b8:	19002426 	beq	r3,r4,1000d14c <__adddf3+0x89c>
1000d0bc:	01001004 	movi	r4,64
1000d0c0:	20c7c83a 	sub	r3,r4,r3
1000d0c4:	40c6983a 	sll	r3,r8,r3
1000d0c8:	1c46b03a 	or	r3,r3,r17
1000d0cc:	1806c03a 	cmpne	r3,r3,zero
1000d0d0:	28e2b03a 	or	r17,r5,r3
1000d0d4:	0007883a 	mov	r3,zero
1000d0d8:	003f2306 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d0dc:	0007883a 	mov	r3,zero
1000d0e0:	5811883a 	mov	r8,r11
1000d0e4:	00bfffc4 	movi	r2,-1
1000d0e8:	0401ffc4 	movi	r16,2047
1000d0ec:	003e7806 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000d0f0:	4462b03a 	or	r17,r8,r17
1000d0f4:	8822c03a 	cmpne	r17,r17,zero
1000d0f8:	0009883a 	mov	r4,zero
1000d0fc:	003fa006 	br	1000cf80 <__alt_data_end+0xf800cf80>
1000d100:	4811883a 	mov	r8,r9
1000d104:	3023883a 	mov	r17,r6
1000d108:	0401ffc4 	movi	r16,2047
1000d10c:	003e0706 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d110:	4811883a 	mov	r8,r9
1000d114:	3023883a 	mov	r17,r6
1000d118:	003e0406 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d11c:	21fff804 	addi	r7,r4,-32
1000d120:	01400804 	movi	r5,32
1000d124:	41ced83a 	srl	r7,r8,r7
1000d128:	21400a26 	beq	r4,r5,1000d154 <__adddf3+0x8a4>
1000d12c:	01401004 	movi	r5,64
1000d130:	2909c83a 	sub	r4,r5,r4
1000d134:	4108983a 	sll	r4,r8,r4
1000d138:	2448b03a 	or	r4,r4,r17
1000d13c:	2008c03a 	cmpne	r4,r4,zero
1000d140:	3922b03a 	or	r17,r7,r4
1000d144:	0009883a 	mov	r4,zero
1000d148:	003f8d06 	br	1000cf80 <__alt_data_end+0xf800cf80>
1000d14c:	0007883a 	mov	r3,zero
1000d150:	003fdd06 	br	1000d0c8 <__alt_data_end+0xf800d0c8>
1000d154:	0009883a 	mov	r4,zero
1000d158:	003ff706 	br	1000d138 <__alt_data_end+0xf800d138>

1000d15c <__divdf3>:
1000d15c:	defff004 	addi	sp,sp,-64
1000d160:	dc800815 	stw	r18,32(sp)
1000d164:	2824d53a 	srli	r18,r5,20
1000d168:	dd800c15 	stw	r22,48(sp)
1000d16c:	282cd7fa 	srli	r22,r5,31
1000d170:	dc000615 	stw	r16,24(sp)
1000d174:	04000434 	movhi	r16,16
1000d178:	843fffc4 	addi	r16,r16,-1
1000d17c:	dfc00f15 	stw	ra,60(sp)
1000d180:	df000e15 	stw	fp,56(sp)
1000d184:	ddc00d15 	stw	r23,52(sp)
1000d188:	dd400b15 	stw	r21,44(sp)
1000d18c:	dd000a15 	stw	r20,40(sp)
1000d190:	dcc00915 	stw	r19,36(sp)
1000d194:	dc400715 	stw	r17,28(sp)
1000d198:	9481ffcc 	andi	r18,r18,2047
1000d19c:	2c20703a 	and	r16,r5,r16
1000d1a0:	b2003fcc 	andi	r8,r22,255
1000d1a4:	90006126 	beq	r18,zero,1000d32c <__divdf3+0x1d0>
1000d1a8:	0081ffc4 	movi	r2,2047
1000d1ac:	202b883a 	mov	r21,r4
1000d1b0:	90803726 	beq	r18,r2,1000d290 <__divdf3+0x134>
1000d1b4:	80c00434 	orhi	r3,r16,16
1000d1b8:	180690fa 	slli	r3,r3,3
1000d1bc:	2020d77a 	srli	r16,r4,29
1000d1c0:	202a90fa 	slli	r21,r4,3
1000d1c4:	94bf0044 	addi	r18,r18,-1023
1000d1c8:	80e0b03a 	or	r16,r16,r3
1000d1cc:	0013883a 	mov	r9,zero
1000d1d0:	000b883a 	mov	r5,zero
1000d1d4:	3806d53a 	srli	r3,r7,20
1000d1d8:	382ed7fa 	srli	r23,r7,31
1000d1dc:	04400434 	movhi	r17,16
1000d1e0:	8c7fffc4 	addi	r17,r17,-1
1000d1e4:	18c1ffcc 	andi	r3,r3,2047
1000d1e8:	3029883a 	mov	r20,r6
1000d1ec:	3c62703a 	and	r17,r7,r17
1000d1f0:	bf003fcc 	andi	fp,r23,255
1000d1f4:	18006e26 	beq	r3,zero,1000d3b0 <__divdf3+0x254>
1000d1f8:	0081ffc4 	movi	r2,2047
1000d1fc:	18806626 	beq	r3,r2,1000d398 <__divdf3+0x23c>
1000d200:	89000434 	orhi	r4,r17,16
1000d204:	200890fa 	slli	r4,r4,3
1000d208:	3022d77a 	srli	r17,r6,29
1000d20c:	302890fa 	slli	r20,r6,3
1000d210:	18ff0044 	addi	r3,r3,-1023
1000d214:	8922b03a 	or	r17,r17,r4
1000d218:	000f883a 	mov	r7,zero
1000d21c:	b5e6f03a 	xor	r19,r22,r23
1000d220:	3a4cb03a 	or	r6,r7,r9
1000d224:	008003c4 	movi	r2,15
1000d228:	9809883a 	mov	r4,r19
1000d22c:	90c7c83a 	sub	r3,r18,r3
1000d230:	9cc03fcc 	andi	r19,r19,255
1000d234:	11809636 	bltu	r2,r6,1000d490 <__divdf3+0x334>
1000d238:	300c90ba 	slli	r6,r6,2
1000d23c:	00840074 	movhi	r2,4097
1000d240:	10b49404 	addi	r2,r2,-11696
1000d244:	308d883a 	add	r6,r6,r2
1000d248:	30800017 	ldw	r2,0(r6)
1000d24c:	1000683a 	jmp	r2
1000d250:	1000d490 	cmplti	zero,r2,850
1000d254:	1000d2c8 	cmpgei	zero,r2,843
1000d258:	1000d480 	call	11000d48 <_gp+0xfe4e30>
1000d25c:	1000d2bc 	xorhi	zero,r2,842
1000d260:	1000d480 	call	11000d48 <_gp+0xfe4e30>
1000d264:	1000d454 	ori	zero,r2,849
1000d268:	1000d480 	call	11000d48 <_gp+0xfe4e30>
1000d26c:	1000d2bc 	xorhi	zero,r2,842
1000d270:	1000d2c8 	cmpgei	zero,r2,843
1000d274:	1000d2c8 	cmpgei	zero,r2,843
1000d278:	1000d454 	ori	zero,r2,849
1000d27c:	1000d2bc 	xorhi	zero,r2,842
1000d280:	1000d2ac 	andhi	zero,r2,842
1000d284:	1000d2ac 	andhi	zero,r2,842
1000d288:	1000d2ac 	andhi	zero,r2,842
1000d28c:	1000d818 	cmpnei	zero,r2,864
1000d290:	2404b03a 	or	r2,r4,r16
1000d294:	10006c1e 	bne	r2,zero,1000d448 <__divdf3+0x2ec>
1000d298:	02400204 	movi	r9,8
1000d29c:	0021883a 	mov	r16,zero
1000d2a0:	002b883a 	mov	r21,zero
1000d2a4:	01400084 	movi	r5,2
1000d2a8:	003fca06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d2ac:	8023883a 	mov	r17,r16
1000d2b0:	a829883a 	mov	r20,r21
1000d2b4:	4039883a 	mov	fp,r8
1000d2b8:	280f883a 	mov	r7,r5
1000d2bc:	00800084 	movi	r2,2
1000d2c0:	3881601e 	bne	r7,r2,1000d844 <__divdf3+0x6e8>
1000d2c4:	e027883a 	mov	r19,fp
1000d2c8:	9900004c 	andi	r4,r19,1
1000d2cc:	0081ffc4 	movi	r2,2047
1000d2d0:	0021883a 	mov	r16,zero
1000d2d4:	002b883a 	mov	r21,zero
1000d2d8:	1004953a 	slli	r2,r2,20
1000d2dc:	20c03fcc 	andi	r3,r4,255
1000d2e0:	01400434 	movhi	r5,16
1000d2e4:	297fffc4 	addi	r5,r5,-1
1000d2e8:	180697fa 	slli	r3,r3,31
1000d2ec:	8160703a 	and	r16,r16,r5
1000d2f0:	80a0b03a 	or	r16,r16,r2
1000d2f4:	80c6b03a 	or	r3,r16,r3
1000d2f8:	a805883a 	mov	r2,r21
1000d2fc:	dfc00f17 	ldw	ra,60(sp)
1000d300:	df000e17 	ldw	fp,56(sp)
1000d304:	ddc00d17 	ldw	r23,52(sp)
1000d308:	dd800c17 	ldw	r22,48(sp)
1000d30c:	dd400b17 	ldw	r21,44(sp)
1000d310:	dd000a17 	ldw	r20,40(sp)
1000d314:	dcc00917 	ldw	r19,36(sp)
1000d318:	dc800817 	ldw	r18,32(sp)
1000d31c:	dc400717 	ldw	r17,28(sp)
1000d320:	dc000617 	ldw	r16,24(sp)
1000d324:	dec01004 	addi	sp,sp,64
1000d328:	f800283a 	ret
1000d32c:	2404b03a 	or	r2,r4,r16
1000d330:	2023883a 	mov	r17,r4
1000d334:	10003f26 	beq	r2,zero,1000d434 <__divdf3+0x2d8>
1000d338:	80015e26 	beq	r16,zero,1000d8b4 <__divdf3+0x758>
1000d33c:	8009883a 	mov	r4,r16
1000d340:	d9800215 	stw	r6,8(sp)
1000d344:	d9c00515 	stw	r7,20(sp)
1000d348:	da000415 	stw	r8,16(sp)
1000d34c:	000f0ec0 	call	1000f0ec <__clzsi2>
1000d350:	d9800217 	ldw	r6,8(sp)
1000d354:	d9c00517 	ldw	r7,20(sp)
1000d358:	da000417 	ldw	r8,16(sp)
1000d35c:	10fffd44 	addi	r3,r2,-11
1000d360:	01000704 	movi	r4,28
1000d364:	20c14f16 	blt	r4,r3,1000d8a4 <__divdf3+0x748>
1000d368:	01000744 	movi	r4,29
1000d36c:	157ffe04 	addi	r21,r2,-8
1000d370:	20c9c83a 	sub	r4,r4,r3
1000d374:	8560983a 	sll	r16,r16,r21
1000d378:	8908d83a 	srl	r4,r17,r4
1000d37c:	8d6a983a 	sll	r21,r17,r21
1000d380:	2420b03a 	or	r16,r4,r16
1000d384:	04bf0084 	movi	r18,-1022
1000d388:	90e5c83a 	sub	r18,r18,r3
1000d38c:	0013883a 	mov	r9,zero
1000d390:	000b883a 	mov	r5,zero
1000d394:	003f8f06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d398:	3444b03a 	or	r2,r6,r17
1000d39c:	1000231e 	bne	r2,zero,1000d42c <__divdf3+0x2d0>
1000d3a0:	0023883a 	mov	r17,zero
1000d3a4:	0029883a 	mov	r20,zero
1000d3a8:	01c00084 	movi	r7,2
1000d3ac:	003f9b06 	br	1000d21c <__alt_data_end+0xf800d21c>
1000d3b0:	3444b03a 	or	r2,r6,r17
1000d3b4:	10001926 	beq	r2,zero,1000d41c <__divdf3+0x2c0>
1000d3b8:	88014b26 	beq	r17,zero,1000d8e8 <__divdf3+0x78c>
1000d3bc:	8809883a 	mov	r4,r17
1000d3c0:	d9400115 	stw	r5,4(sp)
1000d3c4:	d9800215 	stw	r6,8(sp)
1000d3c8:	da000415 	stw	r8,16(sp)
1000d3cc:	da400315 	stw	r9,12(sp)
1000d3d0:	000f0ec0 	call	1000f0ec <__clzsi2>
1000d3d4:	d9400117 	ldw	r5,4(sp)
1000d3d8:	d9800217 	ldw	r6,8(sp)
1000d3dc:	da000417 	ldw	r8,16(sp)
1000d3e0:	da400317 	ldw	r9,12(sp)
1000d3e4:	10fffd44 	addi	r3,r2,-11
1000d3e8:	01000704 	movi	r4,28
1000d3ec:	20c13a16 	blt	r4,r3,1000d8d8 <__divdf3+0x77c>
1000d3f0:	01000744 	movi	r4,29
1000d3f4:	153ffe04 	addi	r20,r2,-8
1000d3f8:	20c9c83a 	sub	r4,r4,r3
1000d3fc:	8d22983a 	sll	r17,r17,r20
1000d400:	3108d83a 	srl	r4,r6,r4
1000d404:	3528983a 	sll	r20,r6,r20
1000d408:	2462b03a 	or	r17,r4,r17
1000d40c:	00bf0084 	movi	r2,-1022
1000d410:	10c7c83a 	sub	r3,r2,r3
1000d414:	000f883a 	mov	r7,zero
1000d418:	003f8006 	br	1000d21c <__alt_data_end+0xf800d21c>
1000d41c:	0023883a 	mov	r17,zero
1000d420:	0029883a 	mov	r20,zero
1000d424:	01c00044 	movi	r7,1
1000d428:	003f7c06 	br	1000d21c <__alt_data_end+0xf800d21c>
1000d42c:	01c000c4 	movi	r7,3
1000d430:	003f7a06 	br	1000d21c <__alt_data_end+0xf800d21c>
1000d434:	02400104 	movi	r9,4
1000d438:	0021883a 	mov	r16,zero
1000d43c:	002b883a 	mov	r21,zero
1000d440:	01400044 	movi	r5,1
1000d444:	003f6306 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d448:	02400304 	movi	r9,12
1000d44c:	014000c4 	movi	r5,3
1000d450:	003f6006 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d454:	04000434 	movhi	r16,16
1000d458:	0009883a 	mov	r4,zero
1000d45c:	843fffc4 	addi	r16,r16,-1
1000d460:	057fffc4 	movi	r21,-1
1000d464:	0081ffc4 	movi	r2,2047
1000d468:	003f9b06 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000d46c:	00c00044 	movi	r3,1
1000d470:	1887c83a 	sub	r3,r3,r2
1000d474:	01000e04 	movi	r4,56
1000d478:	20c1530e 	bge	r4,r3,1000d9c8 <__divdf3+0x86c>
1000d47c:	9900004c 	andi	r4,r19,1
1000d480:	0005883a 	mov	r2,zero
1000d484:	0021883a 	mov	r16,zero
1000d488:	002b883a 	mov	r21,zero
1000d48c:	003f9206 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000d490:	8c012e36 	bltu	r17,r16,1000d94c <__divdf3+0x7f0>
1000d494:	84412c26 	beq	r16,r17,1000d948 <__divdf3+0x7ec>
1000d498:	a82f883a 	mov	r23,r21
1000d49c:	18ffffc4 	addi	r3,r3,-1
1000d4a0:	002b883a 	mov	r21,zero
1000d4a4:	a00ad63a 	srli	r5,r20,24
1000d4a8:	8822923a 	slli	r17,r17,8
1000d4ac:	a028923a 	slli	r20,r20,8
1000d4b0:	8009883a 	mov	r4,r16
1000d4b4:	896cb03a 	or	r22,r17,r5
1000d4b8:	dd000015 	stw	r20,0(sp)
1000d4bc:	b028d43a 	srli	r20,r22,16
1000d4c0:	d8c00215 	stw	r3,8(sp)
1000d4c4:	b4bfffcc 	andi	r18,r22,65535
1000d4c8:	a00b883a 	mov	r5,r20
1000d4cc:	000c7cc0 	call	1000c7cc <__udivsi3>
1000d4d0:	100b883a 	mov	r5,r2
1000d4d4:	9009883a 	mov	r4,r18
1000d4d8:	1023883a 	mov	r17,r2
1000d4dc:	000c8880 	call	1000c888 <__mulsi3>
1000d4e0:	8009883a 	mov	r4,r16
1000d4e4:	a00b883a 	mov	r5,r20
1000d4e8:	1039883a 	mov	fp,r2
1000d4ec:	000c8300 	call	1000c830 <__umodsi3>
1000d4f0:	1004943a 	slli	r2,r2,16
1000d4f4:	b808d43a 	srli	r4,r23,16
1000d4f8:	d8c00217 	ldw	r3,8(sp)
1000d4fc:	2084b03a 	or	r2,r4,r2
1000d500:	1700062e 	bgeu	r2,fp,1000d51c <__divdf3+0x3c0>
1000d504:	1585883a 	add	r2,r2,r22
1000d508:	893fffc4 	addi	r4,r17,-1
1000d50c:	15811d36 	bltu	r2,r22,1000d984 <__divdf3+0x828>
1000d510:	17011c2e 	bgeu	r2,fp,1000d984 <__divdf3+0x828>
1000d514:	8c7fff84 	addi	r17,r17,-2
1000d518:	1585883a 	add	r2,r2,r22
1000d51c:	1739c83a 	sub	fp,r2,fp
1000d520:	a00b883a 	mov	r5,r20
1000d524:	e009883a 	mov	r4,fp
1000d528:	d8c00215 	stw	r3,8(sp)
1000d52c:	000c7cc0 	call	1000c7cc <__udivsi3>
1000d530:	100b883a 	mov	r5,r2
1000d534:	9009883a 	mov	r4,r18
1000d538:	1021883a 	mov	r16,r2
1000d53c:	000c8880 	call	1000c888 <__mulsi3>
1000d540:	a00b883a 	mov	r5,r20
1000d544:	e009883a 	mov	r4,fp
1000d548:	d8800415 	stw	r2,16(sp)
1000d54c:	000c8300 	call	1000c830 <__umodsi3>
1000d550:	1004943a 	slli	r2,r2,16
1000d554:	da000417 	ldw	r8,16(sp)
1000d558:	bdffffcc 	andi	r23,r23,65535
1000d55c:	b884b03a 	or	r2,r23,r2
1000d560:	d8c00217 	ldw	r3,8(sp)
1000d564:	1200062e 	bgeu	r2,r8,1000d580 <__divdf3+0x424>
1000d568:	1585883a 	add	r2,r2,r22
1000d56c:	813fffc4 	addi	r4,r16,-1
1000d570:	15810236 	bltu	r2,r22,1000d97c <__divdf3+0x820>
1000d574:	1201012e 	bgeu	r2,r8,1000d97c <__divdf3+0x820>
1000d578:	843fff84 	addi	r16,r16,-2
1000d57c:	1585883a 	add	r2,r2,r22
1000d580:	8822943a 	slli	r17,r17,16
1000d584:	d9800017 	ldw	r6,0(sp)
1000d588:	1211c83a 	sub	r8,r2,r8
1000d58c:	8c22b03a 	or	r17,r17,r16
1000d590:	373fffcc 	andi	fp,r6,65535
1000d594:	8abfffcc 	andi	r10,r17,65535
1000d598:	8820d43a 	srli	r16,r17,16
1000d59c:	5009883a 	mov	r4,r10
1000d5a0:	e00b883a 	mov	r5,fp
1000d5a4:	302ed43a 	srli	r23,r6,16
1000d5a8:	d8c00215 	stw	r3,8(sp)
1000d5ac:	da000415 	stw	r8,16(sp)
1000d5b0:	da800115 	stw	r10,4(sp)
1000d5b4:	000c8880 	call	1000c888 <__mulsi3>
1000d5b8:	800b883a 	mov	r5,r16
1000d5bc:	e009883a 	mov	r4,fp
1000d5c0:	d8800515 	stw	r2,20(sp)
1000d5c4:	000c8880 	call	1000c888 <__mulsi3>
1000d5c8:	8009883a 	mov	r4,r16
1000d5cc:	b80b883a 	mov	r5,r23
1000d5d0:	d8800315 	stw	r2,12(sp)
1000d5d4:	000c8880 	call	1000c888 <__mulsi3>
1000d5d8:	da800117 	ldw	r10,4(sp)
1000d5dc:	b80b883a 	mov	r5,r23
1000d5e0:	1021883a 	mov	r16,r2
1000d5e4:	5009883a 	mov	r4,r10
1000d5e8:	000c8880 	call	1000c888 <__mulsi3>
1000d5ec:	d9c00517 	ldw	r7,20(sp)
1000d5f0:	da400317 	ldw	r9,12(sp)
1000d5f4:	d8c00217 	ldw	r3,8(sp)
1000d5f8:	3808d43a 	srli	r4,r7,16
1000d5fc:	1245883a 	add	r2,r2,r9
1000d600:	da000417 	ldw	r8,16(sp)
1000d604:	2085883a 	add	r2,r4,r2
1000d608:	1240022e 	bgeu	r2,r9,1000d614 <__divdf3+0x4b8>
1000d60c:	01000074 	movhi	r4,1
1000d610:	8121883a 	add	r16,r16,r4
1000d614:	1008d43a 	srli	r4,r2,16
1000d618:	1004943a 	slli	r2,r2,16
1000d61c:	39ffffcc 	andi	r7,r7,65535
1000d620:	2409883a 	add	r4,r4,r16
1000d624:	11c5883a 	add	r2,r2,r7
1000d628:	4100bb36 	bltu	r8,r4,1000d918 <__divdf3+0x7bc>
1000d62c:	4100d726 	beq	r8,r4,1000d98c <__divdf3+0x830>
1000d630:	4109c83a 	sub	r4,r8,r4
1000d634:	a8a1c83a 	sub	r16,r21,r2
1000d638:	ac2b803a 	cmpltu	r21,r21,r16
1000d63c:	256bc83a 	sub	r21,r4,r21
1000d640:	b540d926 	beq	r22,r21,1000d9a8 <__divdf3+0x84c>
1000d644:	a00b883a 	mov	r5,r20
1000d648:	a809883a 	mov	r4,r21
1000d64c:	d8c00215 	stw	r3,8(sp)
1000d650:	000c7cc0 	call	1000c7cc <__udivsi3>
1000d654:	100b883a 	mov	r5,r2
1000d658:	9009883a 	mov	r4,r18
1000d65c:	d8800515 	stw	r2,20(sp)
1000d660:	000c8880 	call	1000c888 <__mulsi3>
1000d664:	a809883a 	mov	r4,r21
1000d668:	a00b883a 	mov	r5,r20
1000d66c:	d8800415 	stw	r2,16(sp)
1000d670:	000c8300 	call	1000c830 <__umodsi3>
1000d674:	1004943a 	slli	r2,r2,16
1000d678:	8008d43a 	srli	r4,r16,16
1000d67c:	da000417 	ldw	r8,16(sp)
1000d680:	d8c00217 	ldw	r3,8(sp)
1000d684:	2084b03a 	or	r2,r4,r2
1000d688:	d9c00517 	ldw	r7,20(sp)
1000d68c:	1200062e 	bgeu	r2,r8,1000d6a8 <__divdf3+0x54c>
1000d690:	1585883a 	add	r2,r2,r22
1000d694:	393fffc4 	addi	r4,r7,-1
1000d698:	1580c536 	bltu	r2,r22,1000d9b0 <__divdf3+0x854>
1000d69c:	1200c42e 	bgeu	r2,r8,1000d9b0 <__divdf3+0x854>
1000d6a0:	39ffff84 	addi	r7,r7,-2
1000d6a4:	1585883a 	add	r2,r2,r22
1000d6a8:	122bc83a 	sub	r21,r2,r8
1000d6ac:	a00b883a 	mov	r5,r20
1000d6b0:	a809883a 	mov	r4,r21
1000d6b4:	d8c00215 	stw	r3,8(sp)
1000d6b8:	d9c00515 	stw	r7,20(sp)
1000d6bc:	000c7cc0 	call	1000c7cc <__udivsi3>
1000d6c0:	9009883a 	mov	r4,r18
1000d6c4:	100b883a 	mov	r5,r2
1000d6c8:	d8800415 	stw	r2,16(sp)
1000d6cc:	000c8880 	call	1000c888 <__mulsi3>
1000d6d0:	a809883a 	mov	r4,r21
1000d6d4:	a00b883a 	mov	r5,r20
1000d6d8:	1025883a 	mov	r18,r2
1000d6dc:	000c8300 	call	1000c830 <__umodsi3>
1000d6e0:	1004943a 	slli	r2,r2,16
1000d6e4:	813fffcc 	andi	r4,r16,65535
1000d6e8:	d8c00217 	ldw	r3,8(sp)
1000d6ec:	20a0b03a 	or	r16,r4,r2
1000d6f0:	d9c00517 	ldw	r7,20(sp)
1000d6f4:	da000417 	ldw	r8,16(sp)
1000d6f8:	8480062e 	bgeu	r16,r18,1000d714 <__divdf3+0x5b8>
1000d6fc:	85a1883a 	add	r16,r16,r22
1000d700:	40bfffc4 	addi	r2,r8,-1
1000d704:	8580ac36 	bltu	r16,r22,1000d9b8 <__divdf3+0x85c>
1000d708:	8480ab2e 	bgeu	r16,r18,1000d9b8 <__divdf3+0x85c>
1000d70c:	423fff84 	addi	r8,r8,-2
1000d710:	85a1883a 	add	r16,r16,r22
1000d714:	3804943a 	slli	r2,r7,16
1000d718:	84a1c83a 	sub	r16,r16,r18
1000d71c:	e009883a 	mov	r4,fp
1000d720:	1228b03a 	or	r20,r2,r8
1000d724:	a1ffffcc 	andi	r7,r20,65535
1000d728:	a024d43a 	srli	r18,r20,16
1000d72c:	380b883a 	mov	r5,r7
1000d730:	d8c00215 	stw	r3,8(sp)
1000d734:	d9c00515 	stw	r7,20(sp)
1000d738:	000c8880 	call	1000c888 <__mulsi3>
1000d73c:	900b883a 	mov	r5,r18
1000d740:	e009883a 	mov	r4,fp
1000d744:	102b883a 	mov	r21,r2
1000d748:	000c8880 	call	1000c888 <__mulsi3>
1000d74c:	900b883a 	mov	r5,r18
1000d750:	b809883a 	mov	r4,r23
1000d754:	1039883a 	mov	fp,r2
1000d758:	000c8880 	call	1000c888 <__mulsi3>
1000d75c:	d9c00517 	ldw	r7,20(sp)
1000d760:	b80b883a 	mov	r5,r23
1000d764:	1025883a 	mov	r18,r2
1000d768:	3809883a 	mov	r4,r7
1000d76c:	000c8880 	call	1000c888 <__mulsi3>
1000d770:	a808d43a 	srli	r4,r21,16
1000d774:	1705883a 	add	r2,r2,fp
1000d778:	d8c00217 	ldw	r3,8(sp)
1000d77c:	2085883a 	add	r2,r4,r2
1000d780:	1700022e 	bgeu	r2,fp,1000d78c <__divdf3+0x630>
1000d784:	01000074 	movhi	r4,1
1000d788:	9125883a 	add	r18,r18,r4
1000d78c:	1008d43a 	srli	r4,r2,16
1000d790:	1004943a 	slli	r2,r2,16
1000d794:	ad7fffcc 	andi	r21,r21,65535
1000d798:	2489883a 	add	r4,r4,r18
1000d79c:	1545883a 	add	r2,r2,r21
1000d7a0:	81003836 	bltu	r16,r4,1000d884 <__divdf3+0x728>
1000d7a4:	81003626 	beq	r16,r4,1000d880 <__divdf3+0x724>
1000d7a8:	a5000054 	ori	r20,r20,1
1000d7ac:	1880ffc4 	addi	r2,r3,1023
1000d7b0:	00bf2e0e 	bge	zero,r2,1000d46c <__alt_data_end+0xf800d46c>
1000d7b4:	a10001cc 	andi	r4,r20,7
1000d7b8:	20000726 	beq	r4,zero,1000d7d8 <__divdf3+0x67c>
1000d7bc:	a10003cc 	andi	r4,r20,15
1000d7c0:	01400104 	movi	r5,4
1000d7c4:	21400426 	beq	r4,r5,1000d7d8 <__divdf3+0x67c>
1000d7c8:	a149883a 	add	r4,r20,r5
1000d7cc:	2529803a 	cmpltu	r20,r4,r20
1000d7d0:	8d23883a 	add	r17,r17,r20
1000d7d4:	2029883a 	mov	r20,r4
1000d7d8:	8900402c 	andhi	r4,r17,256
1000d7dc:	20000426 	beq	r4,zero,1000d7f0 <__divdf3+0x694>
1000d7e0:	18810004 	addi	r2,r3,1024
1000d7e4:	00ffc034 	movhi	r3,65280
1000d7e8:	18ffffc4 	addi	r3,r3,-1
1000d7ec:	88e2703a 	and	r17,r17,r3
1000d7f0:	00c1ff84 	movi	r3,2046
1000d7f4:	18beb416 	blt	r3,r2,1000d2c8 <__alt_data_end+0xf800d2c8>
1000d7f8:	a028d0fa 	srli	r20,r20,3
1000d7fc:	882a977a 	slli	r21,r17,29
1000d800:	8820927a 	slli	r16,r17,9
1000d804:	1081ffcc 	andi	r2,r2,2047
1000d808:	ad2ab03a 	or	r21,r21,r20
1000d80c:	8020d33a 	srli	r16,r16,12
1000d810:	9900004c 	andi	r4,r19,1
1000d814:	003eb006 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000d818:	8080022c 	andhi	r2,r16,8
1000d81c:	10001226 	beq	r2,zero,1000d868 <__divdf3+0x70c>
1000d820:	8880022c 	andhi	r2,r17,8
1000d824:	1000101e 	bne	r2,zero,1000d868 <__divdf3+0x70c>
1000d828:	00800434 	movhi	r2,16
1000d82c:	8c000234 	orhi	r16,r17,8
1000d830:	10bfffc4 	addi	r2,r2,-1
1000d834:	b809883a 	mov	r4,r23
1000d838:	80a0703a 	and	r16,r16,r2
1000d83c:	a02b883a 	mov	r21,r20
1000d840:	003f0806 	br	1000d464 <__alt_data_end+0xf800d464>
1000d844:	008000c4 	movi	r2,3
1000d848:	3880b126 	beq	r7,r2,1000db10 <__divdf3+0x9b4>
1000d84c:	00800044 	movi	r2,1
1000d850:	38805b1e 	bne	r7,r2,1000d9c0 <__divdf3+0x864>
1000d854:	e009883a 	mov	r4,fp
1000d858:	0005883a 	mov	r2,zero
1000d85c:	0021883a 	mov	r16,zero
1000d860:	002b883a 	mov	r21,zero
1000d864:	003e9c06 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000d868:	00800434 	movhi	r2,16
1000d86c:	84000234 	orhi	r16,r16,8
1000d870:	10bfffc4 	addi	r2,r2,-1
1000d874:	b009883a 	mov	r4,r22
1000d878:	80a0703a 	and	r16,r16,r2
1000d87c:	003ef906 	br	1000d464 <__alt_data_end+0xf800d464>
1000d880:	103fca26 	beq	r2,zero,1000d7ac <__alt_data_end+0xf800d7ac>
1000d884:	b421883a 	add	r16,r22,r16
1000d888:	a17fffc4 	addi	r5,r20,-1
1000d88c:	8580422e 	bgeu	r16,r22,1000d998 <__divdf3+0x83c>
1000d890:	2829883a 	mov	r20,r5
1000d894:	813fc41e 	bne	r16,r4,1000d7a8 <__alt_data_end+0xf800d7a8>
1000d898:	d9800017 	ldw	r6,0(sp)
1000d89c:	30bfc21e 	bne	r6,r2,1000d7a8 <__alt_data_end+0xf800d7a8>
1000d8a0:	003fc206 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000d8a4:	10bff604 	addi	r2,r2,-40
1000d8a8:	88a0983a 	sll	r16,r17,r2
1000d8ac:	002b883a 	mov	r21,zero
1000d8b0:	003eb406 	br	1000d384 <__alt_data_end+0xf800d384>
1000d8b4:	d9800215 	stw	r6,8(sp)
1000d8b8:	d9c00515 	stw	r7,20(sp)
1000d8bc:	da000415 	stw	r8,16(sp)
1000d8c0:	000f0ec0 	call	1000f0ec <__clzsi2>
1000d8c4:	10800804 	addi	r2,r2,32
1000d8c8:	da000417 	ldw	r8,16(sp)
1000d8cc:	d9c00517 	ldw	r7,20(sp)
1000d8d0:	d9800217 	ldw	r6,8(sp)
1000d8d4:	003ea106 	br	1000d35c <__alt_data_end+0xf800d35c>
1000d8d8:	10bff604 	addi	r2,r2,-40
1000d8dc:	30a2983a 	sll	r17,r6,r2
1000d8e0:	0029883a 	mov	r20,zero
1000d8e4:	003ec906 	br	1000d40c <__alt_data_end+0xf800d40c>
1000d8e8:	3009883a 	mov	r4,r6
1000d8ec:	d9400115 	stw	r5,4(sp)
1000d8f0:	d9800215 	stw	r6,8(sp)
1000d8f4:	da000415 	stw	r8,16(sp)
1000d8f8:	da400315 	stw	r9,12(sp)
1000d8fc:	000f0ec0 	call	1000f0ec <__clzsi2>
1000d900:	10800804 	addi	r2,r2,32
1000d904:	da400317 	ldw	r9,12(sp)
1000d908:	da000417 	ldw	r8,16(sp)
1000d90c:	d9800217 	ldw	r6,8(sp)
1000d910:	d9400117 	ldw	r5,4(sp)
1000d914:	003eb306 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000d918:	d9800017 	ldw	r6,0(sp)
1000d91c:	a9ab883a 	add	r21,r21,r6
1000d920:	a98b803a 	cmpltu	r5,r21,r6
1000d924:	2d8b883a 	add	r5,r5,r22
1000d928:	2a11883a 	add	r8,r5,r8
1000d92c:	897fffc4 	addi	r5,r17,-1
1000d930:	b2000c2e 	bgeu	r22,r8,1000d964 <__divdf3+0x808>
1000d934:	41003f36 	bltu	r8,r4,1000da34 <__divdf3+0x8d8>
1000d938:	22006c26 	beq	r4,r8,1000daec <__divdf3+0x990>
1000d93c:	4109c83a 	sub	r4,r8,r4
1000d940:	2823883a 	mov	r17,r5
1000d944:	003f3b06 	br	1000d634 <__alt_data_end+0xf800d634>
1000d948:	ad3ed336 	bltu	r21,r20,1000d498 <__alt_data_end+0xf800d498>
1000d94c:	a804d07a 	srli	r2,r21,1
1000d950:	802e97fa 	slli	r23,r16,31
1000d954:	a82a97fa 	slli	r21,r21,31
1000d958:	8020d07a 	srli	r16,r16,1
1000d95c:	b8aeb03a 	or	r23,r23,r2
1000d960:	003ed006 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000d964:	b23ff51e 	bne	r22,r8,1000d93c <__alt_data_end+0xf800d93c>
1000d968:	d9800017 	ldw	r6,0(sp)
1000d96c:	a9bff12e 	bgeu	r21,r6,1000d934 <__alt_data_end+0xf800d934>
1000d970:	b109c83a 	sub	r4,r22,r4
1000d974:	2823883a 	mov	r17,r5
1000d978:	003f2e06 	br	1000d634 <__alt_data_end+0xf800d634>
1000d97c:	2021883a 	mov	r16,r4
1000d980:	003eff06 	br	1000d580 <__alt_data_end+0xf800d580>
1000d984:	2023883a 	mov	r17,r4
1000d988:	003ee406 	br	1000d51c <__alt_data_end+0xf800d51c>
1000d98c:	a8bfe236 	bltu	r21,r2,1000d918 <__alt_data_end+0xf800d918>
1000d990:	0009883a 	mov	r4,zero
1000d994:	003f2706 	br	1000d634 <__alt_data_end+0xf800d634>
1000d998:	81002d36 	bltu	r16,r4,1000da50 <__divdf3+0x8f4>
1000d99c:	24005626 	beq	r4,r16,1000daf8 <__divdf3+0x99c>
1000d9a0:	2829883a 	mov	r20,r5
1000d9a4:	003f8006 	br	1000d7a8 <__alt_data_end+0xf800d7a8>
1000d9a8:	053fffc4 	movi	r20,-1
1000d9ac:	003f7f06 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000d9b0:	200f883a 	mov	r7,r4
1000d9b4:	003f3c06 	br	1000d6a8 <__alt_data_end+0xf800d6a8>
1000d9b8:	1011883a 	mov	r8,r2
1000d9bc:	003f5506 	br	1000d714 <__alt_data_end+0xf800d714>
1000d9c0:	e027883a 	mov	r19,fp
1000d9c4:	003f7906 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000d9c8:	010007c4 	movi	r4,31
1000d9cc:	20c02816 	blt	r4,r3,1000da70 <__divdf3+0x914>
1000d9d0:	00800804 	movi	r2,32
1000d9d4:	10c5c83a 	sub	r2,r2,r3
1000d9d8:	888a983a 	sll	r5,r17,r2
1000d9dc:	a0c8d83a 	srl	r4,r20,r3
1000d9e0:	a084983a 	sll	r2,r20,r2
1000d9e4:	88e2d83a 	srl	r17,r17,r3
1000d9e8:	2906b03a 	or	r3,r5,r4
1000d9ec:	1004c03a 	cmpne	r2,r2,zero
1000d9f0:	1886b03a 	or	r3,r3,r2
1000d9f4:	188001cc 	andi	r2,r3,7
1000d9f8:	10000726 	beq	r2,zero,1000da18 <__divdf3+0x8bc>
1000d9fc:	188003cc 	andi	r2,r3,15
1000da00:	01000104 	movi	r4,4
1000da04:	11000426 	beq	r2,r4,1000da18 <__divdf3+0x8bc>
1000da08:	1805883a 	mov	r2,r3
1000da0c:	10c00104 	addi	r3,r2,4
1000da10:	1885803a 	cmpltu	r2,r3,r2
1000da14:	88a3883a 	add	r17,r17,r2
1000da18:	8880202c 	andhi	r2,r17,128
1000da1c:	10002926 	beq	r2,zero,1000dac4 <__divdf3+0x968>
1000da20:	9900004c 	andi	r4,r19,1
1000da24:	00800044 	movi	r2,1
1000da28:	0021883a 	mov	r16,zero
1000da2c:	002b883a 	mov	r21,zero
1000da30:	003e2906 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000da34:	d9800017 	ldw	r6,0(sp)
1000da38:	8c7fff84 	addi	r17,r17,-2
1000da3c:	a9ab883a 	add	r21,r21,r6
1000da40:	a98b803a 	cmpltu	r5,r21,r6
1000da44:	2d8b883a 	add	r5,r5,r22
1000da48:	2a11883a 	add	r8,r5,r8
1000da4c:	003ef806 	br	1000d630 <__alt_data_end+0xf800d630>
1000da50:	d9800017 	ldw	r6,0(sp)
1000da54:	318f883a 	add	r7,r6,r6
1000da58:	398b803a 	cmpltu	r5,r7,r6
1000da5c:	2d8d883a 	add	r6,r5,r22
1000da60:	81a1883a 	add	r16,r16,r6
1000da64:	a17fff84 	addi	r5,r20,-2
1000da68:	d9c00015 	stw	r7,0(sp)
1000da6c:	003f8806 	br	1000d890 <__alt_data_end+0xf800d890>
1000da70:	013ff844 	movi	r4,-31
1000da74:	2085c83a 	sub	r2,r4,r2
1000da78:	8888d83a 	srl	r4,r17,r2
1000da7c:	00800804 	movi	r2,32
1000da80:	18802126 	beq	r3,r2,1000db08 <__divdf3+0x9ac>
1000da84:	04001004 	movi	r16,64
1000da88:	80c7c83a 	sub	r3,r16,r3
1000da8c:	88e0983a 	sll	r16,r17,r3
1000da90:	8504b03a 	or	r2,r16,r20
1000da94:	1004c03a 	cmpne	r2,r2,zero
1000da98:	2084b03a 	or	r2,r4,r2
1000da9c:	144001cc 	andi	r17,r2,7
1000daa0:	88000d1e 	bne	r17,zero,1000dad8 <__divdf3+0x97c>
1000daa4:	0021883a 	mov	r16,zero
1000daa8:	102ad0fa 	srli	r21,r2,3
1000daac:	9900004c 	andi	r4,r19,1
1000dab0:	0005883a 	mov	r2,zero
1000dab4:	ac6ab03a 	or	r21,r21,r17
1000dab8:	003e0706 	br	1000d2d8 <__alt_data_end+0xf800d2d8>
1000dabc:	1007883a 	mov	r3,r2
1000dac0:	0023883a 	mov	r17,zero
1000dac4:	8820927a 	slli	r16,r17,9
1000dac8:	1805883a 	mov	r2,r3
1000dacc:	8822977a 	slli	r17,r17,29
1000dad0:	8020d33a 	srli	r16,r16,12
1000dad4:	003ff406 	br	1000daa8 <__alt_data_end+0xf800daa8>
1000dad8:	10c003cc 	andi	r3,r2,15
1000dadc:	01000104 	movi	r4,4
1000dae0:	193ff626 	beq	r3,r4,1000dabc <__alt_data_end+0xf800dabc>
1000dae4:	0023883a 	mov	r17,zero
1000dae8:	003fc806 	br	1000da0c <__alt_data_end+0xf800da0c>
1000daec:	a8bfd136 	bltu	r21,r2,1000da34 <__alt_data_end+0xf800da34>
1000daf0:	2823883a 	mov	r17,r5
1000daf4:	003fa606 	br	1000d990 <__alt_data_end+0xf800d990>
1000daf8:	d9800017 	ldw	r6,0(sp)
1000dafc:	30bfd436 	bltu	r6,r2,1000da50 <__alt_data_end+0xf800da50>
1000db00:	2829883a 	mov	r20,r5
1000db04:	003f6406 	br	1000d898 <__alt_data_end+0xf800d898>
1000db08:	0021883a 	mov	r16,zero
1000db0c:	003fe006 	br	1000da90 <__alt_data_end+0xf800da90>
1000db10:	00800434 	movhi	r2,16
1000db14:	8c000234 	orhi	r16,r17,8
1000db18:	10bfffc4 	addi	r2,r2,-1
1000db1c:	e009883a 	mov	r4,fp
1000db20:	80a0703a 	and	r16,r16,r2
1000db24:	a02b883a 	mov	r21,r20
1000db28:	003e4e06 	br	1000d464 <__alt_data_end+0xf800d464>

1000db2c <__eqdf2>:
1000db2c:	2804d53a 	srli	r2,r5,20
1000db30:	3806d53a 	srli	r3,r7,20
1000db34:	02000434 	movhi	r8,16
1000db38:	423fffc4 	addi	r8,r8,-1
1000db3c:	1081ffcc 	andi	r2,r2,2047
1000db40:	0281ffc4 	movi	r10,2047
1000db44:	2a12703a 	and	r9,r5,r8
1000db48:	18c1ffcc 	andi	r3,r3,2047
1000db4c:	3a10703a 	and	r8,r7,r8
1000db50:	280ad7fa 	srli	r5,r5,31
1000db54:	380ed7fa 	srli	r7,r7,31
1000db58:	12801026 	beq	r2,r10,1000db9c <__eqdf2+0x70>
1000db5c:	0281ffc4 	movi	r10,2047
1000db60:	1a800a26 	beq	r3,r10,1000db8c <__eqdf2+0x60>
1000db64:	10c00226 	beq	r2,r3,1000db70 <__eqdf2+0x44>
1000db68:	00800044 	movi	r2,1
1000db6c:	f800283a 	ret
1000db70:	4a3ffd1e 	bne	r9,r8,1000db68 <__alt_data_end+0xf800db68>
1000db74:	21bffc1e 	bne	r4,r6,1000db68 <__alt_data_end+0xf800db68>
1000db78:	29c00c26 	beq	r5,r7,1000dbac <__eqdf2+0x80>
1000db7c:	103ffa1e 	bne	r2,zero,1000db68 <__alt_data_end+0xf800db68>
1000db80:	2244b03a 	or	r2,r4,r9
1000db84:	1004c03a 	cmpne	r2,r2,zero
1000db88:	f800283a 	ret
1000db8c:	3214b03a 	or	r10,r6,r8
1000db90:	503ff426 	beq	r10,zero,1000db64 <__alt_data_end+0xf800db64>
1000db94:	00800044 	movi	r2,1
1000db98:	f800283a 	ret
1000db9c:	2254b03a 	or	r10,r4,r9
1000dba0:	503fee26 	beq	r10,zero,1000db5c <__alt_data_end+0xf800db5c>
1000dba4:	00800044 	movi	r2,1
1000dba8:	f800283a 	ret
1000dbac:	0005883a 	mov	r2,zero
1000dbb0:	f800283a 	ret

1000dbb4 <__gedf2>:
1000dbb4:	2804d53a 	srli	r2,r5,20
1000dbb8:	3806d53a 	srli	r3,r7,20
1000dbbc:	02000434 	movhi	r8,16
1000dbc0:	423fffc4 	addi	r8,r8,-1
1000dbc4:	1081ffcc 	andi	r2,r2,2047
1000dbc8:	0241ffc4 	movi	r9,2047
1000dbcc:	2a14703a 	and	r10,r5,r8
1000dbd0:	18c1ffcc 	andi	r3,r3,2047
1000dbd4:	3a10703a 	and	r8,r7,r8
1000dbd8:	280ad7fa 	srli	r5,r5,31
1000dbdc:	380ed7fa 	srli	r7,r7,31
1000dbe0:	12401d26 	beq	r2,r9,1000dc58 <__gedf2+0xa4>
1000dbe4:	0241ffc4 	movi	r9,2047
1000dbe8:	1a401226 	beq	r3,r9,1000dc34 <__gedf2+0x80>
1000dbec:	1000081e 	bne	r2,zero,1000dc10 <__gedf2+0x5c>
1000dbf0:	2296b03a 	or	r11,r4,r10
1000dbf4:	5813003a 	cmpeq	r9,r11,zero
1000dbf8:	1800091e 	bne	r3,zero,1000dc20 <__gedf2+0x6c>
1000dbfc:	3218b03a 	or	r12,r6,r8
1000dc00:	6000071e 	bne	r12,zero,1000dc20 <__gedf2+0x6c>
1000dc04:	0005883a 	mov	r2,zero
1000dc08:	5800101e 	bne	r11,zero,1000dc4c <__gedf2+0x98>
1000dc0c:	f800283a 	ret
1000dc10:	18000c1e 	bne	r3,zero,1000dc44 <__gedf2+0x90>
1000dc14:	3212b03a 	or	r9,r6,r8
1000dc18:	48000c26 	beq	r9,zero,1000dc4c <__gedf2+0x98>
1000dc1c:	0013883a 	mov	r9,zero
1000dc20:	39c03fcc 	andi	r7,r7,255
1000dc24:	48000826 	beq	r9,zero,1000dc48 <__gedf2+0x94>
1000dc28:	38000926 	beq	r7,zero,1000dc50 <__gedf2+0x9c>
1000dc2c:	00800044 	movi	r2,1
1000dc30:	f800283a 	ret
1000dc34:	3212b03a 	or	r9,r6,r8
1000dc38:	483fec26 	beq	r9,zero,1000dbec <__alt_data_end+0xf800dbec>
1000dc3c:	00bfff84 	movi	r2,-2
1000dc40:	f800283a 	ret
1000dc44:	39c03fcc 	andi	r7,r7,255
1000dc48:	29c00626 	beq	r5,r7,1000dc64 <__gedf2+0xb0>
1000dc4c:	283ff726 	beq	r5,zero,1000dc2c <__alt_data_end+0xf800dc2c>
1000dc50:	00bfffc4 	movi	r2,-1
1000dc54:	f800283a 	ret
1000dc58:	2292b03a 	or	r9,r4,r10
1000dc5c:	483fe126 	beq	r9,zero,1000dbe4 <__alt_data_end+0xf800dbe4>
1000dc60:	003ff606 	br	1000dc3c <__alt_data_end+0xf800dc3c>
1000dc64:	18bff916 	blt	r3,r2,1000dc4c <__alt_data_end+0xf800dc4c>
1000dc68:	10c00316 	blt	r2,r3,1000dc78 <__gedf2+0xc4>
1000dc6c:	42bff736 	bltu	r8,r10,1000dc4c <__alt_data_end+0xf800dc4c>
1000dc70:	52000326 	beq	r10,r8,1000dc80 <__gedf2+0xcc>
1000dc74:	5200042e 	bgeu	r10,r8,1000dc88 <__gedf2+0xd4>
1000dc78:	283fec1e 	bne	r5,zero,1000dc2c <__alt_data_end+0xf800dc2c>
1000dc7c:	003ff406 	br	1000dc50 <__alt_data_end+0xf800dc50>
1000dc80:	313ff236 	bltu	r6,r4,1000dc4c <__alt_data_end+0xf800dc4c>
1000dc84:	21bffc36 	bltu	r4,r6,1000dc78 <__alt_data_end+0xf800dc78>
1000dc88:	0005883a 	mov	r2,zero
1000dc8c:	f800283a 	ret

1000dc90 <__ledf2>:
1000dc90:	2804d53a 	srli	r2,r5,20
1000dc94:	3810d53a 	srli	r8,r7,20
1000dc98:	00c00434 	movhi	r3,16
1000dc9c:	18ffffc4 	addi	r3,r3,-1
1000dca0:	1081ffcc 	andi	r2,r2,2047
1000dca4:	0241ffc4 	movi	r9,2047
1000dca8:	28d4703a 	and	r10,r5,r3
1000dcac:	4201ffcc 	andi	r8,r8,2047
1000dcb0:	38c6703a 	and	r3,r7,r3
1000dcb4:	280ad7fa 	srli	r5,r5,31
1000dcb8:	380ed7fa 	srli	r7,r7,31
1000dcbc:	12401f26 	beq	r2,r9,1000dd3c <__ledf2+0xac>
1000dcc0:	0241ffc4 	movi	r9,2047
1000dcc4:	42401426 	beq	r8,r9,1000dd18 <__ledf2+0x88>
1000dcc8:	1000091e 	bne	r2,zero,1000dcf0 <__ledf2+0x60>
1000dccc:	2296b03a 	or	r11,r4,r10
1000dcd0:	5813003a 	cmpeq	r9,r11,zero
1000dcd4:	29403fcc 	andi	r5,r5,255
1000dcd8:	40000a1e 	bne	r8,zero,1000dd04 <__ledf2+0x74>
1000dcdc:	30d8b03a 	or	r12,r6,r3
1000dce0:	6000081e 	bne	r12,zero,1000dd04 <__ledf2+0x74>
1000dce4:	0005883a 	mov	r2,zero
1000dce8:	5800111e 	bne	r11,zero,1000dd30 <__ledf2+0xa0>
1000dcec:	f800283a 	ret
1000dcf0:	29403fcc 	andi	r5,r5,255
1000dcf4:	40000c1e 	bne	r8,zero,1000dd28 <__ledf2+0x98>
1000dcf8:	30d2b03a 	or	r9,r6,r3
1000dcfc:	48000c26 	beq	r9,zero,1000dd30 <__ledf2+0xa0>
1000dd00:	0013883a 	mov	r9,zero
1000dd04:	39c03fcc 	andi	r7,r7,255
1000dd08:	48000826 	beq	r9,zero,1000dd2c <__ledf2+0x9c>
1000dd0c:	38001126 	beq	r7,zero,1000dd54 <__ledf2+0xc4>
1000dd10:	00800044 	movi	r2,1
1000dd14:	f800283a 	ret
1000dd18:	30d2b03a 	or	r9,r6,r3
1000dd1c:	483fea26 	beq	r9,zero,1000dcc8 <__alt_data_end+0xf800dcc8>
1000dd20:	00800084 	movi	r2,2
1000dd24:	f800283a 	ret
1000dd28:	39c03fcc 	andi	r7,r7,255
1000dd2c:	39400726 	beq	r7,r5,1000dd4c <__ledf2+0xbc>
1000dd30:	2800081e 	bne	r5,zero,1000dd54 <__ledf2+0xc4>
1000dd34:	00800044 	movi	r2,1
1000dd38:	f800283a 	ret
1000dd3c:	2292b03a 	or	r9,r4,r10
1000dd40:	483fdf26 	beq	r9,zero,1000dcc0 <__alt_data_end+0xf800dcc0>
1000dd44:	00800084 	movi	r2,2
1000dd48:	f800283a 	ret
1000dd4c:	4080030e 	bge	r8,r2,1000dd5c <__ledf2+0xcc>
1000dd50:	383fef26 	beq	r7,zero,1000dd10 <__alt_data_end+0xf800dd10>
1000dd54:	00bfffc4 	movi	r2,-1
1000dd58:	f800283a 	ret
1000dd5c:	123feb16 	blt	r2,r8,1000dd0c <__alt_data_end+0xf800dd0c>
1000dd60:	1abff336 	bltu	r3,r10,1000dd30 <__alt_data_end+0xf800dd30>
1000dd64:	50c00326 	beq	r10,r3,1000dd74 <__ledf2+0xe4>
1000dd68:	50c0042e 	bgeu	r10,r3,1000dd7c <__ledf2+0xec>
1000dd6c:	283fe81e 	bne	r5,zero,1000dd10 <__alt_data_end+0xf800dd10>
1000dd70:	003ff806 	br	1000dd54 <__alt_data_end+0xf800dd54>
1000dd74:	313fee36 	bltu	r6,r4,1000dd30 <__alt_data_end+0xf800dd30>
1000dd78:	21bffc36 	bltu	r4,r6,1000dd6c <__alt_data_end+0xf800dd6c>
1000dd7c:	0005883a 	mov	r2,zero
1000dd80:	f800283a 	ret

1000dd84 <__muldf3>:
1000dd84:	deffee04 	addi	sp,sp,-72
1000dd88:	dd000c15 	stw	r20,48(sp)
1000dd8c:	2828d53a 	srli	r20,r5,20
1000dd90:	ddc00f15 	stw	r23,60(sp)
1000dd94:	282ed7fa 	srli	r23,r5,31
1000dd98:	dc000815 	stw	r16,32(sp)
1000dd9c:	04000434 	movhi	r16,16
1000dda0:	dcc00b15 	stw	r19,44(sp)
1000dda4:	843fffc4 	addi	r16,r16,-1
1000dda8:	dfc01115 	stw	ra,68(sp)
1000ddac:	df001015 	stw	fp,64(sp)
1000ddb0:	dd800e15 	stw	r22,56(sp)
1000ddb4:	dd400d15 	stw	r21,52(sp)
1000ddb8:	dc800a15 	stw	r18,40(sp)
1000ddbc:	dc400915 	stw	r17,36(sp)
1000ddc0:	a501ffcc 	andi	r20,r20,2047
1000ddc4:	2c20703a 	and	r16,r5,r16
1000ddc8:	b827883a 	mov	r19,r23
1000ddcc:	ba403fcc 	andi	r9,r23,255
1000ddd0:	a0006026 	beq	r20,zero,1000df54 <__muldf3+0x1d0>
1000ddd4:	0081ffc4 	movi	r2,2047
1000ddd8:	202d883a 	mov	r22,r4
1000dddc:	a0803626 	beq	r20,r2,1000deb8 <__muldf3+0x134>
1000dde0:	84000434 	orhi	r16,r16,16
1000dde4:	200ad77a 	srli	r5,r4,29
1000dde8:	800690fa 	slli	r3,r16,3
1000ddec:	202c90fa 	slli	r22,r4,3
1000ddf0:	a53f0044 	addi	r20,r20,-1023
1000ddf4:	28e0b03a 	or	r16,r5,r3
1000ddf8:	002b883a 	mov	r21,zero
1000ddfc:	000b883a 	mov	r5,zero
1000de00:	3806d53a 	srli	r3,r7,20
1000de04:	3838d7fa 	srli	fp,r7,31
1000de08:	04400434 	movhi	r17,16
1000de0c:	8c7fffc4 	addi	r17,r17,-1
1000de10:	18c1ffcc 	andi	r3,r3,2047
1000de14:	3025883a 	mov	r18,r6
1000de18:	3c62703a 	and	r17,r7,r17
1000de1c:	e2803fcc 	andi	r10,fp,255
1000de20:	18006d26 	beq	r3,zero,1000dfd8 <__muldf3+0x254>
1000de24:	0081ffc4 	movi	r2,2047
1000de28:	18806526 	beq	r3,r2,1000dfc0 <__muldf3+0x23c>
1000de2c:	8c400434 	orhi	r17,r17,16
1000de30:	300ed77a 	srli	r7,r6,29
1000de34:	880890fa 	slli	r4,r17,3
1000de38:	302490fa 	slli	r18,r6,3
1000de3c:	18ff0044 	addi	r3,r3,-1023
1000de40:	3922b03a 	or	r17,r7,r4
1000de44:	000f883a 	mov	r7,zero
1000de48:	a0c7883a 	add	r3,r20,r3
1000de4c:	3d48b03a 	or	r4,r7,r21
1000de50:	008003c4 	movi	r2,15
1000de54:	e5ccf03a 	xor	r6,fp,r23
1000de58:	1a000044 	addi	r8,r3,1
1000de5c:	11009b36 	bltu	r2,r4,1000e0cc <__muldf3+0x348>
1000de60:	200890ba 	slli	r4,r4,2
1000de64:	00840074 	movhi	r2,4097
1000de68:	10b79e04 	addi	r2,r2,-8584
1000de6c:	2089883a 	add	r4,r4,r2
1000de70:	20800017 	ldw	r2,0(r4)
1000de74:	1000683a 	jmp	r2
1000de78:	1000e0cc 	andi	zero,r2,899
1000de7c:	1000ded8 	cmpnei	zero,r2,891
1000de80:	1000ded8 	cmpnei	zero,r2,891
1000de84:	1000ded4 	ori	zero,r2,891
1000de88:	1000e0a8 	cmpgeui	zero,r2,898
1000de8c:	1000e0a8 	cmpgeui	zero,r2,898
1000de90:	1000e090 	cmplti	zero,r2,898
1000de94:	1000ded4 	ori	zero,r2,891
1000de98:	1000e0a8 	cmpgeui	zero,r2,898
1000de9c:	1000e090 	cmplti	zero,r2,898
1000dea0:	1000e0a8 	cmpgeui	zero,r2,898
1000dea4:	1000ded4 	ori	zero,r2,891
1000dea8:	1000e0b8 	rdprs	zero,r2,898
1000deac:	1000e0b8 	rdprs	zero,r2,898
1000deb0:	1000e0b8 	rdprs	zero,r2,898
1000deb4:	1000e414 	ori	zero,r2,912
1000deb8:	2404b03a 	or	r2,r4,r16
1000debc:	1000711e 	bne	r2,zero,1000e084 <__muldf3+0x300>
1000dec0:	05400204 	movi	r21,8
1000dec4:	0021883a 	mov	r16,zero
1000dec8:	002d883a 	mov	r22,zero
1000decc:	01400084 	movi	r5,2
1000ded0:	003fcb06 	br	1000de00 <__alt_data_end+0xf800de00>
1000ded4:	500d883a 	mov	r6,r10
1000ded8:	00800084 	movi	r2,2
1000dedc:	38805926 	beq	r7,r2,1000e044 <__muldf3+0x2c0>
1000dee0:	008000c4 	movi	r2,3
1000dee4:	3881ba26 	beq	r7,r2,1000e5d0 <__muldf3+0x84c>
1000dee8:	00800044 	movi	r2,1
1000deec:	3881951e 	bne	r7,r2,1000e544 <__muldf3+0x7c0>
1000def0:	3027883a 	mov	r19,r6
1000def4:	0005883a 	mov	r2,zero
1000def8:	0021883a 	mov	r16,zero
1000defc:	002d883a 	mov	r22,zero
1000df00:	1004953a 	slli	r2,r2,20
1000df04:	98c03fcc 	andi	r3,r19,255
1000df08:	04400434 	movhi	r17,16
1000df0c:	8c7fffc4 	addi	r17,r17,-1
1000df10:	180697fa 	slli	r3,r3,31
1000df14:	8460703a 	and	r16,r16,r17
1000df18:	80a0b03a 	or	r16,r16,r2
1000df1c:	80c6b03a 	or	r3,r16,r3
1000df20:	b005883a 	mov	r2,r22
1000df24:	dfc01117 	ldw	ra,68(sp)
1000df28:	df001017 	ldw	fp,64(sp)
1000df2c:	ddc00f17 	ldw	r23,60(sp)
1000df30:	dd800e17 	ldw	r22,56(sp)
1000df34:	dd400d17 	ldw	r21,52(sp)
1000df38:	dd000c17 	ldw	r20,48(sp)
1000df3c:	dcc00b17 	ldw	r19,44(sp)
1000df40:	dc800a17 	ldw	r18,40(sp)
1000df44:	dc400917 	ldw	r17,36(sp)
1000df48:	dc000817 	ldw	r16,32(sp)
1000df4c:	dec01204 	addi	sp,sp,72
1000df50:	f800283a 	ret
1000df54:	2404b03a 	or	r2,r4,r16
1000df58:	202b883a 	mov	r21,r4
1000df5c:	10004426 	beq	r2,zero,1000e070 <__muldf3+0x2ec>
1000df60:	80015026 	beq	r16,zero,1000e4a4 <__muldf3+0x720>
1000df64:	8009883a 	mov	r4,r16
1000df68:	d9800715 	stw	r6,28(sp)
1000df6c:	d9c00215 	stw	r7,8(sp)
1000df70:	da400415 	stw	r9,16(sp)
1000df74:	000f0ec0 	call	1000f0ec <__clzsi2>
1000df78:	d9800717 	ldw	r6,28(sp)
1000df7c:	d9c00217 	ldw	r7,8(sp)
1000df80:	da400417 	ldw	r9,16(sp)
1000df84:	10fffd44 	addi	r3,r2,-11
1000df88:	01000704 	movi	r4,28
1000df8c:	20c14116 	blt	r4,r3,1000e494 <__muldf3+0x710>
1000df90:	01000744 	movi	r4,29
1000df94:	15bffe04 	addi	r22,r2,-8
1000df98:	20c9c83a 	sub	r4,r4,r3
1000df9c:	85a0983a 	sll	r16,r16,r22
1000dfa0:	a908d83a 	srl	r4,r21,r4
1000dfa4:	adac983a 	sll	r22,r21,r22
1000dfa8:	2420b03a 	or	r16,r4,r16
1000dfac:	053f0084 	movi	r20,-1022
1000dfb0:	a0e9c83a 	sub	r20,r20,r3
1000dfb4:	002b883a 	mov	r21,zero
1000dfb8:	000b883a 	mov	r5,zero
1000dfbc:	003f9006 	br	1000de00 <__alt_data_end+0xf800de00>
1000dfc0:	3444b03a 	or	r2,r6,r17
1000dfc4:	1000281e 	bne	r2,zero,1000e068 <__muldf3+0x2e4>
1000dfc8:	0023883a 	mov	r17,zero
1000dfcc:	0025883a 	mov	r18,zero
1000dfd0:	01c00084 	movi	r7,2
1000dfd4:	003f9c06 	br	1000de48 <__alt_data_end+0xf800de48>
1000dfd8:	3444b03a 	or	r2,r6,r17
1000dfdc:	10001e26 	beq	r2,zero,1000e058 <__muldf3+0x2d4>
1000dfe0:	88012026 	beq	r17,zero,1000e464 <__muldf3+0x6e0>
1000dfe4:	8809883a 	mov	r4,r17
1000dfe8:	d9400215 	stw	r5,8(sp)
1000dfec:	d9800715 	stw	r6,28(sp)
1000dff0:	da400415 	stw	r9,16(sp)
1000dff4:	da800315 	stw	r10,12(sp)
1000dff8:	000f0ec0 	call	1000f0ec <__clzsi2>
1000dffc:	d9400217 	ldw	r5,8(sp)
1000e000:	d9800717 	ldw	r6,28(sp)
1000e004:	da400417 	ldw	r9,16(sp)
1000e008:	da800317 	ldw	r10,12(sp)
1000e00c:	113ffd44 	addi	r4,r2,-11
1000e010:	00c00704 	movi	r3,28
1000e014:	19010f16 	blt	r3,r4,1000e454 <__muldf3+0x6d0>
1000e018:	00c00744 	movi	r3,29
1000e01c:	14bffe04 	addi	r18,r2,-8
1000e020:	1907c83a 	sub	r3,r3,r4
1000e024:	8ca2983a 	sll	r17,r17,r18
1000e028:	30c6d83a 	srl	r3,r6,r3
1000e02c:	34a4983a 	sll	r18,r6,r18
1000e030:	1c62b03a 	or	r17,r3,r17
1000e034:	00ff0084 	movi	r3,-1022
1000e038:	1907c83a 	sub	r3,r3,r4
1000e03c:	000f883a 	mov	r7,zero
1000e040:	003f8106 	br	1000de48 <__alt_data_end+0xf800de48>
1000e044:	3027883a 	mov	r19,r6
1000e048:	0081ffc4 	movi	r2,2047
1000e04c:	0021883a 	mov	r16,zero
1000e050:	002d883a 	mov	r22,zero
1000e054:	003faa06 	br	1000df00 <__alt_data_end+0xf800df00>
1000e058:	0023883a 	mov	r17,zero
1000e05c:	0025883a 	mov	r18,zero
1000e060:	01c00044 	movi	r7,1
1000e064:	003f7806 	br	1000de48 <__alt_data_end+0xf800de48>
1000e068:	01c000c4 	movi	r7,3
1000e06c:	003f7606 	br	1000de48 <__alt_data_end+0xf800de48>
1000e070:	05400104 	movi	r21,4
1000e074:	0021883a 	mov	r16,zero
1000e078:	002d883a 	mov	r22,zero
1000e07c:	01400044 	movi	r5,1
1000e080:	003f5f06 	br	1000de00 <__alt_data_end+0xf800de00>
1000e084:	05400304 	movi	r21,12
1000e088:	014000c4 	movi	r5,3
1000e08c:	003f5c06 	br	1000de00 <__alt_data_end+0xf800de00>
1000e090:	04000434 	movhi	r16,16
1000e094:	0027883a 	mov	r19,zero
1000e098:	843fffc4 	addi	r16,r16,-1
1000e09c:	05bfffc4 	movi	r22,-1
1000e0a0:	0081ffc4 	movi	r2,2047
1000e0a4:	003f9606 	br	1000df00 <__alt_data_end+0xf800df00>
1000e0a8:	8023883a 	mov	r17,r16
1000e0ac:	b025883a 	mov	r18,r22
1000e0b0:	280f883a 	mov	r7,r5
1000e0b4:	003f8806 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e0b8:	8023883a 	mov	r17,r16
1000e0bc:	b025883a 	mov	r18,r22
1000e0c0:	480d883a 	mov	r6,r9
1000e0c4:	280f883a 	mov	r7,r5
1000e0c8:	003f8306 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e0cc:	b028d43a 	srli	r20,r22,16
1000e0d0:	902ed43a 	srli	r23,r18,16
1000e0d4:	b5bfffcc 	andi	r22,r22,65535
1000e0d8:	94bfffcc 	andi	r18,r18,65535
1000e0dc:	b00b883a 	mov	r5,r22
1000e0e0:	9009883a 	mov	r4,r18
1000e0e4:	d8c00515 	stw	r3,20(sp)
1000e0e8:	d9800715 	stw	r6,28(sp)
1000e0ec:	da000615 	stw	r8,24(sp)
1000e0f0:	000c8880 	call	1000c888 <__mulsi3>
1000e0f4:	a00b883a 	mov	r5,r20
1000e0f8:	9009883a 	mov	r4,r18
1000e0fc:	1027883a 	mov	r19,r2
1000e100:	000c8880 	call	1000c888 <__mulsi3>
1000e104:	b80b883a 	mov	r5,r23
1000e108:	a009883a 	mov	r4,r20
1000e10c:	102b883a 	mov	r21,r2
1000e110:	000c8880 	call	1000c888 <__mulsi3>
1000e114:	b809883a 	mov	r4,r23
1000e118:	b00b883a 	mov	r5,r22
1000e11c:	1039883a 	mov	fp,r2
1000e120:	000c8880 	call	1000c888 <__mulsi3>
1000e124:	9808d43a 	srli	r4,r19,16
1000e128:	1545883a 	add	r2,r2,r21
1000e12c:	d8c00517 	ldw	r3,20(sp)
1000e130:	2085883a 	add	r2,r4,r2
1000e134:	d9800717 	ldw	r6,28(sp)
1000e138:	da000617 	ldw	r8,24(sp)
1000e13c:	1540022e 	bgeu	r2,r21,1000e148 <__muldf3+0x3c4>
1000e140:	01000074 	movhi	r4,1
1000e144:	e139883a 	add	fp,fp,r4
1000e148:	100e943a 	slli	r7,r2,16
1000e14c:	1004d43a 	srli	r2,r2,16
1000e150:	882ad43a 	srli	r21,r17,16
1000e154:	9cffffcc 	andi	r19,r19,65535
1000e158:	8c7fffcc 	andi	r17,r17,65535
1000e15c:	3ce7883a 	add	r19,r7,r19
1000e160:	b00b883a 	mov	r5,r22
1000e164:	8809883a 	mov	r4,r17
1000e168:	d8c00515 	stw	r3,20(sp)
1000e16c:	d9800715 	stw	r6,28(sp)
1000e170:	da000615 	stw	r8,24(sp)
1000e174:	dcc00115 	stw	r19,4(sp)
1000e178:	d8800015 	stw	r2,0(sp)
1000e17c:	000c8880 	call	1000c888 <__mulsi3>
1000e180:	a00b883a 	mov	r5,r20
1000e184:	8809883a 	mov	r4,r17
1000e188:	d8800215 	stw	r2,8(sp)
1000e18c:	000c8880 	call	1000c888 <__mulsi3>
1000e190:	a009883a 	mov	r4,r20
1000e194:	a80b883a 	mov	r5,r21
1000e198:	1027883a 	mov	r19,r2
1000e19c:	000c8880 	call	1000c888 <__mulsi3>
1000e1a0:	a809883a 	mov	r4,r21
1000e1a4:	b00b883a 	mov	r5,r22
1000e1a8:	1029883a 	mov	r20,r2
1000e1ac:	000c8880 	call	1000c888 <__mulsi3>
1000e1b0:	d9c00217 	ldw	r7,8(sp)
1000e1b4:	14c5883a 	add	r2,r2,r19
1000e1b8:	d8c00517 	ldw	r3,20(sp)
1000e1bc:	3808d43a 	srli	r4,r7,16
1000e1c0:	d9800717 	ldw	r6,28(sp)
1000e1c4:	da000617 	ldw	r8,24(sp)
1000e1c8:	2085883a 	add	r2,r4,r2
1000e1cc:	14c0022e 	bgeu	r2,r19,1000e1d8 <__muldf3+0x454>
1000e1d0:	01000074 	movhi	r4,1
1000e1d4:	a129883a 	add	r20,r20,r4
1000e1d8:	1012d43a 	srli	r9,r2,16
1000e1dc:	1004943a 	slli	r2,r2,16
1000e1e0:	802cd43a 	srli	r22,r16,16
1000e1e4:	843fffcc 	andi	r16,r16,65535
1000e1e8:	3cffffcc 	andi	r19,r7,65535
1000e1ec:	9009883a 	mov	r4,r18
1000e1f0:	800b883a 	mov	r5,r16
1000e1f4:	4d29883a 	add	r20,r9,r20
1000e1f8:	d8c00515 	stw	r3,20(sp)
1000e1fc:	d9800715 	stw	r6,28(sp)
1000e200:	da000615 	stw	r8,24(sp)
1000e204:	14e7883a 	add	r19,r2,r19
1000e208:	000c8880 	call	1000c888 <__mulsi3>
1000e20c:	9009883a 	mov	r4,r18
1000e210:	b00b883a 	mov	r5,r22
1000e214:	d8800315 	stw	r2,12(sp)
1000e218:	000c8880 	call	1000c888 <__mulsi3>
1000e21c:	b809883a 	mov	r4,r23
1000e220:	b00b883a 	mov	r5,r22
1000e224:	d8800215 	stw	r2,8(sp)
1000e228:	000c8880 	call	1000c888 <__mulsi3>
1000e22c:	b80b883a 	mov	r5,r23
1000e230:	8009883a 	mov	r4,r16
1000e234:	d8800415 	stw	r2,16(sp)
1000e238:	000c8880 	call	1000c888 <__mulsi3>
1000e23c:	da800317 	ldw	r10,12(sp)
1000e240:	d9c00217 	ldw	r7,8(sp)
1000e244:	d9000017 	ldw	r4,0(sp)
1000e248:	502ed43a 	srli	r23,r10,16
1000e24c:	11c5883a 	add	r2,r2,r7
1000e250:	24e5883a 	add	r18,r4,r19
1000e254:	b885883a 	add	r2,r23,r2
1000e258:	d8c00517 	ldw	r3,20(sp)
1000e25c:	d9800717 	ldw	r6,28(sp)
1000e260:	da000617 	ldw	r8,24(sp)
1000e264:	da400417 	ldw	r9,16(sp)
1000e268:	11c0022e 	bgeu	r2,r7,1000e274 <__muldf3+0x4f0>
1000e26c:	01000074 	movhi	r4,1
1000e270:	4913883a 	add	r9,r9,r4
1000e274:	100ed43a 	srli	r7,r2,16
1000e278:	1004943a 	slli	r2,r2,16
1000e27c:	55ffffcc 	andi	r23,r10,65535
1000e280:	3a53883a 	add	r9,r7,r9
1000e284:	8809883a 	mov	r4,r17
1000e288:	800b883a 	mov	r5,r16
1000e28c:	d8c00515 	stw	r3,20(sp)
1000e290:	d9800715 	stw	r6,28(sp)
1000e294:	da000615 	stw	r8,24(sp)
1000e298:	da400415 	stw	r9,16(sp)
1000e29c:	15ef883a 	add	r23,r2,r23
1000e2a0:	000c8880 	call	1000c888 <__mulsi3>
1000e2a4:	8809883a 	mov	r4,r17
1000e2a8:	b00b883a 	mov	r5,r22
1000e2ac:	d8800215 	stw	r2,8(sp)
1000e2b0:	000c8880 	call	1000c888 <__mulsi3>
1000e2b4:	b00b883a 	mov	r5,r22
1000e2b8:	a809883a 	mov	r4,r21
1000e2bc:	d8800315 	stw	r2,12(sp)
1000e2c0:	000c8880 	call	1000c888 <__mulsi3>
1000e2c4:	8009883a 	mov	r4,r16
1000e2c8:	a80b883a 	mov	r5,r21
1000e2cc:	1023883a 	mov	r17,r2
1000e2d0:	000c8880 	call	1000c888 <__mulsi3>
1000e2d4:	d9c00217 	ldw	r7,8(sp)
1000e2d8:	da800317 	ldw	r10,12(sp)
1000e2dc:	d8c00517 	ldw	r3,20(sp)
1000e2e0:	3808d43a 	srli	r4,r7,16
1000e2e4:	1285883a 	add	r2,r2,r10
1000e2e8:	d9800717 	ldw	r6,28(sp)
1000e2ec:	2085883a 	add	r2,r4,r2
1000e2f0:	da000617 	ldw	r8,24(sp)
1000e2f4:	da400417 	ldw	r9,16(sp)
1000e2f8:	1280022e 	bgeu	r2,r10,1000e304 <__muldf3+0x580>
1000e2fc:	01000074 	movhi	r4,1
1000e300:	8923883a 	add	r17,r17,r4
1000e304:	1008943a 	slli	r4,r2,16
1000e308:	39ffffcc 	andi	r7,r7,65535
1000e30c:	e4b9883a 	add	fp,fp,r18
1000e310:	21cf883a 	add	r7,r4,r7
1000e314:	e4e7803a 	cmpltu	r19,fp,r19
1000e318:	3d0f883a 	add	r7,r7,r20
1000e31c:	bf39883a 	add	fp,r23,fp
1000e320:	99c9883a 	add	r4,r19,r7
1000e324:	e5ef803a 	cmpltu	r23,fp,r23
1000e328:	490b883a 	add	r5,r9,r4
1000e32c:	1004d43a 	srli	r2,r2,16
1000e330:	b965883a 	add	r18,r23,r5
1000e334:	24c9803a 	cmpltu	r4,r4,r19
1000e338:	3d29803a 	cmpltu	r20,r7,r20
1000e33c:	a128b03a 	or	r20,r20,r4
1000e340:	95ef803a 	cmpltu	r23,r18,r23
1000e344:	2a53803a 	cmpltu	r9,r5,r9
1000e348:	a0a9883a 	add	r20,r20,r2
1000e34c:	4deeb03a 	or	r23,r9,r23
1000e350:	a5ef883a 	add	r23,r20,r23
1000e354:	bc63883a 	add	r17,r23,r17
1000e358:	e004927a 	slli	r2,fp,9
1000e35c:	d9000117 	ldw	r4,4(sp)
1000e360:	882e927a 	slli	r23,r17,9
1000e364:	9022d5fa 	srli	r17,r18,23
1000e368:	e038d5fa 	srli	fp,fp,23
1000e36c:	1104b03a 	or	r2,r2,r4
1000e370:	9024927a 	slli	r18,r18,9
1000e374:	1004c03a 	cmpne	r2,r2,zero
1000e378:	bc62b03a 	or	r17,r23,r17
1000e37c:	1738b03a 	or	fp,r2,fp
1000e380:	8880402c 	andhi	r2,r17,256
1000e384:	e4a4b03a 	or	r18,fp,r18
1000e388:	10000726 	beq	r2,zero,1000e3a8 <__muldf3+0x624>
1000e38c:	9006d07a 	srli	r3,r18,1
1000e390:	880497fa 	slli	r2,r17,31
1000e394:	9480004c 	andi	r18,r18,1
1000e398:	8822d07a 	srli	r17,r17,1
1000e39c:	1ca4b03a 	or	r18,r3,r18
1000e3a0:	14a4b03a 	or	r18,r2,r18
1000e3a4:	4007883a 	mov	r3,r8
1000e3a8:	1880ffc4 	addi	r2,r3,1023
1000e3ac:	0080460e 	bge	zero,r2,1000e4c8 <__muldf3+0x744>
1000e3b0:	910001cc 	andi	r4,r18,7
1000e3b4:	20000726 	beq	r4,zero,1000e3d4 <__muldf3+0x650>
1000e3b8:	910003cc 	andi	r4,r18,15
1000e3bc:	01400104 	movi	r5,4
1000e3c0:	21400426 	beq	r4,r5,1000e3d4 <__muldf3+0x650>
1000e3c4:	9149883a 	add	r4,r18,r5
1000e3c8:	24a5803a 	cmpltu	r18,r4,r18
1000e3cc:	8ca3883a 	add	r17,r17,r18
1000e3d0:	2025883a 	mov	r18,r4
1000e3d4:	8900402c 	andhi	r4,r17,256
1000e3d8:	20000426 	beq	r4,zero,1000e3ec <__muldf3+0x668>
1000e3dc:	18810004 	addi	r2,r3,1024
1000e3e0:	00ffc034 	movhi	r3,65280
1000e3e4:	18ffffc4 	addi	r3,r3,-1
1000e3e8:	88e2703a 	and	r17,r17,r3
1000e3ec:	00c1ff84 	movi	r3,2046
1000e3f0:	18bf1416 	blt	r3,r2,1000e044 <__alt_data_end+0xf800e044>
1000e3f4:	882c977a 	slli	r22,r17,29
1000e3f8:	9024d0fa 	srli	r18,r18,3
1000e3fc:	8822927a 	slli	r17,r17,9
1000e400:	1081ffcc 	andi	r2,r2,2047
1000e404:	b4acb03a 	or	r22,r22,r18
1000e408:	8820d33a 	srli	r16,r17,12
1000e40c:	3027883a 	mov	r19,r6
1000e410:	003ebb06 	br	1000df00 <__alt_data_end+0xf800df00>
1000e414:	8080022c 	andhi	r2,r16,8
1000e418:	10000926 	beq	r2,zero,1000e440 <__muldf3+0x6bc>
1000e41c:	8880022c 	andhi	r2,r17,8
1000e420:	1000071e 	bne	r2,zero,1000e440 <__muldf3+0x6bc>
1000e424:	00800434 	movhi	r2,16
1000e428:	8c000234 	orhi	r16,r17,8
1000e42c:	10bfffc4 	addi	r2,r2,-1
1000e430:	e027883a 	mov	r19,fp
1000e434:	80a0703a 	and	r16,r16,r2
1000e438:	902d883a 	mov	r22,r18
1000e43c:	003f1806 	br	1000e0a0 <__alt_data_end+0xf800e0a0>
1000e440:	00800434 	movhi	r2,16
1000e444:	84000234 	orhi	r16,r16,8
1000e448:	10bfffc4 	addi	r2,r2,-1
1000e44c:	80a0703a 	and	r16,r16,r2
1000e450:	003f1306 	br	1000e0a0 <__alt_data_end+0xf800e0a0>
1000e454:	147ff604 	addi	r17,r2,-40
1000e458:	3462983a 	sll	r17,r6,r17
1000e45c:	0025883a 	mov	r18,zero
1000e460:	003ef406 	br	1000e034 <__alt_data_end+0xf800e034>
1000e464:	3009883a 	mov	r4,r6
1000e468:	d9400215 	stw	r5,8(sp)
1000e46c:	d9800715 	stw	r6,28(sp)
1000e470:	da400415 	stw	r9,16(sp)
1000e474:	da800315 	stw	r10,12(sp)
1000e478:	000f0ec0 	call	1000f0ec <__clzsi2>
1000e47c:	10800804 	addi	r2,r2,32
1000e480:	da800317 	ldw	r10,12(sp)
1000e484:	da400417 	ldw	r9,16(sp)
1000e488:	d9800717 	ldw	r6,28(sp)
1000e48c:	d9400217 	ldw	r5,8(sp)
1000e490:	003ede06 	br	1000e00c <__alt_data_end+0xf800e00c>
1000e494:	143ff604 	addi	r16,r2,-40
1000e498:	ac20983a 	sll	r16,r21,r16
1000e49c:	002d883a 	mov	r22,zero
1000e4a0:	003ec206 	br	1000dfac <__alt_data_end+0xf800dfac>
1000e4a4:	d9800715 	stw	r6,28(sp)
1000e4a8:	d9c00215 	stw	r7,8(sp)
1000e4ac:	da400415 	stw	r9,16(sp)
1000e4b0:	000f0ec0 	call	1000f0ec <__clzsi2>
1000e4b4:	10800804 	addi	r2,r2,32
1000e4b8:	da400417 	ldw	r9,16(sp)
1000e4bc:	d9c00217 	ldw	r7,8(sp)
1000e4c0:	d9800717 	ldw	r6,28(sp)
1000e4c4:	003eaf06 	br	1000df84 <__alt_data_end+0xf800df84>
1000e4c8:	00c00044 	movi	r3,1
1000e4cc:	1887c83a 	sub	r3,r3,r2
1000e4d0:	01000e04 	movi	r4,56
1000e4d4:	20fe8616 	blt	r4,r3,1000def0 <__alt_data_end+0xf800def0>
1000e4d8:	010007c4 	movi	r4,31
1000e4dc:	20c01b16 	blt	r4,r3,1000e54c <__muldf3+0x7c8>
1000e4e0:	00800804 	movi	r2,32
1000e4e4:	10c5c83a 	sub	r2,r2,r3
1000e4e8:	888a983a 	sll	r5,r17,r2
1000e4ec:	90c8d83a 	srl	r4,r18,r3
1000e4f0:	9084983a 	sll	r2,r18,r2
1000e4f4:	88e2d83a 	srl	r17,r17,r3
1000e4f8:	2906b03a 	or	r3,r5,r4
1000e4fc:	1004c03a 	cmpne	r2,r2,zero
1000e500:	1886b03a 	or	r3,r3,r2
1000e504:	188001cc 	andi	r2,r3,7
1000e508:	10000726 	beq	r2,zero,1000e528 <__muldf3+0x7a4>
1000e50c:	188003cc 	andi	r2,r3,15
1000e510:	01000104 	movi	r4,4
1000e514:	11000426 	beq	r2,r4,1000e528 <__muldf3+0x7a4>
1000e518:	1805883a 	mov	r2,r3
1000e51c:	10c00104 	addi	r3,r2,4
1000e520:	1885803a 	cmpltu	r2,r3,r2
1000e524:	88a3883a 	add	r17,r17,r2
1000e528:	8880202c 	andhi	r2,r17,128
1000e52c:	10001c26 	beq	r2,zero,1000e5a0 <__muldf3+0x81c>
1000e530:	3027883a 	mov	r19,r6
1000e534:	00800044 	movi	r2,1
1000e538:	0021883a 	mov	r16,zero
1000e53c:	002d883a 	mov	r22,zero
1000e540:	003e6f06 	br	1000df00 <__alt_data_end+0xf800df00>
1000e544:	4007883a 	mov	r3,r8
1000e548:	003f9706 	br	1000e3a8 <__alt_data_end+0xf800e3a8>
1000e54c:	017ff844 	movi	r5,-31
1000e550:	2885c83a 	sub	r2,r5,r2
1000e554:	888ad83a 	srl	r5,r17,r2
1000e558:	00800804 	movi	r2,32
1000e55c:	18801a26 	beq	r3,r2,1000e5c8 <__muldf3+0x844>
1000e560:	01001004 	movi	r4,64
1000e564:	20c7c83a 	sub	r3,r4,r3
1000e568:	88e2983a 	sll	r17,r17,r3
1000e56c:	8ca4b03a 	or	r18,r17,r18
1000e570:	9004c03a 	cmpne	r2,r18,zero
1000e574:	2884b03a 	or	r2,r5,r2
1000e578:	144001cc 	andi	r17,r2,7
1000e57c:	88000d1e 	bne	r17,zero,1000e5b4 <__muldf3+0x830>
1000e580:	0021883a 	mov	r16,zero
1000e584:	102cd0fa 	srli	r22,r2,3
1000e588:	3027883a 	mov	r19,r6
1000e58c:	0005883a 	mov	r2,zero
1000e590:	b46cb03a 	or	r22,r22,r17
1000e594:	003e5a06 	br	1000df00 <__alt_data_end+0xf800df00>
1000e598:	1007883a 	mov	r3,r2
1000e59c:	0023883a 	mov	r17,zero
1000e5a0:	8820927a 	slli	r16,r17,9
1000e5a4:	1805883a 	mov	r2,r3
1000e5a8:	8822977a 	slli	r17,r17,29
1000e5ac:	8020d33a 	srli	r16,r16,12
1000e5b0:	003ff406 	br	1000e584 <__alt_data_end+0xf800e584>
1000e5b4:	10c003cc 	andi	r3,r2,15
1000e5b8:	01000104 	movi	r4,4
1000e5bc:	193ff626 	beq	r3,r4,1000e598 <__alt_data_end+0xf800e598>
1000e5c0:	0023883a 	mov	r17,zero
1000e5c4:	003fd506 	br	1000e51c <__alt_data_end+0xf800e51c>
1000e5c8:	0023883a 	mov	r17,zero
1000e5cc:	003fe706 	br	1000e56c <__alt_data_end+0xf800e56c>
1000e5d0:	00800434 	movhi	r2,16
1000e5d4:	8c000234 	orhi	r16,r17,8
1000e5d8:	10bfffc4 	addi	r2,r2,-1
1000e5dc:	3027883a 	mov	r19,r6
1000e5e0:	80a0703a 	and	r16,r16,r2
1000e5e4:	902d883a 	mov	r22,r18
1000e5e8:	003ead06 	br	1000e0a0 <__alt_data_end+0xf800e0a0>

1000e5ec <__subdf3>:
1000e5ec:	02000434 	movhi	r8,16
1000e5f0:	423fffc4 	addi	r8,r8,-1
1000e5f4:	defffb04 	addi	sp,sp,-20
1000e5f8:	2a14703a 	and	r10,r5,r8
1000e5fc:	3812d53a 	srli	r9,r7,20
1000e600:	3a10703a 	and	r8,r7,r8
1000e604:	2006d77a 	srli	r3,r4,29
1000e608:	3004d77a 	srli	r2,r6,29
1000e60c:	dc000015 	stw	r16,0(sp)
1000e610:	501490fa 	slli	r10,r10,3
1000e614:	2820d53a 	srli	r16,r5,20
1000e618:	401090fa 	slli	r8,r8,3
1000e61c:	dc800215 	stw	r18,8(sp)
1000e620:	dc400115 	stw	r17,4(sp)
1000e624:	dfc00415 	stw	ra,16(sp)
1000e628:	202290fa 	slli	r17,r4,3
1000e62c:	dcc00315 	stw	r19,12(sp)
1000e630:	4a41ffcc 	andi	r9,r9,2047
1000e634:	0101ffc4 	movi	r4,2047
1000e638:	2824d7fa 	srli	r18,r5,31
1000e63c:	8401ffcc 	andi	r16,r16,2047
1000e640:	50c6b03a 	or	r3,r10,r3
1000e644:	380ed7fa 	srli	r7,r7,31
1000e648:	408ab03a 	or	r5,r8,r2
1000e64c:	300c90fa 	slli	r6,r6,3
1000e650:	49009626 	beq	r9,r4,1000e8ac <__subdf3+0x2c0>
1000e654:	39c0005c 	xori	r7,r7,1
1000e658:	8245c83a 	sub	r2,r16,r9
1000e65c:	3c807426 	beq	r7,r18,1000e830 <__subdf3+0x244>
1000e660:	0080af0e 	bge	zero,r2,1000e920 <__subdf3+0x334>
1000e664:	48002a1e 	bne	r9,zero,1000e710 <__subdf3+0x124>
1000e668:	2988b03a 	or	r4,r5,r6
1000e66c:	20009a1e 	bne	r4,zero,1000e8d8 <__subdf3+0x2ec>
1000e670:	888001cc 	andi	r2,r17,7
1000e674:	10000726 	beq	r2,zero,1000e694 <__subdf3+0xa8>
1000e678:	888003cc 	andi	r2,r17,15
1000e67c:	01000104 	movi	r4,4
1000e680:	11000426 	beq	r2,r4,1000e694 <__subdf3+0xa8>
1000e684:	890b883a 	add	r5,r17,r4
1000e688:	2c63803a 	cmpltu	r17,r5,r17
1000e68c:	1c47883a 	add	r3,r3,r17
1000e690:	2823883a 	mov	r17,r5
1000e694:	1880202c 	andhi	r2,r3,128
1000e698:	10005926 	beq	r2,zero,1000e800 <__subdf3+0x214>
1000e69c:	84000044 	addi	r16,r16,1
1000e6a0:	0081ffc4 	movi	r2,2047
1000e6a4:	8080be26 	beq	r16,r2,1000e9a0 <__subdf3+0x3b4>
1000e6a8:	017fe034 	movhi	r5,65408
1000e6ac:	297fffc4 	addi	r5,r5,-1
1000e6b0:	1946703a 	and	r3,r3,r5
1000e6b4:	1804977a 	slli	r2,r3,29
1000e6b8:	1806927a 	slli	r3,r3,9
1000e6bc:	8822d0fa 	srli	r17,r17,3
1000e6c0:	8401ffcc 	andi	r16,r16,2047
1000e6c4:	180ad33a 	srli	r5,r3,12
1000e6c8:	9100004c 	andi	r4,r18,1
1000e6cc:	1444b03a 	or	r2,r2,r17
1000e6d0:	80c1ffcc 	andi	r3,r16,2047
1000e6d4:	1820953a 	slli	r16,r3,20
1000e6d8:	20c03fcc 	andi	r3,r4,255
1000e6dc:	180897fa 	slli	r4,r3,31
1000e6e0:	00c00434 	movhi	r3,16
1000e6e4:	18ffffc4 	addi	r3,r3,-1
1000e6e8:	28c6703a 	and	r3,r5,r3
1000e6ec:	1c06b03a 	or	r3,r3,r16
1000e6f0:	1906b03a 	or	r3,r3,r4
1000e6f4:	dfc00417 	ldw	ra,16(sp)
1000e6f8:	dcc00317 	ldw	r19,12(sp)
1000e6fc:	dc800217 	ldw	r18,8(sp)
1000e700:	dc400117 	ldw	r17,4(sp)
1000e704:	dc000017 	ldw	r16,0(sp)
1000e708:	dec00504 	addi	sp,sp,20
1000e70c:	f800283a 	ret
1000e710:	0101ffc4 	movi	r4,2047
1000e714:	813fd626 	beq	r16,r4,1000e670 <__alt_data_end+0xf800e670>
1000e718:	29402034 	orhi	r5,r5,128
1000e71c:	01000e04 	movi	r4,56
1000e720:	2080a316 	blt	r4,r2,1000e9b0 <__subdf3+0x3c4>
1000e724:	010007c4 	movi	r4,31
1000e728:	2080c616 	blt	r4,r2,1000ea44 <__subdf3+0x458>
1000e72c:	01000804 	movi	r4,32
1000e730:	2089c83a 	sub	r4,r4,r2
1000e734:	2910983a 	sll	r8,r5,r4
1000e738:	308ed83a 	srl	r7,r6,r2
1000e73c:	3108983a 	sll	r4,r6,r4
1000e740:	2884d83a 	srl	r2,r5,r2
1000e744:	41ccb03a 	or	r6,r8,r7
1000e748:	2008c03a 	cmpne	r4,r4,zero
1000e74c:	310cb03a 	or	r6,r6,r4
1000e750:	898dc83a 	sub	r6,r17,r6
1000e754:	89a3803a 	cmpltu	r17,r17,r6
1000e758:	1887c83a 	sub	r3,r3,r2
1000e75c:	1c47c83a 	sub	r3,r3,r17
1000e760:	3023883a 	mov	r17,r6
1000e764:	1880202c 	andhi	r2,r3,128
1000e768:	10002326 	beq	r2,zero,1000e7f8 <__subdf3+0x20c>
1000e76c:	04c02034 	movhi	r19,128
1000e770:	9cffffc4 	addi	r19,r19,-1
1000e774:	1ce6703a 	and	r19,r3,r19
1000e778:	98007a26 	beq	r19,zero,1000e964 <__subdf3+0x378>
1000e77c:	9809883a 	mov	r4,r19
1000e780:	000f0ec0 	call	1000f0ec <__clzsi2>
1000e784:	113ffe04 	addi	r4,r2,-8
1000e788:	00c007c4 	movi	r3,31
1000e78c:	19007b16 	blt	r3,r4,1000e97c <__subdf3+0x390>
1000e790:	00800804 	movi	r2,32
1000e794:	1105c83a 	sub	r2,r2,r4
1000e798:	8884d83a 	srl	r2,r17,r2
1000e79c:	9906983a 	sll	r3,r19,r4
1000e7a0:	8922983a 	sll	r17,r17,r4
1000e7a4:	10c4b03a 	or	r2,r2,r3
1000e7a8:	24007816 	blt	r4,r16,1000e98c <__subdf3+0x3a0>
1000e7ac:	2421c83a 	sub	r16,r4,r16
1000e7b0:	80c00044 	addi	r3,r16,1
1000e7b4:	010007c4 	movi	r4,31
1000e7b8:	20c09516 	blt	r4,r3,1000ea10 <__subdf3+0x424>
1000e7bc:	01400804 	movi	r5,32
1000e7c0:	28cbc83a 	sub	r5,r5,r3
1000e7c4:	88c8d83a 	srl	r4,r17,r3
1000e7c8:	8962983a 	sll	r17,r17,r5
1000e7cc:	114a983a 	sll	r5,r2,r5
1000e7d0:	10c6d83a 	srl	r3,r2,r3
1000e7d4:	8804c03a 	cmpne	r2,r17,zero
1000e7d8:	290ab03a 	or	r5,r5,r4
1000e7dc:	28a2b03a 	or	r17,r5,r2
1000e7e0:	0021883a 	mov	r16,zero
1000e7e4:	003fa206 	br	1000e670 <__alt_data_end+0xf800e670>
1000e7e8:	2090b03a 	or	r8,r4,r2
1000e7ec:	40018e26 	beq	r8,zero,1000ee28 <__subdf3+0x83c>
1000e7f0:	1007883a 	mov	r3,r2
1000e7f4:	2023883a 	mov	r17,r4
1000e7f8:	888001cc 	andi	r2,r17,7
1000e7fc:	103f9e1e 	bne	r2,zero,1000e678 <__alt_data_end+0xf800e678>
1000e800:	1804977a 	slli	r2,r3,29
1000e804:	8822d0fa 	srli	r17,r17,3
1000e808:	1810d0fa 	srli	r8,r3,3
1000e80c:	9100004c 	andi	r4,r18,1
1000e810:	1444b03a 	or	r2,r2,r17
1000e814:	00c1ffc4 	movi	r3,2047
1000e818:	80c02826 	beq	r16,r3,1000e8bc <__subdf3+0x2d0>
1000e81c:	01400434 	movhi	r5,16
1000e820:	297fffc4 	addi	r5,r5,-1
1000e824:	80e0703a 	and	r16,r16,r3
1000e828:	414a703a 	and	r5,r8,r5
1000e82c:	003fa806 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000e830:	0080630e 	bge	zero,r2,1000e9c0 <__subdf3+0x3d4>
1000e834:	48003026 	beq	r9,zero,1000e8f8 <__subdf3+0x30c>
1000e838:	0101ffc4 	movi	r4,2047
1000e83c:	813f8c26 	beq	r16,r4,1000e670 <__alt_data_end+0xf800e670>
1000e840:	29402034 	orhi	r5,r5,128
1000e844:	01000e04 	movi	r4,56
1000e848:	2080a90e 	bge	r4,r2,1000eaf0 <__subdf3+0x504>
1000e84c:	298cb03a 	or	r6,r5,r6
1000e850:	3012c03a 	cmpne	r9,r6,zero
1000e854:	0005883a 	mov	r2,zero
1000e858:	4c53883a 	add	r9,r9,r17
1000e85c:	4c63803a 	cmpltu	r17,r9,r17
1000e860:	10c7883a 	add	r3,r2,r3
1000e864:	88c7883a 	add	r3,r17,r3
1000e868:	4823883a 	mov	r17,r9
1000e86c:	1880202c 	andhi	r2,r3,128
1000e870:	1000d026 	beq	r2,zero,1000ebb4 <__subdf3+0x5c8>
1000e874:	84000044 	addi	r16,r16,1
1000e878:	0081ffc4 	movi	r2,2047
1000e87c:	8080fe26 	beq	r16,r2,1000ec78 <__subdf3+0x68c>
1000e880:	00bfe034 	movhi	r2,65408
1000e884:	10bfffc4 	addi	r2,r2,-1
1000e888:	1886703a 	and	r3,r3,r2
1000e88c:	880ad07a 	srli	r5,r17,1
1000e890:	180497fa 	slli	r2,r3,31
1000e894:	8900004c 	andi	r4,r17,1
1000e898:	2922b03a 	or	r17,r5,r4
1000e89c:	1806d07a 	srli	r3,r3,1
1000e8a0:	1462b03a 	or	r17,r2,r17
1000e8a4:	3825883a 	mov	r18,r7
1000e8a8:	003f7106 	br	1000e670 <__alt_data_end+0xf800e670>
1000e8ac:	2984b03a 	or	r2,r5,r6
1000e8b0:	103f6826 	beq	r2,zero,1000e654 <__alt_data_end+0xf800e654>
1000e8b4:	39c03fcc 	andi	r7,r7,255
1000e8b8:	003f6706 	br	1000e658 <__alt_data_end+0xf800e658>
1000e8bc:	4086b03a 	or	r3,r8,r2
1000e8c0:	18015226 	beq	r3,zero,1000ee0c <__subdf3+0x820>
1000e8c4:	00c00434 	movhi	r3,16
1000e8c8:	41400234 	orhi	r5,r8,8
1000e8cc:	18ffffc4 	addi	r3,r3,-1
1000e8d0:	28ca703a 	and	r5,r5,r3
1000e8d4:	003f7e06 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000e8d8:	10bfffc4 	addi	r2,r2,-1
1000e8dc:	1000491e 	bne	r2,zero,1000ea04 <__subdf3+0x418>
1000e8e0:	898fc83a 	sub	r7,r17,r6
1000e8e4:	89e3803a 	cmpltu	r17,r17,r7
1000e8e8:	1947c83a 	sub	r3,r3,r5
1000e8ec:	1c47c83a 	sub	r3,r3,r17
1000e8f0:	3823883a 	mov	r17,r7
1000e8f4:	003f9b06 	br	1000e764 <__alt_data_end+0xf800e764>
1000e8f8:	2988b03a 	or	r4,r5,r6
1000e8fc:	203f5c26 	beq	r4,zero,1000e670 <__alt_data_end+0xf800e670>
1000e900:	10bfffc4 	addi	r2,r2,-1
1000e904:	1000931e 	bne	r2,zero,1000eb54 <__subdf3+0x568>
1000e908:	898d883a 	add	r6,r17,r6
1000e90c:	3463803a 	cmpltu	r17,r6,r17
1000e910:	1947883a 	add	r3,r3,r5
1000e914:	88c7883a 	add	r3,r17,r3
1000e918:	3023883a 	mov	r17,r6
1000e91c:	003fd306 	br	1000e86c <__alt_data_end+0xf800e86c>
1000e920:	1000541e 	bne	r2,zero,1000ea74 <__subdf3+0x488>
1000e924:	80800044 	addi	r2,r16,1
1000e928:	1081ffcc 	andi	r2,r2,2047
1000e92c:	01000044 	movi	r4,1
1000e930:	2080a20e 	bge	r4,r2,1000ebbc <__subdf3+0x5d0>
1000e934:	8989c83a 	sub	r4,r17,r6
1000e938:	8905803a 	cmpltu	r2,r17,r4
1000e93c:	1967c83a 	sub	r19,r3,r5
1000e940:	98a7c83a 	sub	r19,r19,r2
1000e944:	9880202c 	andhi	r2,r19,128
1000e948:	10006326 	beq	r2,zero,1000ead8 <__subdf3+0x4ec>
1000e94c:	3463c83a 	sub	r17,r6,r17
1000e950:	28c7c83a 	sub	r3,r5,r3
1000e954:	344d803a 	cmpltu	r6,r6,r17
1000e958:	19a7c83a 	sub	r19,r3,r6
1000e95c:	3825883a 	mov	r18,r7
1000e960:	983f861e 	bne	r19,zero,1000e77c <__alt_data_end+0xf800e77c>
1000e964:	8809883a 	mov	r4,r17
1000e968:	000f0ec0 	call	1000f0ec <__clzsi2>
1000e96c:	10800804 	addi	r2,r2,32
1000e970:	113ffe04 	addi	r4,r2,-8
1000e974:	00c007c4 	movi	r3,31
1000e978:	193f850e 	bge	r3,r4,1000e790 <__alt_data_end+0xf800e790>
1000e97c:	10bff604 	addi	r2,r2,-40
1000e980:	8884983a 	sll	r2,r17,r2
1000e984:	0023883a 	mov	r17,zero
1000e988:	243f880e 	bge	r4,r16,1000e7ac <__alt_data_end+0xf800e7ac>
1000e98c:	00ffe034 	movhi	r3,65408
1000e990:	18ffffc4 	addi	r3,r3,-1
1000e994:	8121c83a 	sub	r16,r16,r4
1000e998:	10c6703a 	and	r3,r2,r3
1000e99c:	003f3406 	br	1000e670 <__alt_data_end+0xf800e670>
1000e9a0:	9100004c 	andi	r4,r18,1
1000e9a4:	000b883a 	mov	r5,zero
1000e9a8:	0005883a 	mov	r2,zero
1000e9ac:	003f4806 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000e9b0:	298cb03a 	or	r6,r5,r6
1000e9b4:	300cc03a 	cmpne	r6,r6,zero
1000e9b8:	0005883a 	mov	r2,zero
1000e9bc:	003f6406 	br	1000e750 <__alt_data_end+0xf800e750>
1000e9c0:	10009a1e 	bne	r2,zero,1000ec2c <__subdf3+0x640>
1000e9c4:	82400044 	addi	r9,r16,1
1000e9c8:	4881ffcc 	andi	r2,r9,2047
1000e9cc:	02800044 	movi	r10,1
1000e9d0:	5080670e 	bge	r10,r2,1000eb70 <__subdf3+0x584>
1000e9d4:	0081ffc4 	movi	r2,2047
1000e9d8:	4880af26 	beq	r9,r2,1000ec98 <__subdf3+0x6ac>
1000e9dc:	898d883a 	add	r6,r17,r6
1000e9e0:	1945883a 	add	r2,r3,r5
1000e9e4:	3447803a 	cmpltu	r3,r6,r17
1000e9e8:	1887883a 	add	r3,r3,r2
1000e9ec:	182297fa 	slli	r17,r3,31
1000e9f0:	300cd07a 	srli	r6,r6,1
1000e9f4:	1806d07a 	srli	r3,r3,1
1000e9f8:	4821883a 	mov	r16,r9
1000e9fc:	89a2b03a 	or	r17,r17,r6
1000ea00:	003f1b06 	br	1000e670 <__alt_data_end+0xf800e670>
1000ea04:	0101ffc4 	movi	r4,2047
1000ea08:	813f441e 	bne	r16,r4,1000e71c <__alt_data_end+0xf800e71c>
1000ea0c:	003f1806 	br	1000e670 <__alt_data_end+0xf800e670>
1000ea10:	843ff844 	addi	r16,r16,-31
1000ea14:	01400804 	movi	r5,32
1000ea18:	1408d83a 	srl	r4,r2,r16
1000ea1c:	19405026 	beq	r3,r5,1000eb60 <__subdf3+0x574>
1000ea20:	01401004 	movi	r5,64
1000ea24:	28c7c83a 	sub	r3,r5,r3
1000ea28:	10c4983a 	sll	r2,r2,r3
1000ea2c:	88a2b03a 	or	r17,r17,r2
1000ea30:	8822c03a 	cmpne	r17,r17,zero
1000ea34:	2462b03a 	or	r17,r4,r17
1000ea38:	0007883a 	mov	r3,zero
1000ea3c:	0021883a 	mov	r16,zero
1000ea40:	003f6d06 	br	1000e7f8 <__alt_data_end+0xf800e7f8>
1000ea44:	11fff804 	addi	r7,r2,-32
1000ea48:	01000804 	movi	r4,32
1000ea4c:	29ced83a 	srl	r7,r5,r7
1000ea50:	11004526 	beq	r2,r4,1000eb68 <__subdf3+0x57c>
1000ea54:	01001004 	movi	r4,64
1000ea58:	2089c83a 	sub	r4,r4,r2
1000ea5c:	2904983a 	sll	r2,r5,r4
1000ea60:	118cb03a 	or	r6,r2,r6
1000ea64:	300cc03a 	cmpne	r6,r6,zero
1000ea68:	398cb03a 	or	r6,r7,r6
1000ea6c:	0005883a 	mov	r2,zero
1000ea70:	003f3706 	br	1000e750 <__alt_data_end+0xf800e750>
1000ea74:	80002a26 	beq	r16,zero,1000eb20 <__subdf3+0x534>
1000ea78:	0101ffc4 	movi	r4,2047
1000ea7c:	49006626 	beq	r9,r4,1000ec18 <__subdf3+0x62c>
1000ea80:	0085c83a 	sub	r2,zero,r2
1000ea84:	18c02034 	orhi	r3,r3,128
1000ea88:	01000e04 	movi	r4,56
1000ea8c:	20807e16 	blt	r4,r2,1000ec88 <__subdf3+0x69c>
1000ea90:	010007c4 	movi	r4,31
1000ea94:	2080e716 	blt	r4,r2,1000ee34 <__subdf3+0x848>
1000ea98:	01000804 	movi	r4,32
1000ea9c:	2089c83a 	sub	r4,r4,r2
1000eaa0:	1914983a 	sll	r10,r3,r4
1000eaa4:	8890d83a 	srl	r8,r17,r2
1000eaa8:	8908983a 	sll	r4,r17,r4
1000eaac:	1884d83a 	srl	r2,r3,r2
1000eab0:	5222b03a 	or	r17,r10,r8
1000eab4:	2006c03a 	cmpne	r3,r4,zero
1000eab8:	88e2b03a 	or	r17,r17,r3
1000eabc:	3463c83a 	sub	r17,r6,r17
1000eac0:	2885c83a 	sub	r2,r5,r2
1000eac4:	344d803a 	cmpltu	r6,r6,r17
1000eac8:	1187c83a 	sub	r3,r2,r6
1000eacc:	4821883a 	mov	r16,r9
1000ead0:	3825883a 	mov	r18,r7
1000ead4:	003f2306 	br	1000e764 <__alt_data_end+0xf800e764>
1000ead8:	24d0b03a 	or	r8,r4,r19
1000eadc:	40001b1e 	bne	r8,zero,1000eb4c <__subdf3+0x560>
1000eae0:	0005883a 	mov	r2,zero
1000eae4:	0009883a 	mov	r4,zero
1000eae8:	0021883a 	mov	r16,zero
1000eaec:	003f4906 	br	1000e814 <__alt_data_end+0xf800e814>
1000eaf0:	010007c4 	movi	r4,31
1000eaf4:	20803a16 	blt	r4,r2,1000ebe0 <__subdf3+0x5f4>
1000eaf8:	01000804 	movi	r4,32
1000eafc:	2089c83a 	sub	r4,r4,r2
1000eb00:	2912983a 	sll	r9,r5,r4
1000eb04:	3090d83a 	srl	r8,r6,r2
1000eb08:	3108983a 	sll	r4,r6,r4
1000eb0c:	2884d83a 	srl	r2,r5,r2
1000eb10:	4a12b03a 	or	r9,r9,r8
1000eb14:	2008c03a 	cmpne	r4,r4,zero
1000eb18:	4912b03a 	or	r9,r9,r4
1000eb1c:	003f4e06 	br	1000e858 <__alt_data_end+0xf800e858>
1000eb20:	1c48b03a 	or	r4,r3,r17
1000eb24:	20003c26 	beq	r4,zero,1000ec18 <__subdf3+0x62c>
1000eb28:	0084303a 	nor	r2,zero,r2
1000eb2c:	1000381e 	bne	r2,zero,1000ec10 <__subdf3+0x624>
1000eb30:	3463c83a 	sub	r17,r6,r17
1000eb34:	28c5c83a 	sub	r2,r5,r3
1000eb38:	344d803a 	cmpltu	r6,r6,r17
1000eb3c:	1187c83a 	sub	r3,r2,r6
1000eb40:	4821883a 	mov	r16,r9
1000eb44:	3825883a 	mov	r18,r7
1000eb48:	003f0606 	br	1000e764 <__alt_data_end+0xf800e764>
1000eb4c:	2023883a 	mov	r17,r4
1000eb50:	003f0906 	br	1000e778 <__alt_data_end+0xf800e778>
1000eb54:	0101ffc4 	movi	r4,2047
1000eb58:	813f3a1e 	bne	r16,r4,1000e844 <__alt_data_end+0xf800e844>
1000eb5c:	003ec406 	br	1000e670 <__alt_data_end+0xf800e670>
1000eb60:	0005883a 	mov	r2,zero
1000eb64:	003fb106 	br	1000ea2c <__alt_data_end+0xf800ea2c>
1000eb68:	0005883a 	mov	r2,zero
1000eb6c:	003fbc06 	br	1000ea60 <__alt_data_end+0xf800ea60>
1000eb70:	1c44b03a 	or	r2,r3,r17
1000eb74:	80008e1e 	bne	r16,zero,1000edb0 <__subdf3+0x7c4>
1000eb78:	1000c826 	beq	r2,zero,1000ee9c <__subdf3+0x8b0>
1000eb7c:	2984b03a 	or	r2,r5,r6
1000eb80:	103ebb26 	beq	r2,zero,1000e670 <__alt_data_end+0xf800e670>
1000eb84:	8989883a 	add	r4,r17,r6
1000eb88:	1945883a 	add	r2,r3,r5
1000eb8c:	2447803a 	cmpltu	r3,r4,r17
1000eb90:	1887883a 	add	r3,r3,r2
1000eb94:	1880202c 	andhi	r2,r3,128
1000eb98:	2023883a 	mov	r17,r4
1000eb9c:	103f1626 	beq	r2,zero,1000e7f8 <__alt_data_end+0xf800e7f8>
1000eba0:	00bfe034 	movhi	r2,65408
1000eba4:	10bfffc4 	addi	r2,r2,-1
1000eba8:	5021883a 	mov	r16,r10
1000ebac:	1886703a 	and	r3,r3,r2
1000ebb0:	003eaf06 	br	1000e670 <__alt_data_end+0xf800e670>
1000ebb4:	3825883a 	mov	r18,r7
1000ebb8:	003f0f06 	br	1000e7f8 <__alt_data_end+0xf800e7f8>
1000ebbc:	1c44b03a 	or	r2,r3,r17
1000ebc0:	8000251e 	bne	r16,zero,1000ec58 <__subdf3+0x66c>
1000ebc4:	1000661e 	bne	r2,zero,1000ed60 <__subdf3+0x774>
1000ebc8:	2990b03a 	or	r8,r5,r6
1000ebcc:	40009626 	beq	r8,zero,1000ee28 <__subdf3+0x83c>
1000ebd0:	2807883a 	mov	r3,r5
1000ebd4:	3023883a 	mov	r17,r6
1000ebd8:	3825883a 	mov	r18,r7
1000ebdc:	003ea406 	br	1000e670 <__alt_data_end+0xf800e670>
1000ebe0:	127ff804 	addi	r9,r2,-32
1000ebe4:	01000804 	movi	r4,32
1000ebe8:	2a52d83a 	srl	r9,r5,r9
1000ebec:	11008c26 	beq	r2,r4,1000ee20 <__subdf3+0x834>
1000ebf0:	01001004 	movi	r4,64
1000ebf4:	2085c83a 	sub	r2,r4,r2
1000ebf8:	2884983a 	sll	r2,r5,r2
1000ebfc:	118cb03a 	or	r6,r2,r6
1000ec00:	300cc03a 	cmpne	r6,r6,zero
1000ec04:	4992b03a 	or	r9,r9,r6
1000ec08:	0005883a 	mov	r2,zero
1000ec0c:	003f1206 	br	1000e858 <__alt_data_end+0xf800e858>
1000ec10:	0101ffc4 	movi	r4,2047
1000ec14:	493f9c1e 	bne	r9,r4,1000ea88 <__alt_data_end+0xf800ea88>
1000ec18:	2807883a 	mov	r3,r5
1000ec1c:	3023883a 	mov	r17,r6
1000ec20:	4821883a 	mov	r16,r9
1000ec24:	3825883a 	mov	r18,r7
1000ec28:	003e9106 	br	1000e670 <__alt_data_end+0xf800e670>
1000ec2c:	80001f1e 	bne	r16,zero,1000ecac <__subdf3+0x6c0>
1000ec30:	1c48b03a 	or	r4,r3,r17
1000ec34:	20005a26 	beq	r4,zero,1000eda0 <__subdf3+0x7b4>
1000ec38:	0084303a 	nor	r2,zero,r2
1000ec3c:	1000561e 	bne	r2,zero,1000ed98 <__subdf3+0x7ac>
1000ec40:	89a3883a 	add	r17,r17,r6
1000ec44:	1945883a 	add	r2,r3,r5
1000ec48:	898d803a 	cmpltu	r6,r17,r6
1000ec4c:	3087883a 	add	r3,r6,r2
1000ec50:	4821883a 	mov	r16,r9
1000ec54:	003f0506 	br	1000e86c <__alt_data_end+0xf800e86c>
1000ec58:	10002b1e 	bne	r2,zero,1000ed08 <__subdf3+0x71c>
1000ec5c:	2984b03a 	or	r2,r5,r6
1000ec60:	10008026 	beq	r2,zero,1000ee64 <__subdf3+0x878>
1000ec64:	2807883a 	mov	r3,r5
1000ec68:	3023883a 	mov	r17,r6
1000ec6c:	3825883a 	mov	r18,r7
1000ec70:	0401ffc4 	movi	r16,2047
1000ec74:	003e7e06 	br	1000e670 <__alt_data_end+0xf800e670>
1000ec78:	3809883a 	mov	r4,r7
1000ec7c:	0011883a 	mov	r8,zero
1000ec80:	0005883a 	mov	r2,zero
1000ec84:	003ee306 	br	1000e814 <__alt_data_end+0xf800e814>
1000ec88:	1c62b03a 	or	r17,r3,r17
1000ec8c:	8822c03a 	cmpne	r17,r17,zero
1000ec90:	0005883a 	mov	r2,zero
1000ec94:	003f8906 	br	1000eabc <__alt_data_end+0xf800eabc>
1000ec98:	3809883a 	mov	r4,r7
1000ec9c:	4821883a 	mov	r16,r9
1000eca0:	0011883a 	mov	r8,zero
1000eca4:	0005883a 	mov	r2,zero
1000eca8:	003eda06 	br	1000e814 <__alt_data_end+0xf800e814>
1000ecac:	0101ffc4 	movi	r4,2047
1000ecb0:	49003b26 	beq	r9,r4,1000eda0 <__subdf3+0x7b4>
1000ecb4:	0085c83a 	sub	r2,zero,r2
1000ecb8:	18c02034 	orhi	r3,r3,128
1000ecbc:	01000e04 	movi	r4,56
1000ecc0:	20806e16 	blt	r4,r2,1000ee7c <__subdf3+0x890>
1000ecc4:	010007c4 	movi	r4,31
1000ecc8:	20807716 	blt	r4,r2,1000eea8 <__subdf3+0x8bc>
1000eccc:	01000804 	movi	r4,32
1000ecd0:	2089c83a 	sub	r4,r4,r2
1000ecd4:	1914983a 	sll	r10,r3,r4
1000ecd8:	8890d83a 	srl	r8,r17,r2
1000ecdc:	8908983a 	sll	r4,r17,r4
1000ece0:	1884d83a 	srl	r2,r3,r2
1000ece4:	5222b03a 	or	r17,r10,r8
1000ece8:	2006c03a 	cmpne	r3,r4,zero
1000ecec:	88e2b03a 	or	r17,r17,r3
1000ecf0:	89a3883a 	add	r17,r17,r6
1000ecf4:	1145883a 	add	r2,r2,r5
1000ecf8:	898d803a 	cmpltu	r6,r17,r6
1000ecfc:	3087883a 	add	r3,r6,r2
1000ed00:	4821883a 	mov	r16,r9
1000ed04:	003ed906 	br	1000e86c <__alt_data_end+0xf800e86c>
1000ed08:	2984b03a 	or	r2,r5,r6
1000ed0c:	10004226 	beq	r2,zero,1000ee18 <__subdf3+0x82c>
1000ed10:	1808d0fa 	srli	r4,r3,3
1000ed14:	8822d0fa 	srli	r17,r17,3
1000ed18:	1806977a 	slli	r3,r3,29
1000ed1c:	2080022c 	andhi	r2,r4,8
1000ed20:	1c62b03a 	or	r17,r3,r17
1000ed24:	10000826 	beq	r2,zero,1000ed48 <__subdf3+0x75c>
1000ed28:	2812d0fa 	srli	r9,r5,3
1000ed2c:	4880022c 	andhi	r2,r9,8
1000ed30:	1000051e 	bne	r2,zero,1000ed48 <__subdf3+0x75c>
1000ed34:	300cd0fa 	srli	r6,r6,3
1000ed38:	2804977a 	slli	r2,r5,29
1000ed3c:	4809883a 	mov	r4,r9
1000ed40:	3825883a 	mov	r18,r7
1000ed44:	11a2b03a 	or	r17,r2,r6
1000ed48:	8806d77a 	srli	r3,r17,29
1000ed4c:	200890fa 	slli	r4,r4,3
1000ed50:	882290fa 	slli	r17,r17,3
1000ed54:	0401ffc4 	movi	r16,2047
1000ed58:	1906b03a 	or	r3,r3,r4
1000ed5c:	003e4406 	br	1000e670 <__alt_data_end+0xf800e670>
1000ed60:	2984b03a 	or	r2,r5,r6
1000ed64:	103e4226 	beq	r2,zero,1000e670 <__alt_data_end+0xf800e670>
1000ed68:	8989c83a 	sub	r4,r17,r6
1000ed6c:	8911803a 	cmpltu	r8,r17,r4
1000ed70:	1945c83a 	sub	r2,r3,r5
1000ed74:	1205c83a 	sub	r2,r2,r8
1000ed78:	1200202c 	andhi	r8,r2,128
1000ed7c:	403e9a26 	beq	r8,zero,1000e7e8 <__alt_data_end+0xf800e7e8>
1000ed80:	3463c83a 	sub	r17,r6,r17
1000ed84:	28c5c83a 	sub	r2,r5,r3
1000ed88:	344d803a 	cmpltu	r6,r6,r17
1000ed8c:	1187c83a 	sub	r3,r2,r6
1000ed90:	3825883a 	mov	r18,r7
1000ed94:	003e3606 	br	1000e670 <__alt_data_end+0xf800e670>
1000ed98:	0101ffc4 	movi	r4,2047
1000ed9c:	493fc71e 	bne	r9,r4,1000ecbc <__alt_data_end+0xf800ecbc>
1000eda0:	2807883a 	mov	r3,r5
1000eda4:	3023883a 	mov	r17,r6
1000eda8:	4821883a 	mov	r16,r9
1000edac:	003e3006 	br	1000e670 <__alt_data_end+0xf800e670>
1000edb0:	10003626 	beq	r2,zero,1000ee8c <__subdf3+0x8a0>
1000edb4:	2984b03a 	or	r2,r5,r6
1000edb8:	10001726 	beq	r2,zero,1000ee18 <__subdf3+0x82c>
1000edbc:	1808d0fa 	srli	r4,r3,3
1000edc0:	8822d0fa 	srli	r17,r17,3
1000edc4:	1806977a 	slli	r3,r3,29
1000edc8:	2080022c 	andhi	r2,r4,8
1000edcc:	1c62b03a 	or	r17,r3,r17
1000edd0:	10000726 	beq	r2,zero,1000edf0 <__subdf3+0x804>
1000edd4:	2812d0fa 	srli	r9,r5,3
1000edd8:	4880022c 	andhi	r2,r9,8
1000eddc:	1000041e 	bne	r2,zero,1000edf0 <__subdf3+0x804>
1000ede0:	300cd0fa 	srli	r6,r6,3
1000ede4:	2804977a 	slli	r2,r5,29
1000ede8:	4809883a 	mov	r4,r9
1000edec:	11a2b03a 	or	r17,r2,r6
1000edf0:	8806d77a 	srli	r3,r17,29
1000edf4:	200890fa 	slli	r4,r4,3
1000edf8:	882290fa 	slli	r17,r17,3
1000edfc:	3825883a 	mov	r18,r7
1000ee00:	1906b03a 	or	r3,r3,r4
1000ee04:	0401ffc4 	movi	r16,2047
1000ee08:	003e1906 	br	1000e670 <__alt_data_end+0xf800e670>
1000ee0c:	000b883a 	mov	r5,zero
1000ee10:	0005883a 	mov	r2,zero
1000ee14:	003e2e06 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000ee18:	0401ffc4 	movi	r16,2047
1000ee1c:	003e1406 	br	1000e670 <__alt_data_end+0xf800e670>
1000ee20:	0005883a 	mov	r2,zero
1000ee24:	003f7506 	br	1000ebfc <__alt_data_end+0xf800ebfc>
1000ee28:	0005883a 	mov	r2,zero
1000ee2c:	0009883a 	mov	r4,zero
1000ee30:	003e7806 	br	1000e814 <__alt_data_end+0xf800e814>
1000ee34:	123ff804 	addi	r8,r2,-32
1000ee38:	01000804 	movi	r4,32
1000ee3c:	1a10d83a 	srl	r8,r3,r8
1000ee40:	11002526 	beq	r2,r4,1000eed8 <__subdf3+0x8ec>
1000ee44:	01001004 	movi	r4,64
1000ee48:	2085c83a 	sub	r2,r4,r2
1000ee4c:	1884983a 	sll	r2,r3,r2
1000ee50:	1444b03a 	or	r2,r2,r17
1000ee54:	1004c03a 	cmpne	r2,r2,zero
1000ee58:	40a2b03a 	or	r17,r8,r2
1000ee5c:	0005883a 	mov	r2,zero
1000ee60:	003f1606 	br	1000eabc <__alt_data_end+0xf800eabc>
1000ee64:	02000434 	movhi	r8,16
1000ee68:	0009883a 	mov	r4,zero
1000ee6c:	423fffc4 	addi	r8,r8,-1
1000ee70:	00bfffc4 	movi	r2,-1
1000ee74:	0401ffc4 	movi	r16,2047
1000ee78:	003e6606 	br	1000e814 <__alt_data_end+0xf800e814>
1000ee7c:	1c62b03a 	or	r17,r3,r17
1000ee80:	8822c03a 	cmpne	r17,r17,zero
1000ee84:	0005883a 	mov	r2,zero
1000ee88:	003f9906 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000ee8c:	2807883a 	mov	r3,r5
1000ee90:	3023883a 	mov	r17,r6
1000ee94:	0401ffc4 	movi	r16,2047
1000ee98:	003df506 	br	1000e670 <__alt_data_end+0xf800e670>
1000ee9c:	2807883a 	mov	r3,r5
1000eea0:	3023883a 	mov	r17,r6
1000eea4:	003df206 	br	1000e670 <__alt_data_end+0xf800e670>
1000eea8:	123ff804 	addi	r8,r2,-32
1000eeac:	01000804 	movi	r4,32
1000eeb0:	1a10d83a 	srl	r8,r3,r8
1000eeb4:	11000a26 	beq	r2,r4,1000eee0 <__subdf3+0x8f4>
1000eeb8:	01001004 	movi	r4,64
1000eebc:	2085c83a 	sub	r2,r4,r2
1000eec0:	1884983a 	sll	r2,r3,r2
1000eec4:	1444b03a 	or	r2,r2,r17
1000eec8:	1004c03a 	cmpne	r2,r2,zero
1000eecc:	40a2b03a 	or	r17,r8,r2
1000eed0:	0005883a 	mov	r2,zero
1000eed4:	003f8606 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000eed8:	0005883a 	mov	r2,zero
1000eedc:	003fdc06 	br	1000ee50 <__alt_data_end+0xf800ee50>
1000eee0:	0005883a 	mov	r2,zero
1000eee4:	003ff706 	br	1000eec4 <__alt_data_end+0xf800eec4>

1000eee8 <__fixdfsi>:
1000eee8:	280cd53a 	srli	r6,r5,20
1000eeec:	00c00434 	movhi	r3,16
1000eef0:	18ffffc4 	addi	r3,r3,-1
1000eef4:	3181ffcc 	andi	r6,r6,2047
1000eef8:	01c0ff84 	movi	r7,1022
1000eefc:	28c6703a 	and	r3,r5,r3
1000ef00:	280ad7fa 	srli	r5,r5,31
1000ef04:	3980120e 	bge	r7,r6,1000ef50 <__fixdfsi+0x68>
1000ef08:	00810744 	movi	r2,1053
1000ef0c:	11800c16 	blt	r2,r6,1000ef40 <__fixdfsi+0x58>
1000ef10:	00810cc4 	movi	r2,1075
1000ef14:	1185c83a 	sub	r2,r2,r6
1000ef18:	01c007c4 	movi	r7,31
1000ef1c:	18c00434 	orhi	r3,r3,16
1000ef20:	38800d16 	blt	r7,r2,1000ef58 <__fixdfsi+0x70>
1000ef24:	31befb44 	addi	r6,r6,-1043
1000ef28:	2084d83a 	srl	r2,r4,r2
1000ef2c:	1986983a 	sll	r3,r3,r6
1000ef30:	1884b03a 	or	r2,r3,r2
1000ef34:	28000726 	beq	r5,zero,1000ef54 <__fixdfsi+0x6c>
1000ef38:	0085c83a 	sub	r2,zero,r2
1000ef3c:	f800283a 	ret
1000ef40:	00a00034 	movhi	r2,32768
1000ef44:	10bfffc4 	addi	r2,r2,-1
1000ef48:	2885883a 	add	r2,r5,r2
1000ef4c:	f800283a 	ret
1000ef50:	0005883a 	mov	r2,zero
1000ef54:	f800283a 	ret
1000ef58:	008104c4 	movi	r2,1043
1000ef5c:	1185c83a 	sub	r2,r2,r6
1000ef60:	1884d83a 	srl	r2,r3,r2
1000ef64:	003ff306 	br	1000ef34 <__alt_data_end+0xf800ef34>

1000ef68 <__floatsidf>:
1000ef68:	defffd04 	addi	sp,sp,-12
1000ef6c:	dfc00215 	stw	ra,8(sp)
1000ef70:	dc400115 	stw	r17,4(sp)
1000ef74:	dc000015 	stw	r16,0(sp)
1000ef78:	20002b26 	beq	r4,zero,1000f028 <__floatsidf+0xc0>
1000ef7c:	2023883a 	mov	r17,r4
1000ef80:	2020d7fa 	srli	r16,r4,31
1000ef84:	20002d16 	blt	r4,zero,1000f03c <__floatsidf+0xd4>
1000ef88:	8809883a 	mov	r4,r17
1000ef8c:	000f0ec0 	call	1000f0ec <__clzsi2>
1000ef90:	01410784 	movi	r5,1054
1000ef94:	288bc83a 	sub	r5,r5,r2
1000ef98:	01010cc4 	movi	r4,1075
1000ef9c:	2149c83a 	sub	r4,r4,r5
1000efa0:	00c007c4 	movi	r3,31
1000efa4:	1900160e 	bge	r3,r4,1000f000 <__floatsidf+0x98>
1000efa8:	00c104c4 	movi	r3,1043
1000efac:	1947c83a 	sub	r3,r3,r5
1000efb0:	88c6983a 	sll	r3,r17,r3
1000efb4:	00800434 	movhi	r2,16
1000efb8:	10bfffc4 	addi	r2,r2,-1
1000efbc:	1886703a 	and	r3,r3,r2
1000efc0:	2941ffcc 	andi	r5,r5,2047
1000efc4:	800d883a 	mov	r6,r16
1000efc8:	0005883a 	mov	r2,zero
1000efcc:	280a953a 	slli	r5,r5,20
1000efd0:	31803fcc 	andi	r6,r6,255
1000efd4:	01000434 	movhi	r4,16
1000efd8:	300c97fa 	slli	r6,r6,31
1000efdc:	213fffc4 	addi	r4,r4,-1
1000efe0:	1906703a 	and	r3,r3,r4
1000efe4:	1946b03a 	or	r3,r3,r5
1000efe8:	1986b03a 	or	r3,r3,r6
1000efec:	dfc00217 	ldw	ra,8(sp)
1000eff0:	dc400117 	ldw	r17,4(sp)
1000eff4:	dc000017 	ldw	r16,0(sp)
1000eff8:	dec00304 	addi	sp,sp,12
1000effc:	f800283a 	ret
1000f000:	00c002c4 	movi	r3,11
1000f004:	1887c83a 	sub	r3,r3,r2
1000f008:	88c6d83a 	srl	r3,r17,r3
1000f00c:	8904983a 	sll	r2,r17,r4
1000f010:	01000434 	movhi	r4,16
1000f014:	213fffc4 	addi	r4,r4,-1
1000f018:	2941ffcc 	andi	r5,r5,2047
1000f01c:	1906703a 	and	r3,r3,r4
1000f020:	800d883a 	mov	r6,r16
1000f024:	003fe906 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f028:	000d883a 	mov	r6,zero
1000f02c:	000b883a 	mov	r5,zero
1000f030:	0007883a 	mov	r3,zero
1000f034:	0005883a 	mov	r2,zero
1000f038:	003fe406 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f03c:	0123c83a 	sub	r17,zero,r4
1000f040:	003fd106 	br	1000ef88 <__alt_data_end+0xf800ef88>

1000f044 <__floatunsidf>:
1000f044:	defffe04 	addi	sp,sp,-8
1000f048:	dc000015 	stw	r16,0(sp)
1000f04c:	dfc00115 	stw	ra,4(sp)
1000f050:	2021883a 	mov	r16,r4
1000f054:	20002226 	beq	r4,zero,1000f0e0 <__floatunsidf+0x9c>
1000f058:	000f0ec0 	call	1000f0ec <__clzsi2>
1000f05c:	01010784 	movi	r4,1054
1000f060:	2089c83a 	sub	r4,r4,r2
1000f064:	01810cc4 	movi	r6,1075
1000f068:	310dc83a 	sub	r6,r6,r4
1000f06c:	00c007c4 	movi	r3,31
1000f070:	1980120e 	bge	r3,r6,1000f0bc <__floatunsidf+0x78>
1000f074:	00c104c4 	movi	r3,1043
1000f078:	1907c83a 	sub	r3,r3,r4
1000f07c:	80ca983a 	sll	r5,r16,r3
1000f080:	00800434 	movhi	r2,16
1000f084:	10bfffc4 	addi	r2,r2,-1
1000f088:	2101ffcc 	andi	r4,r4,2047
1000f08c:	0021883a 	mov	r16,zero
1000f090:	288a703a 	and	r5,r5,r2
1000f094:	2008953a 	slli	r4,r4,20
1000f098:	00c00434 	movhi	r3,16
1000f09c:	18ffffc4 	addi	r3,r3,-1
1000f0a0:	28c6703a 	and	r3,r5,r3
1000f0a4:	8005883a 	mov	r2,r16
1000f0a8:	1906b03a 	or	r3,r3,r4
1000f0ac:	dfc00117 	ldw	ra,4(sp)
1000f0b0:	dc000017 	ldw	r16,0(sp)
1000f0b4:	dec00204 	addi	sp,sp,8
1000f0b8:	f800283a 	ret
1000f0bc:	00c002c4 	movi	r3,11
1000f0c0:	188bc83a 	sub	r5,r3,r2
1000f0c4:	814ad83a 	srl	r5,r16,r5
1000f0c8:	00c00434 	movhi	r3,16
1000f0cc:	18ffffc4 	addi	r3,r3,-1
1000f0d0:	81a0983a 	sll	r16,r16,r6
1000f0d4:	2101ffcc 	andi	r4,r4,2047
1000f0d8:	28ca703a 	and	r5,r5,r3
1000f0dc:	003fed06 	br	1000f094 <__alt_data_end+0xf800f094>
1000f0e0:	0009883a 	mov	r4,zero
1000f0e4:	000b883a 	mov	r5,zero
1000f0e8:	003fea06 	br	1000f094 <__alt_data_end+0xf800f094>

1000f0ec <__clzsi2>:
1000f0ec:	00bfffd4 	movui	r2,65535
1000f0f0:	11000536 	bltu	r2,r4,1000f108 <__clzsi2+0x1c>
1000f0f4:	00803fc4 	movi	r2,255
1000f0f8:	11000f36 	bltu	r2,r4,1000f138 <__clzsi2+0x4c>
1000f0fc:	00800804 	movi	r2,32
1000f100:	0007883a 	mov	r3,zero
1000f104:	00000506 	br	1000f11c <__clzsi2+0x30>
1000f108:	00804034 	movhi	r2,256
1000f10c:	10bfffc4 	addi	r2,r2,-1
1000f110:	11000c2e 	bgeu	r2,r4,1000f144 <__clzsi2+0x58>
1000f114:	00800204 	movi	r2,8
1000f118:	00c00604 	movi	r3,24
1000f11c:	20c8d83a 	srl	r4,r4,r3
1000f120:	00c40074 	movhi	r3,4097
1000f124:	18c8ce04 	addi	r3,r3,9016
1000f128:	1909883a 	add	r4,r3,r4
1000f12c:	20c00003 	ldbu	r3,0(r4)
1000f130:	10c5c83a 	sub	r2,r2,r3
1000f134:	f800283a 	ret
1000f138:	00800604 	movi	r2,24
1000f13c:	00c00204 	movi	r3,8
1000f140:	003ff606 	br	1000f11c <__alt_data_end+0xf800f11c>
1000f144:	00800404 	movi	r2,16
1000f148:	1007883a 	mov	r3,r2
1000f14c:	003ff306 	br	1000f11c <__alt_data_end+0xf800f11c>

1000f150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f150:	defffe04 	addi	sp,sp,-8
1000f154:	dfc00115 	stw	ra,4(sp)
1000f158:	df000015 	stw	fp,0(sp)
1000f15c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f160:	00840074 	movhi	r2,4097
1000f164:	108fd104 	addi	r2,r2,16196
1000f168:	10800017 	ldw	r2,0(r2)
1000f16c:	10000526 	beq	r2,zero,1000f184 <alt_get_errno+0x34>
1000f170:	00840074 	movhi	r2,4097
1000f174:	108fd104 	addi	r2,r2,16196
1000f178:	10800017 	ldw	r2,0(r2)
1000f17c:	103ee83a 	callr	r2
1000f180:	00000206 	br	1000f18c <alt_get_errno+0x3c>
1000f184:	00840074 	movhi	r2,4097
1000f188:	10969804 	addi	r2,r2,23136
}
1000f18c:	e037883a 	mov	sp,fp
1000f190:	dfc00117 	ldw	ra,4(sp)
1000f194:	df000017 	ldw	fp,0(sp)
1000f198:	dec00204 	addi	sp,sp,8
1000f19c:	f800283a 	ret

1000f1a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f1a0:	defffb04 	addi	sp,sp,-20
1000f1a4:	dfc00415 	stw	ra,16(sp)
1000f1a8:	df000315 	stw	fp,12(sp)
1000f1ac:	df000304 	addi	fp,sp,12
1000f1b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f1b4:	e0bfff17 	ldw	r2,-4(fp)
1000f1b8:	10000816 	blt	r2,zero,1000f1dc <close+0x3c>
1000f1bc:	01400304 	movi	r5,12
1000f1c0:	e13fff17 	ldw	r4,-4(fp)
1000f1c4:	000c8880 	call	1000c888 <__mulsi3>
1000f1c8:	1007883a 	mov	r3,r2
1000f1cc:	00840074 	movhi	r2,4097
1000f1d0:	108b4e04 	addi	r2,r2,11576
1000f1d4:	1885883a 	add	r2,r3,r2
1000f1d8:	00000106 	br	1000f1e0 <close+0x40>
1000f1dc:	0005883a 	mov	r2,zero
1000f1e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f1e4:	e0bffd17 	ldw	r2,-12(fp)
1000f1e8:	10001926 	beq	r2,zero,1000f250 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f1ec:	e0bffd17 	ldw	r2,-12(fp)
1000f1f0:	10800017 	ldw	r2,0(r2)
1000f1f4:	10800417 	ldw	r2,16(r2)
1000f1f8:	10000626 	beq	r2,zero,1000f214 <close+0x74>
1000f1fc:	e0bffd17 	ldw	r2,-12(fp)
1000f200:	10800017 	ldw	r2,0(r2)
1000f204:	10800417 	ldw	r2,16(r2)
1000f208:	e13ffd17 	ldw	r4,-12(fp)
1000f20c:	103ee83a 	callr	r2
1000f210:	00000106 	br	1000f218 <close+0x78>
1000f214:	0005883a 	mov	r2,zero
1000f218:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f21c:	e13fff17 	ldw	r4,-4(fp)
1000f220:	000f8d80 	call	1000f8d8 <alt_release_fd>
    if (rval < 0)
1000f224:	e0bffe17 	ldw	r2,-8(fp)
1000f228:	1000070e 	bge	r2,zero,1000f248 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f22c:	000f1500 	call	1000f150 <alt_get_errno>
1000f230:	1007883a 	mov	r3,r2
1000f234:	e0bffe17 	ldw	r2,-8(fp)
1000f238:	0085c83a 	sub	r2,zero,r2
1000f23c:	18800015 	stw	r2,0(r3)
      return -1;
1000f240:	00bfffc4 	movi	r2,-1
1000f244:	00000706 	br	1000f264 <close+0xc4>
    }
    return 0;
1000f248:	0005883a 	mov	r2,zero
1000f24c:	00000506 	br	1000f264 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f250:	000f1500 	call	1000f150 <alt_get_errno>
1000f254:	1007883a 	mov	r3,r2
1000f258:	00801444 	movi	r2,81
1000f25c:	18800015 	stw	r2,0(r3)
    return -1;
1000f260:	00bfffc4 	movi	r2,-1
  }
}
1000f264:	e037883a 	mov	sp,fp
1000f268:	dfc00117 	ldw	ra,4(sp)
1000f26c:	df000017 	ldw	fp,0(sp)
1000f270:	dec00204 	addi	sp,sp,8
1000f274:	f800283a 	ret

1000f278 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f278:	defffc04 	addi	sp,sp,-16
1000f27c:	df000315 	stw	fp,12(sp)
1000f280:	df000304 	addi	fp,sp,12
1000f284:	e13ffd15 	stw	r4,-12(fp)
1000f288:	e17ffe15 	stw	r5,-8(fp)
1000f28c:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f290:	e0bfff17 	ldw	r2,-4(fp)
}
1000f294:	e037883a 	mov	sp,fp
1000f298:	df000017 	ldw	fp,0(sp)
1000f29c:	dec00104 	addi	sp,sp,4
1000f2a0:	f800283a 	ret

1000f2a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f2a4:	defffe04 	addi	sp,sp,-8
1000f2a8:	dfc00115 	stw	ra,4(sp)
1000f2ac:	df000015 	stw	fp,0(sp)
1000f2b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f2b4:	00840074 	movhi	r2,4097
1000f2b8:	108fd104 	addi	r2,r2,16196
1000f2bc:	10800017 	ldw	r2,0(r2)
1000f2c0:	10000526 	beq	r2,zero,1000f2d8 <alt_get_errno+0x34>
1000f2c4:	00840074 	movhi	r2,4097
1000f2c8:	108fd104 	addi	r2,r2,16196
1000f2cc:	10800017 	ldw	r2,0(r2)
1000f2d0:	103ee83a 	callr	r2
1000f2d4:	00000206 	br	1000f2e0 <alt_get_errno+0x3c>
1000f2d8:	00840074 	movhi	r2,4097
1000f2dc:	10969804 	addi	r2,r2,23136
}
1000f2e0:	e037883a 	mov	sp,fp
1000f2e4:	dfc00117 	ldw	ra,4(sp)
1000f2e8:	df000017 	ldw	fp,0(sp)
1000f2ec:	dec00204 	addi	sp,sp,8
1000f2f0:	f800283a 	ret

1000f2f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f2f4:	defffb04 	addi	sp,sp,-20
1000f2f8:	dfc00415 	stw	ra,16(sp)
1000f2fc:	df000315 	stw	fp,12(sp)
1000f300:	df000304 	addi	fp,sp,12
1000f304:	e13ffe15 	stw	r4,-8(fp)
1000f308:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f30c:	e0bffe17 	ldw	r2,-8(fp)
1000f310:	10000816 	blt	r2,zero,1000f334 <fstat+0x40>
1000f314:	01400304 	movi	r5,12
1000f318:	e13ffe17 	ldw	r4,-8(fp)
1000f31c:	000c8880 	call	1000c888 <__mulsi3>
1000f320:	1007883a 	mov	r3,r2
1000f324:	00840074 	movhi	r2,4097
1000f328:	108b4e04 	addi	r2,r2,11576
1000f32c:	1885883a 	add	r2,r3,r2
1000f330:	00000106 	br	1000f338 <fstat+0x44>
1000f334:	0005883a 	mov	r2,zero
1000f338:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f33c:	e0bffd17 	ldw	r2,-12(fp)
1000f340:	10001026 	beq	r2,zero,1000f384 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f344:	e0bffd17 	ldw	r2,-12(fp)
1000f348:	10800017 	ldw	r2,0(r2)
1000f34c:	10800817 	ldw	r2,32(r2)
1000f350:	10000726 	beq	r2,zero,1000f370 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f354:	e0bffd17 	ldw	r2,-12(fp)
1000f358:	10800017 	ldw	r2,0(r2)
1000f35c:	10800817 	ldw	r2,32(r2)
1000f360:	e17fff17 	ldw	r5,-4(fp)
1000f364:	e13ffd17 	ldw	r4,-12(fp)
1000f368:	103ee83a 	callr	r2
1000f36c:	00000a06 	br	1000f398 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f370:	e0bfff17 	ldw	r2,-4(fp)
1000f374:	00c80004 	movi	r3,8192
1000f378:	10c00115 	stw	r3,4(r2)
      return 0;
1000f37c:	0005883a 	mov	r2,zero
1000f380:	00000506 	br	1000f398 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f384:	000f2a40 	call	1000f2a4 <alt_get_errno>
1000f388:	1007883a 	mov	r3,r2
1000f38c:	00801444 	movi	r2,81
1000f390:	18800015 	stw	r2,0(r3)
    return -1;
1000f394:	00bfffc4 	movi	r2,-1
  }
}
1000f398:	e037883a 	mov	sp,fp
1000f39c:	dfc00117 	ldw	ra,4(sp)
1000f3a0:	df000017 	ldw	fp,0(sp)
1000f3a4:	dec00204 	addi	sp,sp,8
1000f3a8:	f800283a 	ret

1000f3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f3ac:	defffe04 	addi	sp,sp,-8
1000f3b0:	dfc00115 	stw	ra,4(sp)
1000f3b4:	df000015 	stw	fp,0(sp)
1000f3b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f3bc:	00840074 	movhi	r2,4097
1000f3c0:	108fd104 	addi	r2,r2,16196
1000f3c4:	10800017 	ldw	r2,0(r2)
1000f3c8:	10000526 	beq	r2,zero,1000f3e0 <alt_get_errno+0x34>
1000f3cc:	00840074 	movhi	r2,4097
1000f3d0:	108fd104 	addi	r2,r2,16196
1000f3d4:	10800017 	ldw	r2,0(r2)
1000f3d8:	103ee83a 	callr	r2
1000f3dc:	00000206 	br	1000f3e8 <alt_get_errno+0x3c>
1000f3e0:	00840074 	movhi	r2,4097
1000f3e4:	10969804 	addi	r2,r2,23136
}
1000f3e8:	e037883a 	mov	sp,fp
1000f3ec:	dfc00117 	ldw	ra,4(sp)
1000f3f0:	df000017 	ldw	fp,0(sp)
1000f3f4:	dec00204 	addi	sp,sp,8
1000f3f8:	f800283a 	ret

1000f3fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f3fc:	deffed04 	addi	sp,sp,-76
1000f400:	dfc01215 	stw	ra,72(sp)
1000f404:	df001115 	stw	fp,68(sp)
1000f408:	df001104 	addi	fp,sp,68
1000f40c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f410:	e0bfff17 	ldw	r2,-4(fp)
1000f414:	10000816 	blt	r2,zero,1000f438 <isatty+0x3c>
1000f418:	01400304 	movi	r5,12
1000f41c:	e13fff17 	ldw	r4,-4(fp)
1000f420:	000c8880 	call	1000c888 <__mulsi3>
1000f424:	1007883a 	mov	r3,r2
1000f428:	00840074 	movhi	r2,4097
1000f42c:	108b4e04 	addi	r2,r2,11576
1000f430:	1885883a 	add	r2,r3,r2
1000f434:	00000106 	br	1000f43c <isatty+0x40>
1000f438:	0005883a 	mov	r2,zero
1000f43c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f440:	e0bfef17 	ldw	r2,-68(fp)
1000f444:	10000e26 	beq	r2,zero,1000f480 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f448:	e0bfef17 	ldw	r2,-68(fp)
1000f44c:	10800017 	ldw	r2,0(r2)
1000f450:	10800817 	ldw	r2,32(r2)
1000f454:	1000021e 	bne	r2,zero,1000f460 <isatty+0x64>
    {
      return 1;
1000f458:	00800044 	movi	r2,1
1000f45c:	00000d06 	br	1000f494 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f460:	e0bff004 	addi	r2,fp,-64
1000f464:	100b883a 	mov	r5,r2
1000f468:	e13fff17 	ldw	r4,-4(fp)
1000f46c:	000f2f40 	call	1000f2f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f470:	e0bff117 	ldw	r2,-60(fp)
1000f474:	10880020 	cmpeqi	r2,r2,8192
1000f478:	10803fcc 	andi	r2,r2,255
1000f47c:	00000506 	br	1000f494 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f480:	000f3ac0 	call	1000f3ac <alt_get_errno>
1000f484:	1007883a 	mov	r3,r2
1000f488:	00801444 	movi	r2,81
1000f48c:	18800015 	stw	r2,0(r3)
    return 0;
1000f490:	0005883a 	mov	r2,zero
  }
}
1000f494:	e037883a 	mov	sp,fp
1000f498:	dfc00117 	ldw	ra,4(sp)
1000f49c:	df000017 	ldw	fp,0(sp)
1000f4a0:	dec00204 	addi	sp,sp,8
1000f4a4:	f800283a 	ret

1000f4a8 <alt_load_section>:
1000f4a8:	defffc04 	addi	sp,sp,-16
1000f4ac:	df000315 	stw	fp,12(sp)
1000f4b0:	df000304 	addi	fp,sp,12
1000f4b4:	e13ffd15 	stw	r4,-12(fp)
1000f4b8:	e17ffe15 	stw	r5,-8(fp)
1000f4bc:	e1bfff15 	stw	r6,-4(fp)
1000f4c0:	e0fffe17 	ldw	r3,-8(fp)
1000f4c4:	e0bffd17 	ldw	r2,-12(fp)
1000f4c8:	18800c26 	beq	r3,r2,1000f4fc <alt_load_section+0x54>
1000f4cc:	00000806 	br	1000f4f0 <alt_load_section+0x48>
1000f4d0:	e0bffe17 	ldw	r2,-8(fp)
1000f4d4:	10c00104 	addi	r3,r2,4
1000f4d8:	e0fffe15 	stw	r3,-8(fp)
1000f4dc:	e0fffd17 	ldw	r3,-12(fp)
1000f4e0:	19000104 	addi	r4,r3,4
1000f4e4:	e13ffd15 	stw	r4,-12(fp)
1000f4e8:	18c00017 	ldw	r3,0(r3)
1000f4ec:	10c00015 	stw	r3,0(r2)
1000f4f0:	e0fffe17 	ldw	r3,-8(fp)
1000f4f4:	e0bfff17 	ldw	r2,-4(fp)
1000f4f8:	18bff51e 	bne	r3,r2,1000f4d0 <__alt_data_end+0xf800f4d0>
1000f4fc:	0001883a 	nop
1000f500:	e037883a 	mov	sp,fp
1000f504:	df000017 	ldw	fp,0(sp)
1000f508:	dec00104 	addi	sp,sp,4
1000f50c:	f800283a 	ret

1000f510 <alt_load>:
1000f510:	defffe04 	addi	sp,sp,-8
1000f514:	dfc00115 	stw	ra,4(sp)
1000f518:	df000015 	stw	fp,0(sp)
1000f51c:	d839883a 	mov	fp,sp
1000f520:	01840074 	movhi	r6,4097
1000f524:	318fd604 	addi	r6,r6,16216
1000f528:	01440074 	movhi	r5,4097
1000f52c:	29491b04 	addi	r5,r5,9324
1000f530:	01040074 	movhi	r4,4097
1000f534:	210fd604 	addi	r4,r4,16216
1000f538:	000f4a80 	call	1000f4a8 <alt_load_section>
1000f53c:	01840034 	movhi	r6,4096
1000f540:	31807004 	addi	r6,r6,448
1000f544:	01440034 	movhi	r5,4096
1000f548:	29400804 	addi	r5,r5,32
1000f54c:	01040034 	movhi	r4,4096
1000f550:	21000804 	addi	r4,r4,32
1000f554:	000f4a80 	call	1000f4a8 <alt_load_section>
1000f558:	01840074 	movhi	r6,4097
1000f55c:	31891b04 	addi	r6,r6,9324
1000f560:	01440074 	movhi	r5,4097
1000f564:	29467d04 	addi	r5,r5,6644
1000f568:	01040074 	movhi	r4,4097
1000f56c:	21067d04 	addi	r4,r4,6644
1000f570:	000f4a80 	call	1000f4a8 <alt_load_section>
1000f574:	00109580 	call	10010958 <alt_dcache_flush_all>
1000f578:	0010b2c0 	call	10010b2c <alt_icache_flush_all>
1000f57c:	0001883a 	nop
1000f580:	e037883a 	mov	sp,fp
1000f584:	dfc00117 	ldw	ra,4(sp)
1000f588:	df000017 	ldw	fp,0(sp)
1000f58c:	dec00204 	addi	sp,sp,8
1000f590:	f800283a 	ret

1000f594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f594:	defffe04 	addi	sp,sp,-8
1000f598:	dfc00115 	stw	ra,4(sp)
1000f59c:	df000015 	stw	fp,0(sp)
1000f5a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f5a4:	00840074 	movhi	r2,4097
1000f5a8:	108fd104 	addi	r2,r2,16196
1000f5ac:	10800017 	ldw	r2,0(r2)
1000f5b0:	10000526 	beq	r2,zero,1000f5c8 <alt_get_errno+0x34>
1000f5b4:	00840074 	movhi	r2,4097
1000f5b8:	108fd104 	addi	r2,r2,16196
1000f5bc:	10800017 	ldw	r2,0(r2)
1000f5c0:	103ee83a 	callr	r2
1000f5c4:	00000206 	br	1000f5d0 <alt_get_errno+0x3c>
1000f5c8:	00840074 	movhi	r2,4097
1000f5cc:	10969804 	addi	r2,r2,23136
}
1000f5d0:	e037883a 	mov	sp,fp
1000f5d4:	dfc00117 	ldw	ra,4(sp)
1000f5d8:	df000017 	ldw	fp,0(sp)
1000f5dc:	dec00204 	addi	sp,sp,8
1000f5e0:	f800283a 	ret

1000f5e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f5e4:	defff904 	addi	sp,sp,-28
1000f5e8:	dfc00615 	stw	ra,24(sp)
1000f5ec:	df000515 	stw	fp,20(sp)
1000f5f0:	df000504 	addi	fp,sp,20
1000f5f4:	e13ffd15 	stw	r4,-12(fp)
1000f5f8:	e17ffe15 	stw	r5,-8(fp)
1000f5fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f600:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f604:	e0bffd17 	ldw	r2,-12(fp)
1000f608:	10000816 	blt	r2,zero,1000f62c <lseek+0x48>
1000f60c:	01400304 	movi	r5,12
1000f610:	e13ffd17 	ldw	r4,-12(fp)
1000f614:	000c8880 	call	1000c888 <__mulsi3>
1000f618:	1007883a 	mov	r3,r2
1000f61c:	00840074 	movhi	r2,4097
1000f620:	108b4e04 	addi	r2,r2,11576
1000f624:	1885883a 	add	r2,r3,r2
1000f628:	00000106 	br	1000f630 <lseek+0x4c>
1000f62c:	0005883a 	mov	r2,zero
1000f630:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f634:	e0bffc17 	ldw	r2,-16(fp)
1000f638:	10001026 	beq	r2,zero,1000f67c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f63c:	e0bffc17 	ldw	r2,-16(fp)
1000f640:	10800017 	ldw	r2,0(r2)
1000f644:	10800717 	ldw	r2,28(r2)
1000f648:	10000926 	beq	r2,zero,1000f670 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f64c:	e0bffc17 	ldw	r2,-16(fp)
1000f650:	10800017 	ldw	r2,0(r2)
1000f654:	10800717 	ldw	r2,28(r2)
1000f658:	e1bfff17 	ldw	r6,-4(fp)
1000f65c:	e17ffe17 	ldw	r5,-8(fp)
1000f660:	e13ffc17 	ldw	r4,-16(fp)
1000f664:	103ee83a 	callr	r2
1000f668:	e0bffb15 	stw	r2,-20(fp)
1000f66c:	00000506 	br	1000f684 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f670:	00bfde84 	movi	r2,-134
1000f674:	e0bffb15 	stw	r2,-20(fp)
1000f678:	00000206 	br	1000f684 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f67c:	00bfebc4 	movi	r2,-81
1000f680:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f684:	e0bffb17 	ldw	r2,-20(fp)
1000f688:	1000070e 	bge	r2,zero,1000f6a8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f68c:	000f5940 	call	1000f594 <alt_get_errno>
1000f690:	1007883a 	mov	r3,r2
1000f694:	e0bffb17 	ldw	r2,-20(fp)
1000f698:	0085c83a 	sub	r2,zero,r2
1000f69c:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f6a0:	00bfffc4 	movi	r2,-1
1000f6a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f6a8:	e0bffb17 	ldw	r2,-20(fp)
}
1000f6ac:	e037883a 	mov	sp,fp
1000f6b0:	dfc00117 	ldw	ra,4(sp)
1000f6b4:	df000017 	ldw	fp,0(sp)
1000f6b8:	dec00204 	addi	sp,sp,8
1000f6bc:	f800283a 	ret

1000f6c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f6c0:	defffd04 	addi	sp,sp,-12
1000f6c4:	dfc00215 	stw	ra,8(sp)
1000f6c8:	df000115 	stw	fp,4(sp)
1000f6cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f6d0:	0009883a 	mov	r4,zero
1000f6d4:	000fbc40 	call	1000fbc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f6d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f6dc:	000fbfc0 	call	1000fbfc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f6e0:	01840074 	movhi	r6,4097
1000f6e4:	31891104 	addi	r6,r6,9284
1000f6e8:	01440074 	movhi	r5,4097
1000f6ec:	29491104 	addi	r5,r5,9284
1000f6f0:	01040074 	movhi	r4,4097
1000f6f4:	21091104 	addi	r4,r4,9284
1000f6f8:	0010f000 	call	10010f00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f6fc:	0010a6c0 	call	10010a6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f700:	01040074 	movhi	r4,4097
1000f704:	2102b304 	addi	r4,r4,2764
1000f708:	00116600 	call	10011660 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f70c:	d0a6d317 	ldw	r2,-25780(gp)
1000f710:	d0e6d417 	ldw	r3,-25776(gp)
1000f714:	d126d517 	ldw	r4,-25772(gp)
1000f718:	200d883a 	mov	r6,r4
1000f71c:	180b883a 	mov	r5,r3
1000f720:	1009883a 	mov	r4,r2
1000f724:	000034c0 	call	1000034c <main>
1000f728:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f72c:	01000044 	movi	r4,1
1000f730:	000f1a00 	call	1000f1a0 <close>
  exit (result);
1000f734:	e13fff17 	ldw	r4,-4(fp)
1000f738:	00116740 	call	10011674 <exit>

1000f73c <__malloc_lock>:
1000f73c:	defffe04 	addi	sp,sp,-8
1000f740:	df000115 	stw	fp,4(sp)
1000f744:	df000104 	addi	fp,sp,4
1000f748:	e13fff15 	stw	r4,-4(fp)
1000f74c:	0001883a 	nop
1000f750:	e037883a 	mov	sp,fp
1000f754:	df000017 	ldw	fp,0(sp)
1000f758:	dec00104 	addi	sp,sp,4
1000f75c:	f800283a 	ret

1000f760 <__malloc_unlock>:
1000f760:	defffe04 	addi	sp,sp,-8
1000f764:	df000115 	stw	fp,4(sp)
1000f768:	df000104 	addi	fp,sp,4
1000f76c:	e13fff15 	stw	r4,-4(fp)
1000f770:	0001883a 	nop
1000f774:	e037883a 	mov	sp,fp
1000f778:	df000017 	ldw	fp,0(sp)
1000f77c:	dec00104 	addi	sp,sp,4
1000f780:	f800283a 	ret

1000f784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f784:	defffe04 	addi	sp,sp,-8
1000f788:	dfc00115 	stw	ra,4(sp)
1000f78c:	df000015 	stw	fp,0(sp)
1000f790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f794:	00840074 	movhi	r2,4097
1000f798:	108fd104 	addi	r2,r2,16196
1000f79c:	10800017 	ldw	r2,0(r2)
1000f7a0:	10000526 	beq	r2,zero,1000f7b8 <alt_get_errno+0x34>
1000f7a4:	00840074 	movhi	r2,4097
1000f7a8:	108fd104 	addi	r2,r2,16196
1000f7ac:	10800017 	ldw	r2,0(r2)
1000f7b0:	103ee83a 	callr	r2
1000f7b4:	00000206 	br	1000f7c0 <alt_get_errno+0x3c>
1000f7b8:	00840074 	movhi	r2,4097
1000f7bc:	10969804 	addi	r2,r2,23136
}
1000f7c0:	e037883a 	mov	sp,fp
1000f7c4:	dfc00117 	ldw	ra,4(sp)
1000f7c8:	df000017 	ldw	fp,0(sp)
1000f7cc:	dec00204 	addi	sp,sp,8
1000f7d0:	f800283a 	ret

1000f7d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f7d4:	defff904 	addi	sp,sp,-28
1000f7d8:	dfc00615 	stw	ra,24(sp)
1000f7dc:	df000515 	stw	fp,20(sp)
1000f7e0:	df000504 	addi	fp,sp,20
1000f7e4:	e13ffd15 	stw	r4,-12(fp)
1000f7e8:	e17ffe15 	stw	r5,-8(fp)
1000f7ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f7f0:	e0bffd17 	ldw	r2,-12(fp)
1000f7f4:	10000816 	blt	r2,zero,1000f818 <read+0x44>
1000f7f8:	01400304 	movi	r5,12
1000f7fc:	e13ffd17 	ldw	r4,-12(fp)
1000f800:	000c8880 	call	1000c888 <__mulsi3>
1000f804:	1007883a 	mov	r3,r2
1000f808:	00840074 	movhi	r2,4097
1000f80c:	108b4e04 	addi	r2,r2,11576
1000f810:	1885883a 	add	r2,r3,r2
1000f814:	00000106 	br	1000f81c <read+0x48>
1000f818:	0005883a 	mov	r2,zero
1000f81c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f820:	e0bffb17 	ldw	r2,-20(fp)
1000f824:	10002226 	beq	r2,zero,1000f8b0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f828:	e0bffb17 	ldw	r2,-20(fp)
1000f82c:	10800217 	ldw	r2,8(r2)
1000f830:	108000cc 	andi	r2,r2,3
1000f834:	10800060 	cmpeqi	r2,r2,1
1000f838:	1000181e 	bne	r2,zero,1000f89c <read+0xc8>
        (fd->dev->read))
1000f83c:	e0bffb17 	ldw	r2,-20(fp)
1000f840:	10800017 	ldw	r2,0(r2)
1000f844:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f848:	10001426 	beq	r2,zero,1000f89c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f84c:	e0bffb17 	ldw	r2,-20(fp)
1000f850:	10800017 	ldw	r2,0(r2)
1000f854:	10800517 	ldw	r2,20(r2)
1000f858:	e0ffff17 	ldw	r3,-4(fp)
1000f85c:	180d883a 	mov	r6,r3
1000f860:	e17ffe17 	ldw	r5,-8(fp)
1000f864:	e13ffb17 	ldw	r4,-20(fp)
1000f868:	103ee83a 	callr	r2
1000f86c:	e0bffc15 	stw	r2,-16(fp)
1000f870:	e0bffc17 	ldw	r2,-16(fp)
1000f874:	1000070e 	bge	r2,zero,1000f894 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f878:	000f7840 	call	1000f784 <alt_get_errno>
1000f87c:	1007883a 	mov	r3,r2
1000f880:	e0bffc17 	ldw	r2,-16(fp)
1000f884:	0085c83a 	sub	r2,zero,r2
1000f888:	18800015 	stw	r2,0(r3)
          return -1;
1000f88c:	00bfffc4 	movi	r2,-1
1000f890:	00000c06 	br	1000f8c4 <read+0xf0>
        }
        return rval;
1000f894:	e0bffc17 	ldw	r2,-16(fp)
1000f898:	00000a06 	br	1000f8c4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f89c:	000f7840 	call	1000f784 <alt_get_errno>
1000f8a0:	1007883a 	mov	r3,r2
1000f8a4:	00800344 	movi	r2,13
1000f8a8:	18800015 	stw	r2,0(r3)
1000f8ac:	00000406 	br	1000f8c0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f8b0:	000f7840 	call	1000f784 <alt_get_errno>
1000f8b4:	1007883a 	mov	r3,r2
1000f8b8:	00801444 	movi	r2,81
1000f8bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f8c0:	00bfffc4 	movi	r2,-1
}
1000f8c4:	e037883a 	mov	sp,fp
1000f8c8:	dfc00117 	ldw	ra,4(sp)
1000f8cc:	df000017 	ldw	fp,0(sp)
1000f8d0:	dec00204 	addi	sp,sp,8
1000f8d4:	f800283a 	ret

1000f8d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f8d8:	defffc04 	addi	sp,sp,-16
1000f8dc:	dfc00315 	stw	ra,12(sp)
1000f8e0:	df000215 	stw	fp,8(sp)
1000f8e4:	dc000115 	stw	r16,4(sp)
1000f8e8:	df000204 	addi	fp,sp,8
1000f8ec:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f8f0:	e0bffe17 	ldw	r2,-8(fp)
1000f8f4:	108000d0 	cmplti	r2,r2,3
1000f8f8:	1000111e 	bne	r2,zero,1000f940 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f8fc:	04040074 	movhi	r16,4097
1000f900:	840b4e04 	addi	r16,r16,11576
1000f904:	e0bffe17 	ldw	r2,-8(fp)
1000f908:	01400304 	movi	r5,12
1000f90c:	1009883a 	mov	r4,r2
1000f910:	000c8880 	call	1000c888 <__mulsi3>
1000f914:	8085883a 	add	r2,r16,r2
1000f918:	10800204 	addi	r2,r2,8
1000f91c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f920:	04040074 	movhi	r16,4097
1000f924:	840b4e04 	addi	r16,r16,11576
1000f928:	e0bffe17 	ldw	r2,-8(fp)
1000f92c:	01400304 	movi	r5,12
1000f930:	1009883a 	mov	r4,r2
1000f934:	000c8880 	call	1000c888 <__mulsi3>
1000f938:	8085883a 	add	r2,r16,r2
1000f93c:	10000015 	stw	zero,0(r2)
  }
}
1000f940:	0001883a 	nop
1000f944:	e6ffff04 	addi	sp,fp,-4
1000f948:	dfc00217 	ldw	ra,8(sp)
1000f94c:	df000117 	ldw	fp,4(sp)
1000f950:	dc000017 	ldw	r16,0(sp)
1000f954:	dec00304 	addi	sp,sp,12
1000f958:	f800283a 	ret

1000f95c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f95c:	defff904 	addi	sp,sp,-28
1000f960:	df000615 	stw	fp,24(sp)
1000f964:	df000604 	addi	fp,sp,24
1000f968:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f96c:	0005303a 	rdctl	r2,status
1000f970:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f974:	e0fffe17 	ldw	r3,-8(fp)
1000f978:	00bfff84 	movi	r2,-2
1000f97c:	1884703a 	and	r2,r3,r2
1000f980:	1001703a 	wrctl	status,r2
  
  return context;
1000f984:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f988:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f98c:	d0a00c17 	ldw	r2,-32720(gp)
1000f990:	10c000c4 	addi	r3,r2,3
1000f994:	00bfff04 	movi	r2,-4
1000f998:	1884703a 	and	r2,r3,r2
1000f99c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f9a0:	d0e00c17 	ldw	r3,-32720(gp)
1000f9a4:	e0bfff17 	ldw	r2,-4(fp)
1000f9a8:	1887883a 	add	r3,r3,r2
1000f9ac:	00860034 	movhi	r2,6144
1000f9b0:	10800004 	addi	r2,r2,0
1000f9b4:	10c0062e 	bgeu	r2,r3,1000f9d0 <sbrk+0x74>
1000f9b8:	e0bffb17 	ldw	r2,-20(fp)
1000f9bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f9c0:	e0bffa17 	ldw	r2,-24(fp)
1000f9c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f9c8:	00bfffc4 	movi	r2,-1
1000f9cc:	00000b06 	br	1000f9fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f9d0:	d0a00c17 	ldw	r2,-32720(gp)
1000f9d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000f9d8:	d0e00c17 	ldw	r3,-32720(gp)
1000f9dc:	e0bfff17 	ldw	r2,-4(fp)
1000f9e0:	1885883a 	add	r2,r3,r2
1000f9e4:	d0a00c15 	stw	r2,-32720(gp)
1000f9e8:	e0bffb17 	ldw	r2,-20(fp)
1000f9ec:	e0bffc15 	stw	r2,-16(fp)
1000f9f0:	e0bffc17 	ldw	r2,-16(fp)
1000f9f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f9f8:	e0bffd17 	ldw	r2,-12(fp)
} 
1000f9fc:	e037883a 	mov	sp,fp
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00104 	addi	sp,sp,4
1000fa08:	f800283a 	ret

1000fa0c <usleep>:
1000fa0c:	defffd04 	addi	sp,sp,-12
1000fa10:	dfc00215 	stw	ra,8(sp)
1000fa14:	df000115 	stw	fp,4(sp)
1000fa18:	df000104 	addi	fp,sp,4
1000fa1c:	e13fff15 	stw	r4,-4(fp)
1000fa20:	e13fff17 	ldw	r4,-4(fp)
1000fa24:	00108000 	call	10010800 <alt_busy_sleep>
1000fa28:	e037883a 	mov	sp,fp
1000fa2c:	dfc00117 	ldw	ra,4(sp)
1000fa30:	df000017 	ldw	fp,0(sp)
1000fa34:	dec00204 	addi	sp,sp,8
1000fa38:	f800283a 	ret

1000fa3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa3c:	defffe04 	addi	sp,sp,-8
1000fa40:	dfc00115 	stw	ra,4(sp)
1000fa44:	df000015 	stw	fp,0(sp)
1000fa48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa4c:	00840074 	movhi	r2,4097
1000fa50:	108fd104 	addi	r2,r2,16196
1000fa54:	10800017 	ldw	r2,0(r2)
1000fa58:	10000526 	beq	r2,zero,1000fa70 <alt_get_errno+0x34>
1000fa5c:	00840074 	movhi	r2,4097
1000fa60:	108fd104 	addi	r2,r2,16196
1000fa64:	10800017 	ldw	r2,0(r2)
1000fa68:	103ee83a 	callr	r2
1000fa6c:	00000206 	br	1000fa78 <alt_get_errno+0x3c>
1000fa70:	00840074 	movhi	r2,4097
1000fa74:	10969804 	addi	r2,r2,23136
}
1000fa78:	e037883a 	mov	sp,fp
1000fa7c:	dfc00117 	ldw	ra,4(sp)
1000fa80:	df000017 	ldw	fp,0(sp)
1000fa84:	dec00204 	addi	sp,sp,8
1000fa88:	f800283a 	ret

1000fa8c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fa8c:	defff904 	addi	sp,sp,-28
1000fa90:	dfc00615 	stw	ra,24(sp)
1000fa94:	df000515 	stw	fp,20(sp)
1000fa98:	df000504 	addi	fp,sp,20
1000fa9c:	e13ffd15 	stw	r4,-12(fp)
1000faa0:	e17ffe15 	stw	r5,-8(fp)
1000faa4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000faa8:	e0bffd17 	ldw	r2,-12(fp)
1000faac:	10000816 	blt	r2,zero,1000fad0 <write+0x44>
1000fab0:	01400304 	movi	r5,12
1000fab4:	e13ffd17 	ldw	r4,-12(fp)
1000fab8:	000c8880 	call	1000c888 <__mulsi3>
1000fabc:	1007883a 	mov	r3,r2
1000fac0:	00840074 	movhi	r2,4097
1000fac4:	108b4e04 	addi	r2,r2,11576
1000fac8:	1885883a 	add	r2,r3,r2
1000facc:	00000106 	br	1000fad4 <write+0x48>
1000fad0:	0005883a 	mov	r2,zero
1000fad4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fad8:	e0bffb17 	ldw	r2,-20(fp)
1000fadc:	10002126 	beq	r2,zero,1000fb64 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fae0:	e0bffb17 	ldw	r2,-20(fp)
1000fae4:	10800217 	ldw	r2,8(r2)
1000fae8:	108000cc 	andi	r2,r2,3
1000faec:	10001826 	beq	r2,zero,1000fb50 <write+0xc4>
1000faf0:	e0bffb17 	ldw	r2,-20(fp)
1000faf4:	10800017 	ldw	r2,0(r2)
1000faf8:	10800617 	ldw	r2,24(r2)
1000fafc:	10001426 	beq	r2,zero,1000fb50 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fb00:	e0bffb17 	ldw	r2,-20(fp)
1000fb04:	10800017 	ldw	r2,0(r2)
1000fb08:	10800617 	ldw	r2,24(r2)
1000fb0c:	e0ffff17 	ldw	r3,-4(fp)
1000fb10:	180d883a 	mov	r6,r3
1000fb14:	e17ffe17 	ldw	r5,-8(fp)
1000fb18:	e13ffb17 	ldw	r4,-20(fp)
1000fb1c:	103ee83a 	callr	r2
1000fb20:	e0bffc15 	stw	r2,-16(fp)
1000fb24:	e0bffc17 	ldw	r2,-16(fp)
1000fb28:	1000070e 	bge	r2,zero,1000fb48 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fb2c:	000fa3c0 	call	1000fa3c <alt_get_errno>
1000fb30:	1007883a 	mov	r3,r2
1000fb34:	e0bffc17 	ldw	r2,-16(fp)
1000fb38:	0085c83a 	sub	r2,zero,r2
1000fb3c:	18800015 	stw	r2,0(r3)
        return -1;
1000fb40:	00bfffc4 	movi	r2,-1
1000fb44:	00000c06 	br	1000fb78 <write+0xec>
      }
      return rval;
1000fb48:	e0bffc17 	ldw	r2,-16(fp)
1000fb4c:	00000a06 	br	1000fb78 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fb50:	000fa3c0 	call	1000fa3c <alt_get_errno>
1000fb54:	1007883a 	mov	r3,r2
1000fb58:	00800344 	movi	r2,13
1000fb5c:	18800015 	stw	r2,0(r3)
1000fb60:	00000406 	br	1000fb74 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fb64:	000fa3c0 	call	1000fa3c <alt_get_errno>
1000fb68:	1007883a 	mov	r3,r2
1000fb6c:	00801444 	movi	r2,81
1000fb70:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fb74:	00bfffc4 	movi	r2,-1
}
1000fb78:	e037883a 	mov	sp,fp
1000fb7c:	dfc00117 	ldw	ra,4(sp)
1000fb80:	df000017 	ldw	fp,0(sp)
1000fb84:	dec00204 	addi	sp,sp,8
1000fb88:	f800283a 	ret

1000fb8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fb8c:	defffd04 	addi	sp,sp,-12
1000fb90:	dfc00215 	stw	ra,8(sp)
1000fb94:	df000115 	stw	fp,4(sp)
1000fb98:	df000104 	addi	fp,sp,4
1000fb9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fba0:	01440074 	movhi	r5,4097
1000fba4:	294fce04 	addi	r5,r5,16184
1000fba8:	e13fff17 	ldw	r4,-4(fp)
1000fbac:	00109c80 	call	100109c8 <alt_dev_llist_insert>
}
1000fbb0:	e037883a 	mov	sp,fp
1000fbb4:	dfc00117 	ldw	ra,4(sp)
1000fbb8:	df000017 	ldw	fp,0(sp)
1000fbbc:	dec00204 	addi	sp,sp,8
1000fbc0:	f800283a 	ret

1000fbc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fbc4:	defffd04 	addi	sp,sp,-12
1000fbc8:	dfc00215 	stw	ra,8(sp)
1000fbcc:	df000115 	stw	fp,4(sp)
1000fbd0:	df000104 	addi	fp,sp,4
1000fbd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000fbd8:	00113c40 	call	100113c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fbdc:	00800044 	movi	r2,1
1000fbe0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fbe4:	0001883a 	nop
1000fbe8:	e037883a 	mov	sp,fp
1000fbec:	dfc00117 	ldw	ra,4(sp)
1000fbf0:	df000017 	ldw	fp,0(sp)
1000fbf4:	dec00204 	addi	sp,sp,8
1000fbf8:	f800283a 	ret

1000fbfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fbfc:	defffe04 	addi	sp,sp,-8
1000fc00:	dfc00115 	stw	ra,4(sp)
1000fc04:	df000015 	stw	fp,0(sp)
1000fc08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fc0c:	01800144 	movi	r6,5
1000fc10:	000b883a 	mov	r5,zero
1000fc14:	01040074 	movhi	r4,4097
1000fc18:	210bb804 	addi	r4,r4,12000
1000fc1c:	000fdac0 	call	1000fdac <altera_avalon_jtag_uart_init>
1000fc20:	01040074 	movhi	r4,4097
1000fc24:	210bae04 	addi	r4,r4,11960
1000fc28:	000fb8c0 	call	1000fb8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fc2c:	0001883a 	nop
}
1000fc30:	0001883a 	nop
1000fc34:	e037883a 	mov	sp,fp
1000fc38:	dfc00117 	ldw	ra,4(sp)
1000fc3c:	df000017 	ldw	fp,0(sp)
1000fc40:	dec00204 	addi	sp,sp,8
1000fc44:	f800283a 	ret

1000fc48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fc48:	defffa04 	addi	sp,sp,-24
1000fc4c:	dfc00515 	stw	ra,20(sp)
1000fc50:	df000415 	stw	fp,16(sp)
1000fc54:	df000404 	addi	fp,sp,16
1000fc58:	e13ffd15 	stw	r4,-12(fp)
1000fc5c:	e17ffe15 	stw	r5,-8(fp)
1000fc60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc64:	e0bffd17 	ldw	r2,-12(fp)
1000fc68:	10800017 	ldw	r2,0(r2)
1000fc6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fc70:	e0bffc17 	ldw	r2,-16(fp)
1000fc74:	10c00a04 	addi	r3,r2,40
1000fc78:	e0bffd17 	ldw	r2,-12(fp)
1000fc7c:	10800217 	ldw	r2,8(r2)
1000fc80:	100f883a 	mov	r7,r2
1000fc84:	e1bfff17 	ldw	r6,-4(fp)
1000fc88:	e17ffe17 	ldw	r5,-8(fp)
1000fc8c:	1809883a 	mov	r4,r3
1000fc90:	00102800 	call	10010280 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fc94:	e037883a 	mov	sp,fp
1000fc98:	dfc00117 	ldw	ra,4(sp)
1000fc9c:	df000017 	ldw	fp,0(sp)
1000fca0:	dec00204 	addi	sp,sp,8
1000fca4:	f800283a 	ret

1000fca8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fca8:	defffa04 	addi	sp,sp,-24
1000fcac:	dfc00515 	stw	ra,20(sp)
1000fcb0:	df000415 	stw	fp,16(sp)
1000fcb4:	df000404 	addi	fp,sp,16
1000fcb8:	e13ffd15 	stw	r4,-12(fp)
1000fcbc:	e17ffe15 	stw	r5,-8(fp)
1000fcc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fcc4:	e0bffd17 	ldw	r2,-12(fp)
1000fcc8:	10800017 	ldw	r2,0(r2)
1000fccc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fcd0:	e0bffc17 	ldw	r2,-16(fp)
1000fcd4:	10c00a04 	addi	r3,r2,40
1000fcd8:	e0bffd17 	ldw	r2,-12(fp)
1000fcdc:	10800217 	ldw	r2,8(r2)
1000fce0:	100f883a 	mov	r7,r2
1000fce4:	e1bfff17 	ldw	r6,-4(fp)
1000fce8:	e17ffe17 	ldw	r5,-8(fp)
1000fcec:	1809883a 	mov	r4,r3
1000fcf0:	001049c0 	call	1001049c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fcf4:	e037883a 	mov	sp,fp
1000fcf8:	dfc00117 	ldw	ra,4(sp)
1000fcfc:	df000017 	ldw	fp,0(sp)
1000fd00:	dec00204 	addi	sp,sp,8
1000fd04:	f800283a 	ret

1000fd08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fd08:	defffc04 	addi	sp,sp,-16
1000fd0c:	dfc00315 	stw	ra,12(sp)
1000fd10:	df000215 	stw	fp,8(sp)
1000fd14:	df000204 	addi	fp,sp,8
1000fd18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fd1c:	e0bfff17 	ldw	r2,-4(fp)
1000fd20:	10800017 	ldw	r2,0(r2)
1000fd24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fd28:	e0bffe17 	ldw	r2,-8(fp)
1000fd2c:	10c00a04 	addi	r3,r2,40
1000fd30:	e0bfff17 	ldw	r2,-4(fp)
1000fd34:	10800217 	ldw	r2,8(r2)
1000fd38:	100b883a 	mov	r5,r2
1000fd3c:	1809883a 	mov	r4,r3
1000fd40:	00101280 	call	10010128 <altera_avalon_jtag_uart_close>
}
1000fd44:	e037883a 	mov	sp,fp
1000fd48:	dfc00117 	ldw	ra,4(sp)
1000fd4c:	df000017 	ldw	fp,0(sp)
1000fd50:	dec00204 	addi	sp,sp,8
1000fd54:	f800283a 	ret

1000fd58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fd58:	defffa04 	addi	sp,sp,-24
1000fd5c:	dfc00515 	stw	ra,20(sp)
1000fd60:	df000415 	stw	fp,16(sp)
1000fd64:	df000404 	addi	fp,sp,16
1000fd68:	e13ffd15 	stw	r4,-12(fp)
1000fd6c:	e17ffe15 	stw	r5,-8(fp)
1000fd70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fd74:	e0bffd17 	ldw	r2,-12(fp)
1000fd78:	10800017 	ldw	r2,0(r2)
1000fd7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fd80:	e0bffc17 	ldw	r2,-16(fp)
1000fd84:	10800a04 	addi	r2,r2,40
1000fd88:	e1bfff17 	ldw	r6,-4(fp)
1000fd8c:	e17ffe17 	ldw	r5,-8(fp)
1000fd90:	1009883a 	mov	r4,r2
1000fd94:	00101900 	call	10010190 <altera_avalon_jtag_uart_ioctl>
}
1000fd98:	e037883a 	mov	sp,fp
1000fd9c:	dfc00117 	ldw	ra,4(sp)
1000fda0:	df000017 	ldw	fp,0(sp)
1000fda4:	dec00204 	addi	sp,sp,8
1000fda8:	f800283a 	ret

1000fdac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fdac:	defffa04 	addi	sp,sp,-24
1000fdb0:	dfc00515 	stw	ra,20(sp)
1000fdb4:	df000415 	stw	fp,16(sp)
1000fdb8:	df000404 	addi	fp,sp,16
1000fdbc:	e13ffd15 	stw	r4,-12(fp)
1000fdc0:	e17ffe15 	stw	r5,-8(fp)
1000fdc4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fdc8:	e0bffd17 	ldw	r2,-12(fp)
1000fdcc:	00c00044 	movi	r3,1
1000fdd0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fdd4:	e0bffd17 	ldw	r2,-12(fp)
1000fdd8:	10800017 	ldw	r2,0(r2)
1000fddc:	10800104 	addi	r2,r2,4
1000fde0:	1007883a 	mov	r3,r2
1000fde4:	e0bffd17 	ldw	r2,-12(fp)
1000fde8:	10800817 	ldw	r2,32(r2)
1000fdec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fdf0:	e0bffe17 	ldw	r2,-8(fp)
1000fdf4:	e0ffff17 	ldw	r3,-4(fp)
1000fdf8:	d8000015 	stw	zero,0(sp)
1000fdfc:	e1fffd17 	ldw	r7,-12(fp)
1000fe00:	01840074 	movhi	r6,4097
1000fe04:	31bf9d04 	addi	r6,r6,-396
1000fe08:	180b883a 	mov	r5,r3
1000fe0c:	1009883a 	mov	r4,r2
1000fe10:	0010b4c0 	call	10010b4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fe14:	e0bffd17 	ldw	r2,-12(fp)
1000fe18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fe1c:	e0bffd17 	ldw	r2,-12(fp)
1000fe20:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fe24:	00840074 	movhi	r2,4097
1000fe28:	10969d04 	addi	r2,r2,23156
1000fe2c:	10800017 	ldw	r2,0(r2)
1000fe30:	e1fffd17 	ldw	r7,-12(fp)
1000fe34:	01840074 	movhi	r6,4097
1000fe38:	31802004 	addi	r6,r6,128
1000fe3c:	100b883a 	mov	r5,r2
1000fe40:	1809883a 	mov	r4,r3
1000fe44:	00106c00 	call	100106c0 <alt_alarm_start>
1000fe48:	1000040e 	bge	r2,zero,1000fe5c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fe4c:	e0fffd17 	ldw	r3,-12(fp)
1000fe50:	00a00034 	movhi	r2,32768
1000fe54:	10bfffc4 	addi	r2,r2,-1
1000fe58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fe5c:	0001883a 	nop
1000fe60:	e037883a 	mov	sp,fp
1000fe64:	dfc00117 	ldw	ra,4(sp)
1000fe68:	df000017 	ldw	fp,0(sp)
1000fe6c:	dec00204 	addi	sp,sp,8
1000fe70:	f800283a 	ret

1000fe74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fe74:	defff804 	addi	sp,sp,-32
1000fe78:	df000715 	stw	fp,28(sp)
1000fe7c:	df000704 	addi	fp,sp,28
1000fe80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fe84:	e0bfff17 	ldw	r2,-4(fp)
1000fe88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fe8c:	e0bffb17 	ldw	r2,-20(fp)
1000fe90:	10800017 	ldw	r2,0(r2)
1000fe94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fe98:	e0bffc17 	ldw	r2,-16(fp)
1000fe9c:	10800104 	addi	r2,r2,4
1000fea0:	10800037 	ldwio	r2,0(r2)
1000fea4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fea8:	e0bffd17 	ldw	r2,-12(fp)
1000feac:	1080c00c 	andi	r2,r2,768
1000feb0:	10006d26 	beq	r2,zero,10010068 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000feb4:	e0bffd17 	ldw	r2,-12(fp)
1000feb8:	1080400c 	andi	r2,r2,256
1000febc:	10003526 	beq	r2,zero,1000ff94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fec0:	00800074 	movhi	r2,1
1000fec4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fec8:	e0bffb17 	ldw	r2,-20(fp)
1000fecc:	10800a17 	ldw	r2,40(r2)
1000fed0:	10800044 	addi	r2,r2,1
1000fed4:	1081ffcc 	andi	r2,r2,2047
1000fed8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fedc:	e0bffb17 	ldw	r2,-20(fp)
1000fee0:	10c00b17 	ldw	r3,44(r2)
1000fee4:	e0bffe17 	ldw	r2,-8(fp)
1000fee8:	18801526 	beq	r3,r2,1000ff40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000feec:	e0bffc17 	ldw	r2,-16(fp)
1000fef0:	10800037 	ldwio	r2,0(r2)
1000fef4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fef8:	e0bff917 	ldw	r2,-28(fp)
1000fefc:	10a0000c 	andi	r2,r2,32768
1000ff00:	10001126 	beq	r2,zero,1000ff48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ff04:	e0bffb17 	ldw	r2,-20(fp)
1000ff08:	10800a17 	ldw	r2,40(r2)
1000ff0c:	e0fff917 	ldw	r3,-28(fp)
1000ff10:	1809883a 	mov	r4,r3
1000ff14:	e0fffb17 	ldw	r3,-20(fp)
1000ff18:	1885883a 	add	r2,r3,r2
1000ff1c:	10800e04 	addi	r2,r2,56
1000ff20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ff24:	e0bffb17 	ldw	r2,-20(fp)
1000ff28:	10800a17 	ldw	r2,40(r2)
1000ff2c:	10800044 	addi	r2,r2,1
1000ff30:	10c1ffcc 	andi	r3,r2,2047
1000ff34:	e0bffb17 	ldw	r2,-20(fp)
1000ff38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000ff3c:	003fe206 	br	1000fec8 <__alt_data_end+0xf800fec8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000ff40:	0001883a 	nop
1000ff44:	00000106 	br	1000ff4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000ff48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000ff4c:	e0bff917 	ldw	r2,-28(fp)
1000ff50:	10bfffec 	andhi	r2,r2,65535
1000ff54:	10000f26 	beq	r2,zero,1000ff94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ff58:	e0bffb17 	ldw	r2,-20(fp)
1000ff5c:	10c00817 	ldw	r3,32(r2)
1000ff60:	00bfff84 	movi	r2,-2
1000ff64:	1886703a 	and	r3,r3,r2
1000ff68:	e0bffb17 	ldw	r2,-20(fp)
1000ff6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000ff70:	e0bffc17 	ldw	r2,-16(fp)
1000ff74:	10800104 	addi	r2,r2,4
1000ff78:	1007883a 	mov	r3,r2
1000ff7c:	e0bffb17 	ldw	r2,-20(fp)
1000ff80:	10800817 	ldw	r2,32(r2)
1000ff84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff88:	e0bffc17 	ldw	r2,-16(fp)
1000ff8c:	10800104 	addi	r2,r2,4
1000ff90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000ff94:	e0bffd17 	ldw	r2,-12(fp)
1000ff98:	1080800c 	andi	r2,r2,512
1000ff9c:	103fbe26 	beq	r2,zero,1000fe98 <__alt_data_end+0xf800fe98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000ffa0:	e0bffd17 	ldw	r2,-12(fp)
1000ffa4:	1004d43a 	srli	r2,r2,16
1000ffa8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ffac:	00001406 	br	10010000 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000ffb0:	e0bffc17 	ldw	r2,-16(fp)
1000ffb4:	e0fffb17 	ldw	r3,-20(fp)
1000ffb8:	18c00d17 	ldw	r3,52(r3)
1000ffbc:	e13ffb17 	ldw	r4,-20(fp)
1000ffc0:	20c7883a 	add	r3,r4,r3
1000ffc4:	18c20e04 	addi	r3,r3,2104
1000ffc8:	18c00003 	ldbu	r3,0(r3)
1000ffcc:	18c03fcc 	andi	r3,r3,255
1000ffd0:	18c0201c 	xori	r3,r3,128
1000ffd4:	18ffe004 	addi	r3,r3,-128
1000ffd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ffdc:	e0bffb17 	ldw	r2,-20(fp)
1000ffe0:	10800d17 	ldw	r2,52(r2)
1000ffe4:	10800044 	addi	r2,r2,1
1000ffe8:	10c1ffcc 	andi	r3,r2,2047
1000ffec:	e0bffb17 	ldw	r2,-20(fp)
1000fff0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fff4:	e0bffa17 	ldw	r2,-24(fp)
1000fff8:	10bfffc4 	addi	r2,r2,-1
1000fffc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010000:	e0bffa17 	ldw	r2,-24(fp)
10010004:	10000526 	beq	r2,zero,1001001c <altera_avalon_jtag_uart_irq+0x1a8>
10010008:	e0bffb17 	ldw	r2,-20(fp)
1001000c:	10c00d17 	ldw	r3,52(r2)
10010010:	e0bffb17 	ldw	r2,-20(fp)
10010014:	10800c17 	ldw	r2,48(r2)
10010018:	18bfe51e 	bne	r3,r2,1000ffb0 <__alt_data_end+0xf800ffb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1001001c:	e0bffa17 	ldw	r2,-24(fp)
10010020:	103f9d26 	beq	r2,zero,1000fe98 <__alt_data_end+0xf800fe98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010024:	e0bffb17 	ldw	r2,-20(fp)
10010028:	10c00817 	ldw	r3,32(r2)
1001002c:	00bfff44 	movi	r2,-3
10010030:	1886703a 	and	r3,r3,r2
10010034:	e0bffb17 	ldw	r2,-20(fp)
10010038:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001003c:	e0bffb17 	ldw	r2,-20(fp)
10010040:	10800017 	ldw	r2,0(r2)
10010044:	10800104 	addi	r2,r2,4
10010048:	1007883a 	mov	r3,r2
1001004c:	e0bffb17 	ldw	r2,-20(fp)
10010050:	10800817 	ldw	r2,32(r2)
10010054:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010058:	e0bffc17 	ldw	r2,-16(fp)
1001005c:	10800104 	addi	r2,r2,4
10010060:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010064:	003f8c06 	br	1000fe98 <__alt_data_end+0xf800fe98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010068:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1001006c:	0001883a 	nop
10010070:	e037883a 	mov	sp,fp
10010074:	df000017 	ldw	fp,0(sp)
10010078:	dec00104 	addi	sp,sp,4
1001007c:	f800283a 	ret

10010080 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010080:	defff804 	addi	sp,sp,-32
10010084:	df000715 	stw	fp,28(sp)
10010088:	df000704 	addi	fp,sp,28
1001008c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010090:	e0bffb17 	ldw	r2,-20(fp)
10010094:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010098:	e0bff917 	ldw	r2,-28(fp)
1001009c:	10800017 	ldw	r2,0(r2)
100100a0:	10800104 	addi	r2,r2,4
100100a4:	10800037 	ldwio	r2,0(r2)
100100a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100100ac:	e0bffa17 	ldw	r2,-24(fp)
100100b0:	1081000c 	andi	r2,r2,1024
100100b4:	10000b26 	beq	r2,zero,100100e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100100b8:	e0bff917 	ldw	r2,-28(fp)
100100bc:	10800017 	ldw	r2,0(r2)
100100c0:	10800104 	addi	r2,r2,4
100100c4:	1007883a 	mov	r3,r2
100100c8:	e0bff917 	ldw	r2,-28(fp)
100100cc:	10800817 	ldw	r2,32(r2)
100100d0:	10810014 	ori	r2,r2,1024
100100d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100100d8:	e0bff917 	ldw	r2,-28(fp)
100100dc:	10000915 	stw	zero,36(r2)
100100e0:	00000a06 	br	1001010c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100100e4:	e0bff917 	ldw	r2,-28(fp)
100100e8:	10c00917 	ldw	r3,36(r2)
100100ec:	00a00034 	movhi	r2,32768
100100f0:	10bfff04 	addi	r2,r2,-4
100100f4:	10c00536 	bltu	r2,r3,1001010c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100100f8:	e0bff917 	ldw	r2,-28(fp)
100100fc:	10800917 	ldw	r2,36(r2)
10010100:	10c00044 	addi	r3,r2,1
10010104:	e0bff917 	ldw	r2,-28(fp)
10010108:	10c00915 	stw	r3,36(r2)
1001010c:	00840074 	movhi	r2,4097
10010110:	10969d04 	addi	r2,r2,23156
10010114:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010118:	e037883a 	mov	sp,fp
1001011c:	df000017 	ldw	fp,0(sp)
10010120:	dec00104 	addi	sp,sp,4
10010124:	f800283a 	ret

10010128 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010128:	defffd04 	addi	sp,sp,-12
1001012c:	df000215 	stw	fp,8(sp)
10010130:	df000204 	addi	fp,sp,8
10010134:	e13ffe15 	stw	r4,-8(fp)
10010138:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001013c:	00000506 	br	10010154 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010140:	e0bfff17 	ldw	r2,-4(fp)
10010144:	1090000c 	andi	r2,r2,16384
10010148:	10000226 	beq	r2,zero,10010154 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001014c:	00bffd44 	movi	r2,-11
10010150:	00000b06 	br	10010180 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010154:	e0bffe17 	ldw	r2,-8(fp)
10010158:	10c00d17 	ldw	r3,52(r2)
1001015c:	e0bffe17 	ldw	r2,-8(fp)
10010160:	10800c17 	ldw	r2,48(r2)
10010164:	18800526 	beq	r3,r2,1001017c <altera_avalon_jtag_uart_close+0x54>
10010168:	e0bffe17 	ldw	r2,-8(fp)
1001016c:	10c00917 	ldw	r3,36(r2)
10010170:	e0bffe17 	ldw	r2,-8(fp)
10010174:	10800117 	ldw	r2,4(r2)
10010178:	18bff136 	bltu	r3,r2,10010140 <__alt_data_end+0xf8010140>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001017c:	0005883a 	mov	r2,zero
}
10010180:	e037883a 	mov	sp,fp
10010184:	df000017 	ldw	fp,0(sp)
10010188:	dec00104 	addi	sp,sp,4
1001018c:	f800283a 	ret

10010190 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010190:	defffa04 	addi	sp,sp,-24
10010194:	df000515 	stw	fp,20(sp)
10010198:	df000504 	addi	fp,sp,20
1001019c:	e13ffd15 	stw	r4,-12(fp)
100101a0:	e17ffe15 	stw	r5,-8(fp)
100101a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100101a8:	00bff9c4 	movi	r2,-25
100101ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100101b0:	e0bffe17 	ldw	r2,-8(fp)
100101b4:	10da8060 	cmpeqi	r3,r2,27137
100101b8:	1800031e 	bne	r3,zero,100101c8 <altera_avalon_jtag_uart_ioctl+0x38>
100101bc:	109a80a0 	cmpeqi	r2,r2,27138
100101c0:	1000181e 	bne	r2,zero,10010224 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100101c4:	00002906 	br	1001026c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100101c8:	e0bffd17 	ldw	r2,-12(fp)
100101cc:	10c00117 	ldw	r3,4(r2)
100101d0:	00a00034 	movhi	r2,32768
100101d4:	10bfffc4 	addi	r2,r2,-1
100101d8:	18802126 	beq	r3,r2,10010260 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100101dc:	e0bfff17 	ldw	r2,-4(fp)
100101e0:	10800017 	ldw	r2,0(r2)
100101e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100101e8:	e0bffc17 	ldw	r2,-16(fp)
100101ec:	10800090 	cmplti	r2,r2,2
100101f0:	1000061e 	bne	r2,zero,1001020c <altera_avalon_jtag_uart_ioctl+0x7c>
100101f4:	e0fffc17 	ldw	r3,-16(fp)
100101f8:	00a00034 	movhi	r2,32768
100101fc:	10bfffc4 	addi	r2,r2,-1
10010200:	18800226 	beq	r3,r2,1001020c <altera_avalon_jtag_uart_ioctl+0x7c>
10010204:	e0bffc17 	ldw	r2,-16(fp)
10010208:	00000206 	br	10010214 <altera_avalon_jtag_uart_ioctl+0x84>
1001020c:	00a00034 	movhi	r2,32768
10010210:	10bfff84 	addi	r2,r2,-2
10010214:	e0fffd17 	ldw	r3,-12(fp)
10010218:	18800115 	stw	r2,4(r3)
      rc = 0;
1001021c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010220:	00000f06 	br	10010260 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010224:	e0bffd17 	ldw	r2,-12(fp)
10010228:	10c00117 	ldw	r3,4(r2)
1001022c:	00a00034 	movhi	r2,32768
10010230:	10bfffc4 	addi	r2,r2,-1
10010234:	18800c26 	beq	r3,r2,10010268 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010238:	e0bffd17 	ldw	r2,-12(fp)
1001023c:	10c00917 	ldw	r3,36(r2)
10010240:	e0bffd17 	ldw	r2,-12(fp)
10010244:	10800117 	ldw	r2,4(r2)
10010248:	1885803a 	cmpltu	r2,r3,r2
1001024c:	10c03fcc 	andi	r3,r2,255
10010250:	e0bfff17 	ldw	r2,-4(fp)
10010254:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010258:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001025c:	00000206 	br	10010268 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010260:	0001883a 	nop
10010264:	00000106 	br	1001026c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010268:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001026c:	e0bffb17 	ldw	r2,-20(fp)
}
10010270:	e037883a 	mov	sp,fp
10010274:	df000017 	ldw	fp,0(sp)
10010278:	dec00104 	addi	sp,sp,4
1001027c:	f800283a 	ret

10010280 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010280:	defff304 	addi	sp,sp,-52
10010284:	dfc00c15 	stw	ra,48(sp)
10010288:	df000b15 	stw	fp,44(sp)
1001028c:	df000b04 	addi	fp,sp,44
10010290:	e13ffc15 	stw	r4,-16(fp)
10010294:	e17ffd15 	stw	r5,-12(fp)
10010298:	e1bffe15 	stw	r6,-8(fp)
1001029c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100102a0:	e0bffd17 	ldw	r2,-12(fp)
100102a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100102a8:	00004706 	br	100103c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100102ac:	e0bffc17 	ldw	r2,-16(fp)
100102b0:	10800a17 	ldw	r2,40(r2)
100102b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100102b8:	e0bffc17 	ldw	r2,-16(fp)
100102bc:	10800b17 	ldw	r2,44(r2)
100102c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100102c4:	e0fff717 	ldw	r3,-36(fp)
100102c8:	e0bff817 	ldw	r2,-32(fp)
100102cc:	18800536 	bltu	r3,r2,100102e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100102d0:	e0fff717 	ldw	r3,-36(fp)
100102d4:	e0bff817 	ldw	r2,-32(fp)
100102d8:	1885c83a 	sub	r2,r3,r2
100102dc:	e0bff615 	stw	r2,-40(fp)
100102e0:	00000406 	br	100102f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100102e4:	00c20004 	movi	r3,2048
100102e8:	e0bff817 	ldw	r2,-32(fp)
100102ec:	1885c83a 	sub	r2,r3,r2
100102f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100102f4:	e0bff617 	ldw	r2,-40(fp)
100102f8:	10001e26 	beq	r2,zero,10010374 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100102fc:	e0fffe17 	ldw	r3,-8(fp)
10010300:	e0bff617 	ldw	r2,-40(fp)
10010304:	1880022e 	bgeu	r3,r2,10010310 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010308:	e0bffe17 	ldw	r2,-8(fp)
1001030c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010310:	e0bffc17 	ldw	r2,-16(fp)
10010314:	10c00e04 	addi	r3,r2,56
10010318:	e0bff817 	ldw	r2,-32(fp)
1001031c:	1885883a 	add	r2,r3,r2
10010320:	e1bff617 	ldw	r6,-40(fp)
10010324:	100b883a 	mov	r5,r2
10010328:	e13ff517 	ldw	r4,-44(fp)
1001032c:	0007e080 	call	10007e08 <memcpy>
      ptr   += n;
10010330:	e0fff517 	ldw	r3,-44(fp)
10010334:	e0bff617 	ldw	r2,-40(fp)
10010338:	1885883a 	add	r2,r3,r2
1001033c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010340:	e0fffe17 	ldw	r3,-8(fp)
10010344:	e0bff617 	ldw	r2,-40(fp)
10010348:	1885c83a 	sub	r2,r3,r2
1001034c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010350:	e0fff817 	ldw	r3,-32(fp)
10010354:	e0bff617 	ldw	r2,-40(fp)
10010358:	1885883a 	add	r2,r3,r2
1001035c:	10c1ffcc 	andi	r3,r2,2047
10010360:	e0bffc17 	ldw	r2,-16(fp)
10010364:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010368:	e0bffe17 	ldw	r2,-8(fp)
1001036c:	00bfcf16 	blt	zero,r2,100102ac <__alt_data_end+0xf80102ac>
10010370:	00000106 	br	10010378 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010374:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010378:	e0fff517 	ldw	r3,-44(fp)
1001037c:	e0bffd17 	ldw	r2,-12(fp)
10010380:	1880141e 	bne	r3,r2,100103d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010384:	e0bfff17 	ldw	r2,-4(fp)
10010388:	1090000c 	andi	r2,r2,16384
1001038c:	1000131e 	bne	r2,zero,100103dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010390:	0001883a 	nop
10010394:	e0bffc17 	ldw	r2,-16(fp)
10010398:	10c00a17 	ldw	r3,40(r2)
1001039c:	e0bff717 	ldw	r2,-36(fp)
100103a0:	1880051e 	bne	r3,r2,100103b8 <altera_avalon_jtag_uart_read+0x138>
100103a4:	e0bffc17 	ldw	r2,-16(fp)
100103a8:	10c00917 	ldw	r3,36(r2)
100103ac:	e0bffc17 	ldw	r2,-16(fp)
100103b0:	10800117 	ldw	r2,4(r2)
100103b4:	18bff736 	bltu	r3,r2,10010394 <__alt_data_end+0xf8010394>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100103b8:	e0bffc17 	ldw	r2,-16(fp)
100103bc:	10c00a17 	ldw	r3,40(r2)
100103c0:	e0bff717 	ldw	r2,-36(fp)
100103c4:	18800726 	beq	r3,r2,100103e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100103c8:	e0bffe17 	ldw	r2,-8(fp)
100103cc:	00bfb716 	blt	zero,r2,100102ac <__alt_data_end+0xf80102ac>
100103d0:	00000506 	br	100103e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100103d4:	0001883a 	nop
100103d8:	00000306 	br	100103e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100103dc:	0001883a 	nop
100103e0:	00000106 	br	100103e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100103e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100103e8:	e0fff517 	ldw	r3,-44(fp)
100103ec:	e0bffd17 	ldw	r2,-12(fp)
100103f0:	18801826 	beq	r3,r2,10010454 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100103f4:	0005303a 	rdctl	r2,status
100103f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103fc:	e0fffb17 	ldw	r3,-20(fp)
10010400:	00bfff84 	movi	r2,-2
10010404:	1884703a 	and	r2,r3,r2
10010408:	1001703a 	wrctl	status,r2
  
  return context;
1001040c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010410:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010414:	e0bffc17 	ldw	r2,-16(fp)
10010418:	10800817 	ldw	r2,32(r2)
1001041c:	10c00054 	ori	r3,r2,1
10010420:	e0bffc17 	ldw	r2,-16(fp)
10010424:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010428:	e0bffc17 	ldw	r2,-16(fp)
1001042c:	10800017 	ldw	r2,0(r2)
10010430:	10800104 	addi	r2,r2,4
10010434:	1007883a 	mov	r3,r2
10010438:	e0bffc17 	ldw	r2,-16(fp)
1001043c:	10800817 	ldw	r2,32(r2)
10010440:	18800035 	stwio	r2,0(r3)
10010444:	e0bffa17 	ldw	r2,-24(fp)
10010448:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001044c:	e0bff917 	ldw	r2,-28(fp)
10010450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010454:	e0fff517 	ldw	r3,-44(fp)
10010458:	e0bffd17 	ldw	r2,-12(fp)
1001045c:	18800426 	beq	r3,r2,10010470 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010460:	e0fff517 	ldw	r3,-44(fp)
10010464:	e0bffd17 	ldw	r2,-12(fp)
10010468:	1885c83a 	sub	r2,r3,r2
1001046c:	00000606 	br	10010488 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010470:	e0bfff17 	ldw	r2,-4(fp)
10010474:	1090000c 	andi	r2,r2,16384
10010478:	10000226 	beq	r2,zero,10010484 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1001047c:	00bffd44 	movi	r2,-11
10010480:	00000106 	br	10010488 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010484:	00bffec4 	movi	r2,-5
}
10010488:	e037883a 	mov	sp,fp
1001048c:	dfc00117 	ldw	ra,4(sp)
10010490:	df000017 	ldw	fp,0(sp)
10010494:	dec00204 	addi	sp,sp,8
10010498:	f800283a 	ret

1001049c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1001049c:	defff304 	addi	sp,sp,-52
100104a0:	dfc00c15 	stw	ra,48(sp)
100104a4:	df000b15 	stw	fp,44(sp)
100104a8:	df000b04 	addi	fp,sp,44
100104ac:	e13ffc15 	stw	r4,-16(fp)
100104b0:	e17ffd15 	stw	r5,-12(fp)
100104b4:	e1bffe15 	stw	r6,-8(fp)
100104b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100104bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100104c0:	e0bffd17 	ldw	r2,-12(fp)
100104c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100104c8:	00003706 	br	100105a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100104cc:	e0bffc17 	ldw	r2,-16(fp)
100104d0:	10800c17 	ldw	r2,48(r2)
100104d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100104d8:	e0bffc17 	ldw	r2,-16(fp)
100104dc:	10800d17 	ldw	r2,52(r2)
100104e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100104e4:	e0fff917 	ldw	r3,-28(fp)
100104e8:	e0bff517 	ldw	r2,-44(fp)
100104ec:	1880062e 	bgeu	r3,r2,10010508 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100104f0:	e0fff517 	ldw	r3,-44(fp)
100104f4:	e0bff917 	ldw	r2,-28(fp)
100104f8:	1885c83a 	sub	r2,r3,r2
100104fc:	10bfffc4 	addi	r2,r2,-1
10010500:	e0bff615 	stw	r2,-40(fp)
10010504:	00000b06 	br	10010534 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010508:	e0bff517 	ldw	r2,-44(fp)
1001050c:	10000526 	beq	r2,zero,10010524 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010510:	00c20004 	movi	r3,2048
10010514:	e0bff917 	ldw	r2,-28(fp)
10010518:	1885c83a 	sub	r2,r3,r2
1001051c:	e0bff615 	stw	r2,-40(fp)
10010520:	00000406 	br	10010534 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010524:	00c1ffc4 	movi	r3,2047
10010528:	e0bff917 	ldw	r2,-28(fp)
1001052c:	1885c83a 	sub	r2,r3,r2
10010530:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010534:	e0bff617 	ldw	r2,-40(fp)
10010538:	10001e26 	beq	r2,zero,100105b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1001053c:	e0fffe17 	ldw	r3,-8(fp)
10010540:	e0bff617 	ldw	r2,-40(fp)
10010544:	1880022e 	bgeu	r3,r2,10010550 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010548:	e0bffe17 	ldw	r2,-8(fp)
1001054c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010550:	e0bffc17 	ldw	r2,-16(fp)
10010554:	10c20e04 	addi	r3,r2,2104
10010558:	e0bff917 	ldw	r2,-28(fp)
1001055c:	1885883a 	add	r2,r3,r2
10010560:	e1bff617 	ldw	r6,-40(fp)
10010564:	e17ffd17 	ldw	r5,-12(fp)
10010568:	1009883a 	mov	r4,r2
1001056c:	0007e080 	call	10007e08 <memcpy>
      ptr   += n;
10010570:	e0fffd17 	ldw	r3,-12(fp)
10010574:	e0bff617 	ldw	r2,-40(fp)
10010578:	1885883a 	add	r2,r3,r2
1001057c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010580:	e0fffe17 	ldw	r3,-8(fp)
10010584:	e0bff617 	ldw	r2,-40(fp)
10010588:	1885c83a 	sub	r2,r3,r2
1001058c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010590:	e0fff917 	ldw	r3,-28(fp)
10010594:	e0bff617 	ldw	r2,-40(fp)
10010598:	1885883a 	add	r2,r3,r2
1001059c:	10c1ffcc 	andi	r3,r2,2047
100105a0:	e0bffc17 	ldw	r2,-16(fp)
100105a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100105a8:	e0bffe17 	ldw	r2,-8(fp)
100105ac:	00bfc716 	blt	zero,r2,100104cc <__alt_data_end+0xf80104cc>
100105b0:	00000106 	br	100105b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100105b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105b8:	0005303a 	rdctl	r2,status
100105bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105c0:	e0fffb17 	ldw	r3,-20(fp)
100105c4:	00bfff84 	movi	r2,-2
100105c8:	1884703a 	and	r2,r3,r2
100105cc:	1001703a 	wrctl	status,r2
  
  return context;
100105d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100105d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100105d8:	e0bffc17 	ldw	r2,-16(fp)
100105dc:	10800817 	ldw	r2,32(r2)
100105e0:	10c00094 	ori	r3,r2,2
100105e4:	e0bffc17 	ldw	r2,-16(fp)
100105e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100105ec:	e0bffc17 	ldw	r2,-16(fp)
100105f0:	10800017 	ldw	r2,0(r2)
100105f4:	10800104 	addi	r2,r2,4
100105f8:	1007883a 	mov	r3,r2
100105fc:	e0bffc17 	ldw	r2,-16(fp)
10010600:	10800817 	ldw	r2,32(r2)
10010604:	18800035 	stwio	r2,0(r3)
10010608:	e0bffa17 	ldw	r2,-24(fp)
1001060c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010610:	e0bff817 	ldw	r2,-32(fp)
10010614:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010618:	e0bffe17 	ldw	r2,-8(fp)
1001061c:	0080100e 	bge	zero,r2,10010660 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010620:	e0bfff17 	ldw	r2,-4(fp)
10010624:	1090000c 	andi	r2,r2,16384
10010628:	1000101e 	bne	r2,zero,1001066c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1001062c:	0001883a 	nop
10010630:	e0bffc17 	ldw	r2,-16(fp)
10010634:	10c00d17 	ldw	r3,52(r2)
10010638:	e0bff517 	ldw	r2,-44(fp)
1001063c:	1880051e 	bne	r3,r2,10010654 <altera_avalon_jtag_uart_write+0x1b8>
10010640:	e0bffc17 	ldw	r2,-16(fp)
10010644:	10c00917 	ldw	r3,36(r2)
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	10800117 	ldw	r2,4(r2)
10010650:	18bff736 	bltu	r3,r2,10010630 <__alt_data_end+0xf8010630>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010654:	e0bffc17 	ldw	r2,-16(fp)
10010658:	10800917 	ldw	r2,36(r2)
1001065c:	1000051e 	bne	r2,zero,10010674 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010660:	e0bffe17 	ldw	r2,-8(fp)
10010664:	00bfd016 	blt	zero,r2,100105a8 <__alt_data_end+0xf80105a8>
10010668:	00000306 	br	10010678 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1001066c:	0001883a 	nop
10010670:	00000106 	br	10010678 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010674:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010678:	e0fffd17 	ldw	r3,-12(fp)
1001067c:	e0bff717 	ldw	r2,-36(fp)
10010680:	18800426 	beq	r3,r2,10010694 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010684:	e0fffd17 	ldw	r3,-12(fp)
10010688:	e0bff717 	ldw	r2,-36(fp)
1001068c:	1885c83a 	sub	r2,r3,r2
10010690:	00000606 	br	100106ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010694:	e0bfff17 	ldw	r2,-4(fp)
10010698:	1090000c 	andi	r2,r2,16384
1001069c:	10000226 	beq	r2,zero,100106a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100106a0:	00bffd44 	movi	r2,-11
100106a4:	00000106 	br	100106ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100106a8:	00bffec4 	movi	r2,-5
}
100106ac:	e037883a 	mov	sp,fp
100106b0:	dfc00117 	ldw	ra,4(sp)
100106b4:	df000017 	ldw	fp,0(sp)
100106b8:	dec00204 	addi	sp,sp,8
100106bc:	f800283a 	ret

100106c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100106c0:	defff504 	addi	sp,sp,-44
100106c4:	df000a15 	stw	fp,40(sp)
100106c8:	df000a04 	addi	fp,sp,40
100106cc:	e13ffc15 	stw	r4,-16(fp)
100106d0:	e17ffd15 	stw	r5,-12(fp)
100106d4:	e1bffe15 	stw	r6,-8(fp)
100106d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100106dc:	e03ff615 	stw	zero,-40(fp)
100106e0:	00840074 	movhi	r2,4097
100106e4:	10969d04 	addi	r2,r2,23156
100106e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100106ec:	10003f26 	beq	r2,zero,100107ec <alt_alarm_start+0x12c>
  {
    if (alarm)
100106f0:	e0bffc17 	ldw	r2,-16(fp)
100106f4:	10003b26 	beq	r2,zero,100107e4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100106f8:	e0bffc17 	ldw	r2,-16(fp)
100106fc:	e0fffe17 	ldw	r3,-8(fp)
10010700:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010704:	e0bffc17 	ldw	r2,-16(fp)
10010708:	e0ffff17 	ldw	r3,-4(fp)
1001070c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010710:	0005303a 	rdctl	r2,status
10010714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010718:	e0fff917 	ldw	r3,-28(fp)
1001071c:	00bfff84 	movi	r2,-2
10010720:	1884703a 	and	r2,r3,r2
10010724:	1001703a 	wrctl	status,r2
  
  return context;
10010728:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1001072c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010730:	00840074 	movhi	r2,4097
10010734:	10969e04 	addi	r2,r2,23160
10010738:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1001073c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010740:	e0fffd17 	ldw	r3,-12(fp)
10010744:	e0bff617 	ldw	r2,-40(fp)
10010748:	1885883a 	add	r2,r3,r2
1001074c:	10c00044 	addi	r3,r2,1
10010750:	e0bffc17 	ldw	r2,-16(fp)
10010754:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010758:	e0bffc17 	ldw	r2,-16(fp)
1001075c:	10c00217 	ldw	r3,8(r2)
10010760:	e0bff617 	ldw	r2,-40(fp)
10010764:	1880042e 	bgeu	r3,r2,10010778 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010768:	e0bffc17 	ldw	r2,-16(fp)
1001076c:	00c00044 	movi	r3,1
10010770:	10c00405 	stb	r3,16(r2)
10010774:	00000206 	br	10010780 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010778:	e0bffc17 	ldw	r2,-16(fp)
1001077c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010780:	e0fffc17 	ldw	r3,-16(fp)
10010784:	00840074 	movhi	r2,4097
10010788:	108fd404 	addi	r2,r2,16208
1001078c:	e0bffa15 	stw	r2,-24(fp)
10010790:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010794:	e0bffb17 	ldw	r2,-20(fp)
10010798:	e0fffa17 	ldw	r3,-24(fp)
1001079c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100107a0:	e0bffa17 	ldw	r2,-24(fp)
100107a4:	10c00017 	ldw	r3,0(r2)
100107a8:	e0bffb17 	ldw	r2,-20(fp)
100107ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100107b0:	e0bffa17 	ldw	r2,-24(fp)
100107b4:	10800017 	ldw	r2,0(r2)
100107b8:	e0fffb17 	ldw	r3,-20(fp)
100107bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100107c0:	e0bffa17 	ldw	r2,-24(fp)
100107c4:	e0fffb17 	ldw	r3,-20(fp)
100107c8:	10c00015 	stw	r3,0(r2)
100107cc:	e0bff817 	ldw	r2,-32(fp)
100107d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100107d4:	e0bff717 	ldw	r2,-36(fp)
100107d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100107dc:	0005883a 	mov	r2,zero
100107e0:	00000306 	br	100107f0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100107e4:	00bffa84 	movi	r2,-22
100107e8:	00000106 	br	100107f0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100107ec:	00bfde84 	movi	r2,-134
  }
}
100107f0:	e037883a 	mov	sp,fp
100107f4:	df000017 	ldw	fp,0(sp)
100107f8:	dec00104 	addi	sp,sp,4
100107fc:	f800283a 	ret

10010800 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010800:	defffa04 	addi	sp,sp,-24
10010804:	dfc00515 	stw	ra,20(sp)
10010808:	df000415 	stw	fp,16(sp)
1001080c:	df000404 	addi	fp,sp,16
10010810:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010814:	00800244 	movi	r2,9
10010818:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001081c:	014003f4 	movhi	r5,15
10010820:	29509004 	addi	r5,r5,16960
10010824:	e13ffd17 	ldw	r4,-12(fp)
10010828:	000c8880 	call	1000c888 <__mulsi3>
1001082c:	100b883a 	mov	r5,r2
10010830:	0100bef4 	movhi	r4,763
10010834:	213c2004 	addi	r4,r4,-3968
10010838:	000c7cc0 	call	1000c7cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001083c:	100b883a 	mov	r5,r2
10010840:	01200034 	movhi	r4,32768
10010844:	213fffc4 	addi	r4,r4,-1
10010848:	000c7cc0 	call	1000c7cc <__udivsi3>
1001084c:	100b883a 	mov	r5,r2
10010850:	e13fff17 	ldw	r4,-4(fp)
10010854:	000c7cc0 	call	1000c7cc <__udivsi3>
10010858:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001085c:	e0bffe17 	ldw	r2,-8(fp)
10010860:	10002a26 	beq	r2,zero,1001090c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010864:	e03ffc15 	stw	zero,-16(fp)
10010868:	00001706 	br	100108c8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1001086c:	00a00034 	movhi	r2,32768
10010870:	10bfffc4 	addi	r2,r2,-1
10010874:	10bfffc4 	addi	r2,r2,-1
10010878:	103ffe1e 	bne	r2,zero,10010874 <__alt_data_end+0xf8010874>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1001087c:	014003f4 	movhi	r5,15
10010880:	29509004 	addi	r5,r5,16960
10010884:	e13ffd17 	ldw	r4,-12(fp)
10010888:	000c8880 	call	1000c888 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1001088c:	100b883a 	mov	r5,r2
10010890:	0100bef4 	movhi	r4,763
10010894:	213c2004 	addi	r4,r4,-3968
10010898:	000c7cc0 	call	1000c7cc <__udivsi3>
1001089c:	100b883a 	mov	r5,r2
100108a0:	01200034 	movhi	r4,32768
100108a4:	213fffc4 	addi	r4,r4,-1
100108a8:	000c7cc0 	call	1000c7cc <__udivsi3>
100108ac:	1007883a 	mov	r3,r2
100108b0:	e0bfff17 	ldw	r2,-4(fp)
100108b4:	10c5c83a 	sub	r2,r2,r3
100108b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100108bc:	e0bffc17 	ldw	r2,-16(fp)
100108c0:	10800044 	addi	r2,r2,1
100108c4:	e0bffc15 	stw	r2,-16(fp)
100108c8:	e0fffc17 	ldw	r3,-16(fp)
100108cc:	e0bffe17 	ldw	r2,-8(fp)
100108d0:	18bfe616 	blt	r3,r2,1001086c <__alt_data_end+0xf801086c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100108d4:	014003f4 	movhi	r5,15
100108d8:	29509004 	addi	r5,r5,16960
100108dc:	e13ffd17 	ldw	r4,-12(fp)
100108e0:	000c8880 	call	1000c888 <__mulsi3>
100108e4:	100b883a 	mov	r5,r2
100108e8:	0100bef4 	movhi	r4,763
100108ec:	213c2004 	addi	r4,r4,-3968
100108f0:	000c7cc0 	call	1000c7cc <__udivsi3>
100108f4:	e17fff17 	ldw	r5,-4(fp)
100108f8:	1009883a 	mov	r4,r2
100108fc:	000c8880 	call	1000c888 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010900:	10bfffc4 	addi	r2,r2,-1
10010904:	103ffe1e 	bne	r2,zero,10010900 <__alt_data_end+0xf8010900>
10010908:	00000d06 	br	10010940 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001090c:	014003f4 	movhi	r5,15
10010910:	29509004 	addi	r5,r5,16960
10010914:	e13ffd17 	ldw	r4,-12(fp)
10010918:	000c8880 	call	1000c888 <__mulsi3>
1001091c:	100b883a 	mov	r5,r2
10010920:	0100bef4 	movhi	r4,763
10010924:	213c2004 	addi	r4,r4,-3968
10010928:	000c7cc0 	call	1000c7cc <__udivsi3>
1001092c:	e17fff17 	ldw	r5,-4(fp)
10010930:	1009883a 	mov	r4,r2
10010934:	000c8880 	call	1000c888 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010938:	10bfffc4 	addi	r2,r2,-1
1001093c:	00bffe16 	blt	zero,r2,10010938 <__alt_data_end+0xf8010938>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010940:	0005883a 	mov	r2,zero
}
10010944:	e037883a 	mov	sp,fp
10010948:	dfc00117 	ldw	ra,4(sp)
1001094c:	df000017 	ldw	fp,0(sp)
10010950:	dec00204 	addi	sp,sp,8
10010954:	f800283a 	ret

10010958 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010958:	deffff04 	addi	sp,sp,-4
1001095c:	df000015 	stw	fp,0(sp)
10010960:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010964:	0001883a 	nop
10010968:	e037883a 	mov	sp,fp
1001096c:	df000017 	ldw	fp,0(sp)
10010970:	dec00104 	addi	sp,sp,4
10010974:	f800283a 	ret

10010978 <alt_get_errno>:
10010978:	defffe04 	addi	sp,sp,-8
1001097c:	dfc00115 	stw	ra,4(sp)
10010980:	df000015 	stw	fp,0(sp)
10010984:	d839883a 	mov	fp,sp
10010988:	00840074 	movhi	r2,4097
1001098c:	108fd104 	addi	r2,r2,16196
10010990:	10800017 	ldw	r2,0(r2)
10010994:	10000526 	beq	r2,zero,100109ac <alt_get_errno+0x34>
10010998:	00840074 	movhi	r2,4097
1001099c:	108fd104 	addi	r2,r2,16196
100109a0:	10800017 	ldw	r2,0(r2)
100109a4:	103ee83a 	callr	r2
100109a8:	00000206 	br	100109b4 <alt_get_errno+0x3c>
100109ac:	00840074 	movhi	r2,4097
100109b0:	10969804 	addi	r2,r2,23136
100109b4:	e037883a 	mov	sp,fp
100109b8:	dfc00117 	ldw	ra,4(sp)
100109bc:	df000017 	ldw	fp,0(sp)
100109c0:	dec00204 	addi	sp,sp,8
100109c4:	f800283a 	ret

100109c8 <alt_dev_llist_insert>:
100109c8:	defffa04 	addi	sp,sp,-24
100109cc:	dfc00515 	stw	ra,20(sp)
100109d0:	df000415 	stw	fp,16(sp)
100109d4:	df000404 	addi	fp,sp,16
100109d8:	e13ffe15 	stw	r4,-8(fp)
100109dc:	e17fff15 	stw	r5,-4(fp)
100109e0:	e0bffe17 	ldw	r2,-8(fp)
100109e4:	10000326 	beq	r2,zero,100109f4 <alt_dev_llist_insert+0x2c>
100109e8:	e0bffe17 	ldw	r2,-8(fp)
100109ec:	10800217 	ldw	r2,8(r2)
100109f0:	1000061e 	bne	r2,zero,10010a0c <alt_dev_llist_insert+0x44>
100109f4:	00109780 	call	10010978 <alt_get_errno>
100109f8:	1007883a 	mov	r3,r2
100109fc:	00800584 	movi	r2,22
10010a00:	18800015 	stw	r2,0(r3)
10010a04:	00bffa84 	movi	r2,-22
10010a08:	00001306 	br	10010a58 <alt_dev_llist_insert+0x90>
10010a0c:	e0bffe17 	ldw	r2,-8(fp)
10010a10:	e0ffff17 	ldw	r3,-4(fp)
10010a14:	e0fffc15 	stw	r3,-16(fp)
10010a18:	e0bffd15 	stw	r2,-12(fp)
10010a1c:	e0bffd17 	ldw	r2,-12(fp)
10010a20:	e0fffc17 	ldw	r3,-16(fp)
10010a24:	10c00115 	stw	r3,4(r2)
10010a28:	e0bffc17 	ldw	r2,-16(fp)
10010a2c:	10c00017 	ldw	r3,0(r2)
10010a30:	e0bffd17 	ldw	r2,-12(fp)
10010a34:	10c00015 	stw	r3,0(r2)
10010a38:	e0bffc17 	ldw	r2,-16(fp)
10010a3c:	10800017 	ldw	r2,0(r2)
10010a40:	e0fffd17 	ldw	r3,-12(fp)
10010a44:	10c00115 	stw	r3,4(r2)
10010a48:	e0bffc17 	ldw	r2,-16(fp)
10010a4c:	e0fffd17 	ldw	r3,-12(fp)
10010a50:	10c00015 	stw	r3,0(r2)
10010a54:	0005883a 	mov	r2,zero
10010a58:	e037883a 	mov	sp,fp
10010a5c:	dfc00117 	ldw	ra,4(sp)
10010a60:	df000017 	ldw	fp,0(sp)
10010a64:	dec00204 	addi	sp,sp,8
10010a68:	f800283a 	ret

10010a6c <_do_ctors>:
10010a6c:	defffd04 	addi	sp,sp,-12
10010a70:	dfc00215 	stw	ra,8(sp)
10010a74:	df000115 	stw	fp,4(sp)
10010a78:	df000104 	addi	fp,sp,4
10010a7c:	00840074 	movhi	r2,4097
10010a80:	10867c04 	addi	r2,r2,6640
10010a84:	e0bfff15 	stw	r2,-4(fp)
10010a88:	00000606 	br	10010aa4 <_do_ctors+0x38>
10010a8c:	e0bfff17 	ldw	r2,-4(fp)
10010a90:	10800017 	ldw	r2,0(r2)
10010a94:	103ee83a 	callr	r2
10010a98:	e0bfff17 	ldw	r2,-4(fp)
10010a9c:	10bfff04 	addi	r2,r2,-4
10010aa0:	e0bfff15 	stw	r2,-4(fp)
10010aa4:	e0ffff17 	ldw	r3,-4(fp)
10010aa8:	00840074 	movhi	r2,4097
10010aac:	10867d04 	addi	r2,r2,6644
10010ab0:	18bff62e 	bgeu	r3,r2,10010a8c <__alt_data_end+0xf8010a8c>
10010ab4:	0001883a 	nop
10010ab8:	e037883a 	mov	sp,fp
10010abc:	dfc00117 	ldw	ra,4(sp)
10010ac0:	df000017 	ldw	fp,0(sp)
10010ac4:	dec00204 	addi	sp,sp,8
10010ac8:	f800283a 	ret

10010acc <_do_dtors>:
10010acc:	defffd04 	addi	sp,sp,-12
10010ad0:	dfc00215 	stw	ra,8(sp)
10010ad4:	df000115 	stw	fp,4(sp)
10010ad8:	df000104 	addi	fp,sp,4
10010adc:	00840074 	movhi	r2,4097
10010ae0:	10867c04 	addi	r2,r2,6640
10010ae4:	e0bfff15 	stw	r2,-4(fp)
10010ae8:	00000606 	br	10010b04 <_do_dtors+0x38>
10010aec:	e0bfff17 	ldw	r2,-4(fp)
10010af0:	10800017 	ldw	r2,0(r2)
10010af4:	103ee83a 	callr	r2
10010af8:	e0bfff17 	ldw	r2,-4(fp)
10010afc:	10bfff04 	addi	r2,r2,-4
10010b00:	e0bfff15 	stw	r2,-4(fp)
10010b04:	e0ffff17 	ldw	r3,-4(fp)
10010b08:	00840074 	movhi	r2,4097
10010b0c:	10867d04 	addi	r2,r2,6644
10010b10:	18bff62e 	bgeu	r3,r2,10010aec <__alt_data_end+0xf8010aec>
10010b14:	0001883a 	nop
10010b18:	e037883a 	mov	sp,fp
10010b1c:	dfc00117 	ldw	ra,4(sp)
10010b20:	df000017 	ldw	fp,0(sp)
10010b24:	dec00204 	addi	sp,sp,8
10010b28:	f800283a 	ret

10010b2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010b2c:	deffff04 	addi	sp,sp,-4
10010b30:	df000015 	stw	fp,0(sp)
10010b34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010b38:	0001883a 	nop
10010b3c:	e037883a 	mov	sp,fp
10010b40:	df000017 	ldw	fp,0(sp)
10010b44:	dec00104 	addi	sp,sp,4
10010b48:	f800283a 	ret

10010b4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010b4c:	defff904 	addi	sp,sp,-28
10010b50:	dfc00615 	stw	ra,24(sp)
10010b54:	df000515 	stw	fp,20(sp)
10010b58:	df000504 	addi	fp,sp,20
10010b5c:	e13ffc15 	stw	r4,-16(fp)
10010b60:	e17ffd15 	stw	r5,-12(fp)
10010b64:	e1bffe15 	stw	r6,-8(fp)
10010b68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010b6c:	e0800217 	ldw	r2,8(fp)
10010b70:	d8800015 	stw	r2,0(sp)
10010b74:	e1ffff17 	ldw	r7,-4(fp)
10010b78:	e1bffe17 	ldw	r6,-8(fp)
10010b7c:	e17ffd17 	ldw	r5,-12(fp)
10010b80:	e13ffc17 	ldw	r4,-16(fp)
10010b84:	0010d2c0 	call	10010d2c <alt_iic_isr_register>
}  
10010b88:	e037883a 	mov	sp,fp
10010b8c:	dfc00117 	ldw	ra,4(sp)
10010b90:	df000017 	ldw	fp,0(sp)
10010b94:	dec00204 	addi	sp,sp,8
10010b98:	f800283a 	ret

10010b9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010b9c:	defff904 	addi	sp,sp,-28
10010ba0:	df000615 	stw	fp,24(sp)
10010ba4:	df000604 	addi	fp,sp,24
10010ba8:	e13ffe15 	stw	r4,-8(fp)
10010bac:	e17fff15 	stw	r5,-4(fp)
10010bb0:	e0bfff17 	ldw	r2,-4(fp)
10010bb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010bb8:	0005303a 	rdctl	r2,status
10010bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010bc0:	e0fffb17 	ldw	r3,-20(fp)
10010bc4:	00bfff84 	movi	r2,-2
10010bc8:	1884703a 	and	r2,r3,r2
10010bcc:	1001703a 	wrctl	status,r2
  
  return context;
10010bd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010bd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010bd8:	00c00044 	movi	r3,1
10010bdc:	e0bffa17 	ldw	r2,-24(fp)
10010be0:	1884983a 	sll	r2,r3,r2
10010be4:	1007883a 	mov	r3,r2
10010be8:	00840074 	movhi	r2,4097
10010bec:	10969c04 	addi	r2,r2,23152
10010bf0:	10800017 	ldw	r2,0(r2)
10010bf4:	1886b03a 	or	r3,r3,r2
10010bf8:	00840074 	movhi	r2,4097
10010bfc:	10969c04 	addi	r2,r2,23152
10010c00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010c04:	00840074 	movhi	r2,4097
10010c08:	10969c04 	addi	r2,r2,23152
10010c0c:	10800017 	ldw	r2,0(r2)
10010c10:	100170fa 	wrctl	ienable,r2
10010c14:	e0bffc17 	ldw	r2,-16(fp)
10010c18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c1c:	e0bffd17 	ldw	r2,-12(fp)
10010c20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010c24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010c28:	0001883a 	nop
}
10010c2c:	e037883a 	mov	sp,fp
10010c30:	df000017 	ldw	fp,0(sp)
10010c34:	dec00104 	addi	sp,sp,4
10010c38:	f800283a 	ret

10010c3c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010c3c:	defff904 	addi	sp,sp,-28
10010c40:	df000615 	stw	fp,24(sp)
10010c44:	df000604 	addi	fp,sp,24
10010c48:	e13ffe15 	stw	r4,-8(fp)
10010c4c:	e17fff15 	stw	r5,-4(fp)
10010c50:	e0bfff17 	ldw	r2,-4(fp)
10010c54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010c58:	0005303a 	rdctl	r2,status
10010c5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c60:	e0fffb17 	ldw	r3,-20(fp)
10010c64:	00bfff84 	movi	r2,-2
10010c68:	1884703a 	and	r2,r3,r2
10010c6c:	1001703a 	wrctl	status,r2
  
  return context;
10010c70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010c74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010c78:	00c00044 	movi	r3,1
10010c7c:	e0bffa17 	ldw	r2,-24(fp)
10010c80:	1884983a 	sll	r2,r3,r2
10010c84:	0084303a 	nor	r2,zero,r2
10010c88:	1007883a 	mov	r3,r2
10010c8c:	00840074 	movhi	r2,4097
10010c90:	10969c04 	addi	r2,r2,23152
10010c94:	10800017 	ldw	r2,0(r2)
10010c98:	1886703a 	and	r3,r3,r2
10010c9c:	00840074 	movhi	r2,4097
10010ca0:	10969c04 	addi	r2,r2,23152
10010ca4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010ca8:	00840074 	movhi	r2,4097
10010cac:	10969c04 	addi	r2,r2,23152
10010cb0:	10800017 	ldw	r2,0(r2)
10010cb4:	100170fa 	wrctl	ienable,r2
10010cb8:	e0bffc17 	ldw	r2,-16(fp)
10010cbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010cc0:	e0bffd17 	ldw	r2,-12(fp)
10010cc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010cc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010ccc:	0001883a 	nop
}
10010cd0:	e037883a 	mov	sp,fp
10010cd4:	df000017 	ldw	fp,0(sp)
10010cd8:	dec00104 	addi	sp,sp,4
10010cdc:	f800283a 	ret

10010ce0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010ce0:	defffc04 	addi	sp,sp,-16
10010ce4:	df000315 	stw	fp,12(sp)
10010ce8:	df000304 	addi	fp,sp,12
10010cec:	e13ffe15 	stw	r4,-8(fp)
10010cf0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010cf4:	000530fa 	rdctl	r2,ienable
10010cf8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010cfc:	00c00044 	movi	r3,1
10010d00:	e0bfff17 	ldw	r2,-4(fp)
10010d04:	1884983a 	sll	r2,r3,r2
10010d08:	1007883a 	mov	r3,r2
10010d0c:	e0bffd17 	ldw	r2,-12(fp)
10010d10:	1884703a 	and	r2,r3,r2
10010d14:	1004c03a 	cmpne	r2,r2,zero
10010d18:	10803fcc 	andi	r2,r2,255
}
10010d1c:	e037883a 	mov	sp,fp
10010d20:	df000017 	ldw	fp,0(sp)
10010d24:	dec00104 	addi	sp,sp,4
10010d28:	f800283a 	ret

10010d2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010d2c:	defff504 	addi	sp,sp,-44
10010d30:	dfc00a15 	stw	ra,40(sp)
10010d34:	df000915 	stw	fp,36(sp)
10010d38:	df000904 	addi	fp,sp,36
10010d3c:	e13ffc15 	stw	r4,-16(fp)
10010d40:	e17ffd15 	stw	r5,-12(fp)
10010d44:	e1bffe15 	stw	r6,-8(fp)
10010d48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010d4c:	00bffa84 	movi	r2,-22
10010d50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010d54:	e0bffd17 	ldw	r2,-12(fp)
10010d58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010d5c:	e0bff817 	ldw	r2,-32(fp)
10010d60:	10800808 	cmpgei	r2,r2,32
10010d64:	1000271e 	bne	r2,zero,10010e04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010d68:	0005303a 	rdctl	r2,status
10010d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010d70:	e0fffb17 	ldw	r3,-20(fp)
10010d74:	00bfff84 	movi	r2,-2
10010d78:	1884703a 	and	r2,r3,r2
10010d7c:	1001703a 	wrctl	status,r2
  
  return context;
10010d80:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010d84:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010d88:	00840074 	movhi	r2,4097
10010d8c:	1096a904 	addi	r2,r2,23204
10010d90:	e0fff817 	ldw	r3,-32(fp)
10010d94:	180690fa 	slli	r3,r3,3
10010d98:	10c5883a 	add	r2,r2,r3
10010d9c:	e0fffe17 	ldw	r3,-8(fp)
10010da0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010da4:	00840074 	movhi	r2,4097
10010da8:	1096a904 	addi	r2,r2,23204
10010dac:	e0fff817 	ldw	r3,-32(fp)
10010db0:	180690fa 	slli	r3,r3,3
10010db4:	10c5883a 	add	r2,r2,r3
10010db8:	10800104 	addi	r2,r2,4
10010dbc:	e0ffff17 	ldw	r3,-4(fp)
10010dc0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010dc4:	e0bffe17 	ldw	r2,-8(fp)
10010dc8:	10000526 	beq	r2,zero,10010de0 <alt_iic_isr_register+0xb4>
10010dcc:	e0bff817 	ldw	r2,-32(fp)
10010dd0:	100b883a 	mov	r5,r2
10010dd4:	e13ffc17 	ldw	r4,-16(fp)
10010dd8:	0010b9c0 	call	10010b9c <alt_ic_irq_enable>
10010ddc:	00000406 	br	10010df0 <alt_iic_isr_register+0xc4>
10010de0:	e0bff817 	ldw	r2,-32(fp)
10010de4:	100b883a 	mov	r5,r2
10010de8:	e13ffc17 	ldw	r4,-16(fp)
10010dec:	0010c3c0 	call	10010c3c <alt_ic_irq_disable>
10010df0:	e0bff715 	stw	r2,-36(fp)
10010df4:	e0bffa17 	ldw	r2,-24(fp)
10010df8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010dfc:	e0bff917 	ldw	r2,-28(fp)
10010e00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010e04:	e0bff717 	ldw	r2,-36(fp)
}
10010e08:	e037883a 	mov	sp,fp
10010e0c:	dfc00117 	ldw	ra,4(sp)
10010e10:	df000017 	ldw	fp,0(sp)
10010e14:	dec00204 	addi	sp,sp,8
10010e18:	f800283a 	ret

10010e1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010e1c:	defff804 	addi	sp,sp,-32
10010e20:	dfc00715 	stw	ra,28(sp)
10010e24:	df000615 	stw	fp,24(sp)
10010e28:	dc000515 	stw	r16,20(sp)
10010e2c:	df000604 	addi	fp,sp,24
10010e30:	e13ffb15 	stw	r4,-20(fp)
10010e34:	e17ffc15 	stw	r5,-16(fp)
10010e38:	e1bffd15 	stw	r6,-12(fp)
10010e3c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010e40:	e1bffe17 	ldw	r6,-8(fp)
10010e44:	e17ffd17 	ldw	r5,-12(fp)
10010e48:	e13ffc17 	ldw	r4,-16(fp)
10010e4c:	00110c00 	call	100110c0 <open>
10010e50:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010e54:	e0bffa17 	ldw	r2,-24(fp)
10010e58:	10002216 	blt	r2,zero,10010ee4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010e5c:	04040074 	movhi	r16,4097
10010e60:	840b4e04 	addi	r16,r16,11576
10010e64:	e0bffa17 	ldw	r2,-24(fp)
10010e68:	01400304 	movi	r5,12
10010e6c:	1009883a 	mov	r4,r2
10010e70:	000c8880 	call	1000c888 <__mulsi3>
10010e74:	8085883a 	add	r2,r16,r2
10010e78:	10c00017 	ldw	r3,0(r2)
10010e7c:	e0bffb17 	ldw	r2,-20(fp)
10010e80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010e84:	04040074 	movhi	r16,4097
10010e88:	840b4e04 	addi	r16,r16,11576
10010e8c:	e0bffa17 	ldw	r2,-24(fp)
10010e90:	01400304 	movi	r5,12
10010e94:	1009883a 	mov	r4,r2
10010e98:	000c8880 	call	1000c888 <__mulsi3>
10010e9c:	8085883a 	add	r2,r16,r2
10010ea0:	10800104 	addi	r2,r2,4
10010ea4:	10c00017 	ldw	r3,0(r2)
10010ea8:	e0bffb17 	ldw	r2,-20(fp)
10010eac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010eb0:	04040074 	movhi	r16,4097
10010eb4:	840b4e04 	addi	r16,r16,11576
10010eb8:	e0bffa17 	ldw	r2,-24(fp)
10010ebc:	01400304 	movi	r5,12
10010ec0:	1009883a 	mov	r4,r2
10010ec4:	000c8880 	call	1000c888 <__mulsi3>
10010ec8:	8085883a 	add	r2,r16,r2
10010ecc:	10800204 	addi	r2,r2,8
10010ed0:	10c00017 	ldw	r3,0(r2)
10010ed4:	e0bffb17 	ldw	r2,-20(fp)
10010ed8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010edc:	e13ffa17 	ldw	r4,-24(fp)
10010ee0:	000f8d80 	call	1000f8d8 <alt_release_fd>
  }
} 
10010ee4:	0001883a 	nop
10010ee8:	e6ffff04 	addi	sp,fp,-4
10010eec:	dfc00217 	ldw	ra,8(sp)
10010ef0:	df000117 	ldw	fp,4(sp)
10010ef4:	dc000017 	ldw	r16,0(sp)
10010ef8:	dec00304 	addi	sp,sp,12
10010efc:	f800283a 	ret

10010f00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010f00:	defffb04 	addi	sp,sp,-20
10010f04:	dfc00415 	stw	ra,16(sp)
10010f08:	df000315 	stw	fp,12(sp)
10010f0c:	df000304 	addi	fp,sp,12
10010f10:	e13ffd15 	stw	r4,-12(fp)
10010f14:	e17ffe15 	stw	r5,-8(fp)
10010f18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010f1c:	01c07fc4 	movi	r7,511
10010f20:	01800044 	movi	r6,1
10010f24:	e17ffd17 	ldw	r5,-12(fp)
10010f28:	01040074 	movhi	r4,4097
10010f2c:	210b5104 	addi	r4,r4,11588
10010f30:	0010e1c0 	call	10010e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010f34:	01c07fc4 	movi	r7,511
10010f38:	000d883a 	mov	r6,zero
10010f3c:	e17ffe17 	ldw	r5,-8(fp)
10010f40:	01040074 	movhi	r4,4097
10010f44:	210b4e04 	addi	r4,r4,11576
10010f48:	0010e1c0 	call	10010e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010f4c:	01c07fc4 	movi	r7,511
10010f50:	01800044 	movi	r6,1
10010f54:	e17fff17 	ldw	r5,-4(fp)
10010f58:	01040074 	movhi	r4,4097
10010f5c:	210b5404 	addi	r4,r4,11600
10010f60:	0010e1c0 	call	10010e1c <alt_open_fd>
}  
10010f64:	0001883a 	nop
10010f68:	e037883a 	mov	sp,fp
10010f6c:	dfc00117 	ldw	ra,4(sp)
10010f70:	df000017 	ldw	fp,0(sp)
10010f74:	dec00204 	addi	sp,sp,8
10010f78:	f800283a 	ret

10010f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010f7c:	defffe04 	addi	sp,sp,-8
10010f80:	dfc00115 	stw	ra,4(sp)
10010f84:	df000015 	stw	fp,0(sp)
10010f88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010f8c:	00840074 	movhi	r2,4097
10010f90:	108fd104 	addi	r2,r2,16196
10010f94:	10800017 	ldw	r2,0(r2)
10010f98:	10000526 	beq	r2,zero,10010fb0 <alt_get_errno+0x34>
10010f9c:	00840074 	movhi	r2,4097
10010fa0:	108fd104 	addi	r2,r2,16196
10010fa4:	10800017 	ldw	r2,0(r2)
10010fa8:	103ee83a 	callr	r2
10010fac:	00000206 	br	10010fb8 <alt_get_errno+0x3c>
10010fb0:	00840074 	movhi	r2,4097
10010fb4:	10969804 	addi	r2,r2,23136
}
10010fb8:	e037883a 	mov	sp,fp
10010fbc:	dfc00117 	ldw	ra,4(sp)
10010fc0:	df000017 	ldw	fp,0(sp)
10010fc4:	dec00204 	addi	sp,sp,8
10010fc8:	f800283a 	ret

10010fcc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010fcc:	defffb04 	addi	sp,sp,-20
10010fd0:	dfc00415 	stw	ra,16(sp)
10010fd4:	df000315 	stw	fp,12(sp)
10010fd8:	dc000215 	stw	r16,8(sp)
10010fdc:	df000304 	addi	fp,sp,12
10010fe0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010fe4:	e0bffe17 	ldw	r2,-8(fp)
10010fe8:	10800217 	ldw	r2,8(r2)
10010fec:	10d00034 	orhi	r3,r2,16384
10010ff0:	e0bffe17 	ldw	r2,-8(fp)
10010ff4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010ff8:	e03ffd15 	stw	zero,-12(fp)
10010ffc:	00002306 	br	1001108c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011000:	04040074 	movhi	r16,4097
10011004:	840b4e04 	addi	r16,r16,11576
10011008:	e0bffd17 	ldw	r2,-12(fp)
1001100c:	01400304 	movi	r5,12
10011010:	1009883a 	mov	r4,r2
10011014:	000c8880 	call	1000c888 <__mulsi3>
10011018:	8085883a 	add	r2,r16,r2
1001101c:	10c00017 	ldw	r3,0(r2)
10011020:	e0bffe17 	ldw	r2,-8(fp)
10011024:	10800017 	ldw	r2,0(r2)
10011028:	1880151e 	bne	r3,r2,10011080 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001102c:	04040074 	movhi	r16,4097
10011030:	840b4e04 	addi	r16,r16,11576
10011034:	e0bffd17 	ldw	r2,-12(fp)
10011038:	01400304 	movi	r5,12
1001103c:	1009883a 	mov	r4,r2
10011040:	000c8880 	call	1000c888 <__mulsi3>
10011044:	8085883a 	add	r2,r16,r2
10011048:	10800204 	addi	r2,r2,8
1001104c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011050:	10000b0e 	bge	r2,zero,10011080 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011054:	01400304 	movi	r5,12
10011058:	e13ffd17 	ldw	r4,-12(fp)
1001105c:	000c8880 	call	1000c888 <__mulsi3>
10011060:	1007883a 	mov	r3,r2
10011064:	00840074 	movhi	r2,4097
10011068:	108b4e04 	addi	r2,r2,11576
1001106c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011070:	e0bffe17 	ldw	r2,-8(fp)
10011074:	18800226 	beq	r3,r2,10011080 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011078:	00bffcc4 	movi	r2,-13
1001107c:	00000a06 	br	100110a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011080:	e0bffd17 	ldw	r2,-12(fp)
10011084:	10800044 	addi	r2,r2,1
10011088:	e0bffd15 	stw	r2,-12(fp)
1001108c:	00840074 	movhi	r2,4097
10011090:	108fd004 	addi	r2,r2,16192
10011094:	10800017 	ldw	r2,0(r2)
10011098:	1007883a 	mov	r3,r2
1001109c:	e0bffd17 	ldw	r2,-12(fp)
100110a0:	18bfd72e 	bgeu	r3,r2,10011000 <__alt_data_end+0xf8011000>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100110a4:	0005883a 	mov	r2,zero
}
100110a8:	e6ffff04 	addi	sp,fp,-4
100110ac:	dfc00217 	ldw	ra,8(sp)
100110b0:	df000117 	ldw	fp,4(sp)
100110b4:	dc000017 	ldw	r16,0(sp)
100110b8:	dec00304 	addi	sp,sp,12
100110bc:	f800283a 	ret

100110c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100110c0:	defff604 	addi	sp,sp,-40
100110c4:	dfc00915 	stw	ra,36(sp)
100110c8:	df000815 	stw	fp,32(sp)
100110cc:	df000804 	addi	fp,sp,32
100110d0:	e13ffd15 	stw	r4,-12(fp)
100110d4:	e17ffe15 	stw	r5,-8(fp)
100110d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100110dc:	00bfffc4 	movi	r2,-1
100110e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100110e4:	00bffb44 	movi	r2,-19
100110e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100110ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100110f0:	01440074 	movhi	r5,4097
100110f4:	294fce04 	addi	r5,r5,16184
100110f8:	e13ffd17 	ldw	r4,-12(fp)
100110fc:	00113e80 	call	100113e8 <alt_find_dev>
10011100:	e0bff815 	stw	r2,-32(fp)
10011104:	e0bff817 	ldw	r2,-32(fp)
10011108:	1000051e 	bne	r2,zero,10011120 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001110c:	e13ffd17 	ldw	r4,-12(fp)
10011110:	00114780 	call	10011478 <alt_find_file>
10011114:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011118:	00800044 	movi	r2,1
1001111c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011120:	e0bff817 	ldw	r2,-32(fp)
10011124:	10002b26 	beq	r2,zero,100111d4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011128:	e13ff817 	ldw	r4,-32(fp)
1001112c:	001158c0 	call	1001158c <alt_get_fd>
10011130:	e0bff915 	stw	r2,-28(fp)
10011134:	e0bff917 	ldw	r2,-28(fp)
10011138:	1000030e 	bge	r2,zero,10011148 <open+0x88>
    {
      status = index;
1001113c:	e0bff917 	ldw	r2,-28(fp)
10011140:	e0bffa15 	stw	r2,-24(fp)
10011144:	00002506 	br	100111dc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011148:	01400304 	movi	r5,12
1001114c:	e13ff917 	ldw	r4,-28(fp)
10011150:	000c8880 	call	1000c888 <__mulsi3>
10011154:	1007883a 	mov	r3,r2
10011158:	00840074 	movhi	r2,4097
1001115c:	108b4e04 	addi	r2,r2,11576
10011160:	1885883a 	add	r2,r3,r2
10011164:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011168:	e0fffe17 	ldw	r3,-8(fp)
1001116c:	00900034 	movhi	r2,16384
10011170:	10bfffc4 	addi	r2,r2,-1
10011174:	1886703a 	and	r3,r3,r2
10011178:	e0bffc17 	ldw	r2,-16(fp)
1001117c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011180:	e0bffb17 	ldw	r2,-20(fp)
10011184:	1000051e 	bne	r2,zero,1001119c <open+0xdc>
10011188:	e13ffc17 	ldw	r4,-16(fp)
1001118c:	0010fcc0 	call	10010fcc <alt_file_locked>
10011190:	e0bffa15 	stw	r2,-24(fp)
10011194:	e0bffa17 	ldw	r2,-24(fp)
10011198:	10001016 	blt	r2,zero,100111dc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001119c:	e0bff817 	ldw	r2,-32(fp)
100111a0:	10800317 	ldw	r2,12(r2)
100111a4:	10000826 	beq	r2,zero,100111c8 <open+0x108>
100111a8:	e0bff817 	ldw	r2,-32(fp)
100111ac:	10800317 	ldw	r2,12(r2)
100111b0:	e1ffff17 	ldw	r7,-4(fp)
100111b4:	e1bffe17 	ldw	r6,-8(fp)
100111b8:	e17ffd17 	ldw	r5,-12(fp)
100111bc:	e13ffc17 	ldw	r4,-16(fp)
100111c0:	103ee83a 	callr	r2
100111c4:	00000106 	br	100111cc <open+0x10c>
100111c8:	0005883a 	mov	r2,zero
100111cc:	e0bffa15 	stw	r2,-24(fp)
100111d0:	00000206 	br	100111dc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100111d4:	00bffb44 	movi	r2,-19
100111d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100111dc:	e0bffa17 	ldw	r2,-24(fp)
100111e0:	1000090e 	bge	r2,zero,10011208 <open+0x148>
  {
    alt_release_fd (index);  
100111e4:	e13ff917 	ldw	r4,-28(fp)
100111e8:	000f8d80 	call	1000f8d8 <alt_release_fd>
    ALT_ERRNO = -status;
100111ec:	0010f7c0 	call	10010f7c <alt_get_errno>
100111f0:	1007883a 	mov	r3,r2
100111f4:	e0bffa17 	ldw	r2,-24(fp)
100111f8:	0085c83a 	sub	r2,zero,r2
100111fc:	18800015 	stw	r2,0(r3)
    return -1;
10011200:	00bfffc4 	movi	r2,-1
10011204:	00000106 	br	1001120c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011208:	e0bff917 	ldw	r2,-28(fp)
}
1001120c:	e037883a 	mov	sp,fp
10011210:	dfc00117 	ldw	ra,4(sp)
10011214:	df000017 	ldw	fp,0(sp)
10011218:	dec00204 	addi	sp,sp,8
1001121c:	f800283a 	ret

10011220 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011220:	defffa04 	addi	sp,sp,-24
10011224:	df000515 	stw	fp,20(sp)
10011228:	df000504 	addi	fp,sp,20
1001122c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011230:	0005303a 	rdctl	r2,status
10011234:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011238:	e0fffc17 	ldw	r3,-16(fp)
1001123c:	00bfff84 	movi	r2,-2
10011240:	1884703a 	and	r2,r3,r2
10011244:	1001703a 	wrctl	status,r2
  
  return context;
10011248:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001124c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011250:	e0bfff17 	ldw	r2,-4(fp)
10011254:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011258:	e0bffd17 	ldw	r2,-12(fp)
1001125c:	10800017 	ldw	r2,0(r2)
10011260:	e0fffd17 	ldw	r3,-12(fp)
10011264:	18c00117 	ldw	r3,4(r3)
10011268:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001126c:	e0bffd17 	ldw	r2,-12(fp)
10011270:	10800117 	ldw	r2,4(r2)
10011274:	e0fffd17 	ldw	r3,-12(fp)
10011278:	18c00017 	ldw	r3,0(r3)
1001127c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011280:	e0bffd17 	ldw	r2,-12(fp)
10011284:	e0fffd17 	ldw	r3,-12(fp)
10011288:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001128c:	e0bffd17 	ldw	r2,-12(fp)
10011290:	e0fffd17 	ldw	r3,-12(fp)
10011294:	10c00015 	stw	r3,0(r2)
10011298:	e0bffb17 	ldw	r2,-20(fp)
1001129c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100112a0:	e0bffe17 	ldw	r2,-8(fp)
100112a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100112a8:	0001883a 	nop
100112ac:	e037883a 	mov	sp,fp
100112b0:	df000017 	ldw	fp,0(sp)
100112b4:	dec00104 	addi	sp,sp,4
100112b8:	f800283a 	ret

100112bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100112bc:	defffb04 	addi	sp,sp,-20
100112c0:	dfc00415 	stw	ra,16(sp)
100112c4:	df000315 	stw	fp,12(sp)
100112c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100112cc:	d0a00e17 	ldw	r2,-32712(gp)
100112d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100112d4:	d0a6d817 	ldw	r2,-25760(gp)
100112d8:	10800044 	addi	r2,r2,1
100112dc:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100112e0:	00002e06 	br	1001139c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100112e4:	e0bffd17 	ldw	r2,-12(fp)
100112e8:	10800017 	ldw	r2,0(r2)
100112ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100112f0:	e0bffd17 	ldw	r2,-12(fp)
100112f4:	10800403 	ldbu	r2,16(r2)
100112f8:	10803fcc 	andi	r2,r2,255
100112fc:	10000426 	beq	r2,zero,10011310 <alt_tick+0x54>
10011300:	d0a6d817 	ldw	r2,-25760(gp)
10011304:	1000021e 	bne	r2,zero,10011310 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011308:	e0bffd17 	ldw	r2,-12(fp)
1001130c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011310:	e0bffd17 	ldw	r2,-12(fp)
10011314:	10800217 	ldw	r2,8(r2)
10011318:	d0e6d817 	ldw	r3,-25760(gp)
1001131c:	18801d36 	bltu	r3,r2,10011394 <alt_tick+0xd8>
10011320:	e0bffd17 	ldw	r2,-12(fp)
10011324:	10800403 	ldbu	r2,16(r2)
10011328:	10803fcc 	andi	r2,r2,255
1001132c:	1000191e 	bne	r2,zero,10011394 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011330:	e0bffd17 	ldw	r2,-12(fp)
10011334:	10800317 	ldw	r2,12(r2)
10011338:	e0fffd17 	ldw	r3,-12(fp)
1001133c:	18c00517 	ldw	r3,20(r3)
10011340:	1809883a 	mov	r4,r3
10011344:	103ee83a 	callr	r2
10011348:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001134c:	e0bfff17 	ldw	r2,-4(fp)
10011350:	1000031e 	bne	r2,zero,10011360 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011354:	e13ffd17 	ldw	r4,-12(fp)
10011358:	00112200 	call	10011220 <alt_alarm_stop>
1001135c:	00000d06 	br	10011394 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011360:	e0bffd17 	ldw	r2,-12(fp)
10011364:	10c00217 	ldw	r3,8(r2)
10011368:	e0bfff17 	ldw	r2,-4(fp)
1001136c:	1887883a 	add	r3,r3,r2
10011370:	e0bffd17 	ldw	r2,-12(fp)
10011374:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011378:	e0bffd17 	ldw	r2,-12(fp)
1001137c:	10c00217 	ldw	r3,8(r2)
10011380:	d0a6d817 	ldw	r2,-25760(gp)
10011384:	1880032e 	bgeu	r3,r2,10011394 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011388:	e0bffd17 	ldw	r2,-12(fp)
1001138c:	00c00044 	movi	r3,1
10011390:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011394:	e0bffe17 	ldw	r2,-8(fp)
10011398:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001139c:	e0fffd17 	ldw	r3,-12(fp)
100113a0:	d0a00e04 	addi	r2,gp,-32712
100113a4:	18bfcf1e 	bne	r3,r2,100112e4 <__alt_data_end+0xf80112e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100113a8:	0001883a 	nop
}
100113ac:	0001883a 	nop
100113b0:	e037883a 	mov	sp,fp
100113b4:	dfc00117 	ldw	ra,4(sp)
100113b8:	df000017 	ldw	fp,0(sp)
100113bc:	dec00204 	addi	sp,sp,8
100113c0:	f800283a 	ret

100113c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
100113c4:	deffff04 	addi	sp,sp,-4
100113c8:	df000015 	stw	fp,0(sp)
100113cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100113d0:	000170fa 	wrctl	ienable,zero
}
100113d4:	0001883a 	nop
100113d8:	e037883a 	mov	sp,fp
100113dc:	df000017 	ldw	fp,0(sp)
100113e0:	dec00104 	addi	sp,sp,4
100113e4:	f800283a 	ret

100113e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100113e8:	defffa04 	addi	sp,sp,-24
100113ec:	dfc00515 	stw	ra,20(sp)
100113f0:	df000415 	stw	fp,16(sp)
100113f4:	df000404 	addi	fp,sp,16
100113f8:	e13ffe15 	stw	r4,-8(fp)
100113fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011400:	e0bfff17 	ldw	r2,-4(fp)
10011404:	10800017 	ldw	r2,0(r2)
10011408:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1001140c:	e13ffe17 	ldw	r4,-8(fp)
10011410:	00023540 	call	10002354 <strlen>
10011414:	10800044 	addi	r2,r2,1
10011418:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001141c:	00000d06 	br	10011454 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011420:	e0bffc17 	ldw	r2,-16(fp)
10011424:	10800217 	ldw	r2,8(r2)
10011428:	e0fffd17 	ldw	r3,-12(fp)
1001142c:	180d883a 	mov	r6,r3
10011430:	e17ffe17 	ldw	r5,-8(fp)
10011434:	1009883a 	mov	r4,r2
10011438:	00116ac0 	call	100116ac <memcmp>
1001143c:	1000021e 	bne	r2,zero,10011448 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011440:	e0bffc17 	ldw	r2,-16(fp)
10011444:	00000706 	br	10011464 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011448:	e0bffc17 	ldw	r2,-16(fp)
1001144c:	10800017 	ldw	r2,0(r2)
10011450:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011454:	e0fffc17 	ldw	r3,-16(fp)
10011458:	e0bfff17 	ldw	r2,-4(fp)
1001145c:	18bff01e 	bne	r3,r2,10011420 <__alt_data_end+0xf8011420>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011460:	0005883a 	mov	r2,zero
}
10011464:	e037883a 	mov	sp,fp
10011468:	dfc00117 	ldw	ra,4(sp)
1001146c:	df000017 	ldw	fp,0(sp)
10011470:	dec00204 	addi	sp,sp,8
10011474:	f800283a 	ret

10011478 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011478:	defffb04 	addi	sp,sp,-20
1001147c:	dfc00415 	stw	ra,16(sp)
10011480:	df000315 	stw	fp,12(sp)
10011484:	df000304 	addi	fp,sp,12
10011488:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1001148c:	00840074 	movhi	r2,4097
10011490:	108fcc04 	addi	r2,r2,16176
10011494:	10800017 	ldw	r2,0(r2)
10011498:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001149c:	00003106 	br	10011564 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100114a0:	e0bffd17 	ldw	r2,-12(fp)
100114a4:	10800217 	ldw	r2,8(r2)
100114a8:	1009883a 	mov	r4,r2
100114ac:	00023540 	call	10002354 <strlen>
100114b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100114b4:	e0bffd17 	ldw	r2,-12(fp)
100114b8:	10c00217 	ldw	r3,8(r2)
100114bc:	e0bffe17 	ldw	r2,-8(fp)
100114c0:	10bfffc4 	addi	r2,r2,-1
100114c4:	1885883a 	add	r2,r3,r2
100114c8:	10800003 	ldbu	r2,0(r2)
100114cc:	10803fcc 	andi	r2,r2,255
100114d0:	1080201c 	xori	r2,r2,128
100114d4:	10bfe004 	addi	r2,r2,-128
100114d8:	10800bd8 	cmpnei	r2,r2,47
100114dc:	1000031e 	bne	r2,zero,100114ec <alt_find_file+0x74>
    {
      len -= 1;
100114e0:	e0bffe17 	ldw	r2,-8(fp)
100114e4:	10bfffc4 	addi	r2,r2,-1
100114e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100114ec:	e0bffe17 	ldw	r2,-8(fp)
100114f0:	e0ffff17 	ldw	r3,-4(fp)
100114f4:	1885883a 	add	r2,r3,r2
100114f8:	10800003 	ldbu	r2,0(r2)
100114fc:	10803fcc 	andi	r2,r2,255
10011500:	1080201c 	xori	r2,r2,128
10011504:	10bfe004 	addi	r2,r2,-128
10011508:	10800be0 	cmpeqi	r2,r2,47
1001150c:	1000081e 	bne	r2,zero,10011530 <alt_find_file+0xb8>
10011510:	e0bffe17 	ldw	r2,-8(fp)
10011514:	e0ffff17 	ldw	r3,-4(fp)
10011518:	1885883a 	add	r2,r3,r2
1001151c:	10800003 	ldbu	r2,0(r2)
10011520:	10803fcc 	andi	r2,r2,255
10011524:	1080201c 	xori	r2,r2,128
10011528:	10bfe004 	addi	r2,r2,-128
1001152c:	10000a1e 	bne	r2,zero,10011558 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011530:	e0bffd17 	ldw	r2,-12(fp)
10011534:	10800217 	ldw	r2,8(r2)
10011538:	e0fffe17 	ldw	r3,-8(fp)
1001153c:	180d883a 	mov	r6,r3
10011540:	e17fff17 	ldw	r5,-4(fp)
10011544:	1009883a 	mov	r4,r2
10011548:	00116ac0 	call	100116ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001154c:	1000021e 	bne	r2,zero,10011558 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011550:	e0bffd17 	ldw	r2,-12(fp)
10011554:	00000806 	br	10011578 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011558:	e0bffd17 	ldw	r2,-12(fp)
1001155c:	10800017 	ldw	r2,0(r2)
10011560:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011564:	e0fffd17 	ldw	r3,-12(fp)
10011568:	00840074 	movhi	r2,4097
1001156c:	108fcc04 	addi	r2,r2,16176
10011570:	18bfcb1e 	bne	r3,r2,100114a0 <__alt_data_end+0xf80114a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011574:	0005883a 	mov	r2,zero
}
10011578:	e037883a 	mov	sp,fp
1001157c:	dfc00117 	ldw	ra,4(sp)
10011580:	df000017 	ldw	fp,0(sp)
10011584:	dec00204 	addi	sp,sp,8
10011588:	f800283a 	ret

1001158c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001158c:	defffa04 	addi	sp,sp,-24
10011590:	dfc00515 	stw	ra,20(sp)
10011594:	df000415 	stw	fp,16(sp)
10011598:	dc000315 	stw	r16,12(sp)
1001159c:	df000404 	addi	fp,sp,16
100115a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100115a4:	00bffa04 	movi	r2,-24
100115a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100115ac:	e03ffc15 	stw	zero,-16(fp)
100115b0:	00002106 	br	10011638 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100115b4:	04040074 	movhi	r16,4097
100115b8:	840b4e04 	addi	r16,r16,11576
100115bc:	e0bffc17 	ldw	r2,-16(fp)
100115c0:	01400304 	movi	r5,12
100115c4:	1009883a 	mov	r4,r2
100115c8:	000c8880 	call	1000c888 <__mulsi3>
100115cc:	8085883a 	add	r2,r16,r2
100115d0:	10800017 	ldw	r2,0(r2)
100115d4:	1000151e 	bne	r2,zero,1001162c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100115d8:	04040074 	movhi	r16,4097
100115dc:	840b4e04 	addi	r16,r16,11576
100115e0:	e0bffc17 	ldw	r2,-16(fp)
100115e4:	01400304 	movi	r5,12
100115e8:	1009883a 	mov	r4,r2
100115ec:	000c8880 	call	1000c888 <__mulsi3>
100115f0:	8085883a 	add	r2,r16,r2
100115f4:	e0fffe17 	ldw	r3,-8(fp)
100115f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100115fc:	00840074 	movhi	r2,4097
10011600:	108fd004 	addi	r2,r2,16192
10011604:	10c00017 	ldw	r3,0(r2)
10011608:	e0bffc17 	ldw	r2,-16(fp)
1001160c:	1880040e 	bge	r3,r2,10011620 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011610:	00840074 	movhi	r2,4097
10011614:	108fd004 	addi	r2,r2,16192
10011618:	e0fffc17 	ldw	r3,-16(fp)
1001161c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011620:	e0bffc17 	ldw	r2,-16(fp)
10011624:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011628:	00000606 	br	10011644 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001162c:	e0bffc17 	ldw	r2,-16(fp)
10011630:	10800044 	addi	r2,r2,1
10011634:	e0bffc15 	stw	r2,-16(fp)
10011638:	e0bffc17 	ldw	r2,-16(fp)
1001163c:	10800810 	cmplti	r2,r2,32
10011640:	103fdc1e 	bne	r2,zero,100115b4 <__alt_data_end+0xf80115b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011644:	e0bffd17 	ldw	r2,-12(fp)
}
10011648:	e6ffff04 	addi	sp,fp,-4
1001164c:	dfc00217 	ldw	ra,8(sp)
10011650:	df000117 	ldw	fp,4(sp)
10011654:	dc000017 	ldw	r16,0(sp)
10011658:	dec00304 	addi	sp,sp,12
1001165c:	f800283a 	ret

10011660 <atexit>:
10011660:	200b883a 	mov	r5,r4
10011664:	000f883a 	mov	r7,zero
10011668:	000d883a 	mov	r6,zero
1001166c:	0009883a 	mov	r4,zero
10011670:	00117281 	jmpi	10011728 <__register_exitproc>

10011674 <exit>:
10011674:	defffe04 	addi	sp,sp,-8
10011678:	000b883a 	mov	r5,zero
1001167c:	dc000015 	stw	r16,0(sp)
10011680:	dfc00115 	stw	ra,4(sp)
10011684:	2021883a 	mov	r16,r4
10011688:	00118400 	call	10011840 <__call_exitprocs>
1001168c:	00840074 	movhi	r2,4097
10011690:	108fc604 	addi	r2,r2,16152
10011694:	11000017 	ldw	r4,0(r2)
10011698:	20800f17 	ldw	r2,60(r4)
1001169c:	10000126 	beq	r2,zero,100116a4 <exit+0x30>
100116a0:	103ee83a 	callr	r2
100116a4:	8009883a 	mov	r4,r16
100116a8:	00119c00 	call	100119c0 <_exit>

100116ac <memcmp>:
100116ac:	01c000c4 	movi	r7,3
100116b0:	3980192e 	bgeu	r7,r6,10011718 <memcmp+0x6c>
100116b4:	2144b03a 	or	r2,r4,r5
100116b8:	11c4703a 	and	r2,r2,r7
100116bc:	10000f26 	beq	r2,zero,100116fc <memcmp+0x50>
100116c0:	20800003 	ldbu	r2,0(r4)
100116c4:	28c00003 	ldbu	r3,0(r5)
100116c8:	10c0151e 	bne	r2,r3,10011720 <memcmp+0x74>
100116cc:	31bfff84 	addi	r6,r6,-2
100116d0:	01ffffc4 	movi	r7,-1
100116d4:	00000406 	br	100116e8 <memcmp+0x3c>
100116d8:	20800003 	ldbu	r2,0(r4)
100116dc:	28c00003 	ldbu	r3,0(r5)
100116e0:	31bfffc4 	addi	r6,r6,-1
100116e4:	10c00e1e 	bne	r2,r3,10011720 <memcmp+0x74>
100116e8:	21000044 	addi	r4,r4,1
100116ec:	29400044 	addi	r5,r5,1
100116f0:	31fff91e 	bne	r6,r7,100116d8 <__alt_data_end+0xf80116d8>
100116f4:	0005883a 	mov	r2,zero
100116f8:	f800283a 	ret
100116fc:	20c00017 	ldw	r3,0(r4)
10011700:	28800017 	ldw	r2,0(r5)
10011704:	18bfee1e 	bne	r3,r2,100116c0 <__alt_data_end+0xf80116c0>
10011708:	31bfff04 	addi	r6,r6,-4
1001170c:	21000104 	addi	r4,r4,4
10011710:	29400104 	addi	r5,r5,4
10011714:	39bff936 	bltu	r7,r6,100116fc <__alt_data_end+0xf80116fc>
10011718:	303fe91e 	bne	r6,zero,100116c0 <__alt_data_end+0xf80116c0>
1001171c:	003ff506 	br	100116f4 <__alt_data_end+0xf80116f4>
10011720:	10c5c83a 	sub	r2,r2,r3
10011724:	f800283a 	ret

10011728 <__register_exitproc>:
10011728:	defffa04 	addi	sp,sp,-24
1001172c:	dc000315 	stw	r16,12(sp)
10011730:	04040074 	movhi	r16,4097
10011734:	840fc604 	addi	r16,r16,16152
10011738:	80c00017 	ldw	r3,0(r16)
1001173c:	dc400415 	stw	r17,16(sp)
10011740:	dfc00515 	stw	ra,20(sp)
10011744:	18805217 	ldw	r2,328(r3)
10011748:	2023883a 	mov	r17,r4
1001174c:	10003726 	beq	r2,zero,1001182c <__register_exitproc+0x104>
10011750:	10c00117 	ldw	r3,4(r2)
10011754:	010007c4 	movi	r4,31
10011758:	20c00e16 	blt	r4,r3,10011794 <__register_exitproc+0x6c>
1001175c:	1a000044 	addi	r8,r3,1
10011760:	8800221e 	bne	r17,zero,100117ec <__register_exitproc+0xc4>
10011764:	18c00084 	addi	r3,r3,2
10011768:	18c7883a 	add	r3,r3,r3
1001176c:	18c7883a 	add	r3,r3,r3
10011770:	12000115 	stw	r8,4(r2)
10011774:	10c7883a 	add	r3,r2,r3
10011778:	19400015 	stw	r5,0(r3)
1001177c:	0005883a 	mov	r2,zero
10011780:	dfc00517 	ldw	ra,20(sp)
10011784:	dc400417 	ldw	r17,16(sp)
10011788:	dc000317 	ldw	r16,12(sp)
1001178c:	dec00604 	addi	sp,sp,24
10011790:	f800283a 	ret
10011794:	00800034 	movhi	r2,0
10011798:	10800004 	addi	r2,r2,0
1001179c:	10002626 	beq	r2,zero,10011838 <__register_exitproc+0x110>
100117a0:	01006404 	movi	r4,400
100117a4:	d9400015 	stw	r5,0(sp)
100117a8:	d9800115 	stw	r6,4(sp)
100117ac:	d9c00215 	stw	r7,8(sp)
100117b0:	00000000 	call	10000000 <__reset>
100117b4:	d9400017 	ldw	r5,0(sp)
100117b8:	d9800117 	ldw	r6,4(sp)
100117bc:	d9c00217 	ldw	r7,8(sp)
100117c0:	10001d26 	beq	r2,zero,10011838 <__register_exitproc+0x110>
100117c4:	81000017 	ldw	r4,0(r16)
100117c8:	10000115 	stw	zero,4(r2)
100117cc:	02000044 	movi	r8,1
100117d0:	22405217 	ldw	r9,328(r4)
100117d4:	0007883a 	mov	r3,zero
100117d8:	12400015 	stw	r9,0(r2)
100117dc:	20805215 	stw	r2,328(r4)
100117e0:	10006215 	stw	zero,392(r2)
100117e4:	10006315 	stw	zero,396(r2)
100117e8:	883fde26 	beq	r17,zero,10011764 <__alt_data_end+0xf8011764>
100117ec:	18c9883a 	add	r4,r3,r3
100117f0:	2109883a 	add	r4,r4,r4
100117f4:	1109883a 	add	r4,r2,r4
100117f8:	21802215 	stw	r6,136(r4)
100117fc:	01800044 	movi	r6,1
10011800:	12406217 	ldw	r9,392(r2)
10011804:	30cc983a 	sll	r6,r6,r3
10011808:	4992b03a 	or	r9,r9,r6
1001180c:	12406215 	stw	r9,392(r2)
10011810:	21c04215 	stw	r7,264(r4)
10011814:	01000084 	movi	r4,2
10011818:	893fd21e 	bne	r17,r4,10011764 <__alt_data_end+0xf8011764>
1001181c:	11006317 	ldw	r4,396(r2)
10011820:	218cb03a 	or	r6,r4,r6
10011824:	11806315 	stw	r6,396(r2)
10011828:	003fce06 	br	10011764 <__alt_data_end+0xf8011764>
1001182c:	18805304 	addi	r2,r3,332
10011830:	18805215 	stw	r2,328(r3)
10011834:	003fc606 	br	10011750 <__alt_data_end+0xf8011750>
10011838:	00bfffc4 	movi	r2,-1
1001183c:	003fd006 	br	10011780 <__alt_data_end+0xf8011780>

10011840 <__call_exitprocs>:
10011840:	defff504 	addi	sp,sp,-44
10011844:	df000915 	stw	fp,36(sp)
10011848:	dd400615 	stw	r21,24(sp)
1001184c:	dc800315 	stw	r18,12(sp)
10011850:	dfc00a15 	stw	ra,40(sp)
10011854:	ddc00815 	stw	r23,32(sp)
10011858:	dd800715 	stw	r22,28(sp)
1001185c:	dd000515 	stw	r20,20(sp)
10011860:	dcc00415 	stw	r19,16(sp)
10011864:	dc400215 	stw	r17,8(sp)
10011868:	dc000115 	stw	r16,4(sp)
1001186c:	d9000015 	stw	r4,0(sp)
10011870:	2839883a 	mov	fp,r5
10011874:	04800044 	movi	r18,1
10011878:	057fffc4 	movi	r21,-1
1001187c:	00840074 	movhi	r2,4097
10011880:	108fc604 	addi	r2,r2,16152
10011884:	12000017 	ldw	r8,0(r2)
10011888:	45005217 	ldw	r20,328(r8)
1001188c:	44c05204 	addi	r19,r8,328
10011890:	a0001c26 	beq	r20,zero,10011904 <__call_exitprocs+0xc4>
10011894:	a0800117 	ldw	r2,4(r20)
10011898:	15ffffc4 	addi	r23,r2,-1
1001189c:	b8000d16 	blt	r23,zero,100118d4 <__call_exitprocs+0x94>
100118a0:	14000044 	addi	r16,r2,1
100118a4:	8421883a 	add	r16,r16,r16
100118a8:	8421883a 	add	r16,r16,r16
100118ac:	84402004 	addi	r17,r16,128
100118b0:	a463883a 	add	r17,r20,r17
100118b4:	a421883a 	add	r16,r20,r16
100118b8:	e0001e26 	beq	fp,zero,10011934 <__call_exitprocs+0xf4>
100118bc:	80804017 	ldw	r2,256(r16)
100118c0:	e0801c26 	beq	fp,r2,10011934 <__call_exitprocs+0xf4>
100118c4:	bdffffc4 	addi	r23,r23,-1
100118c8:	843fff04 	addi	r16,r16,-4
100118cc:	8c7fff04 	addi	r17,r17,-4
100118d0:	bd7ff91e 	bne	r23,r21,100118b8 <__alt_data_end+0xf80118b8>
100118d4:	00800034 	movhi	r2,0
100118d8:	10800004 	addi	r2,r2,0
100118dc:	10000926 	beq	r2,zero,10011904 <__call_exitprocs+0xc4>
100118e0:	a0800117 	ldw	r2,4(r20)
100118e4:	1000301e 	bne	r2,zero,100119a8 <__call_exitprocs+0x168>
100118e8:	a0800017 	ldw	r2,0(r20)
100118ec:	10003226 	beq	r2,zero,100119b8 <__call_exitprocs+0x178>
100118f0:	a009883a 	mov	r4,r20
100118f4:	98800015 	stw	r2,0(r19)
100118f8:	00000000 	call	10000000 <__reset>
100118fc:	9d000017 	ldw	r20,0(r19)
10011900:	a03fe41e 	bne	r20,zero,10011894 <__alt_data_end+0xf8011894>
10011904:	dfc00a17 	ldw	ra,40(sp)
10011908:	df000917 	ldw	fp,36(sp)
1001190c:	ddc00817 	ldw	r23,32(sp)
10011910:	dd800717 	ldw	r22,28(sp)
10011914:	dd400617 	ldw	r21,24(sp)
10011918:	dd000517 	ldw	r20,20(sp)
1001191c:	dcc00417 	ldw	r19,16(sp)
10011920:	dc800317 	ldw	r18,12(sp)
10011924:	dc400217 	ldw	r17,8(sp)
10011928:	dc000117 	ldw	r16,4(sp)
1001192c:	dec00b04 	addi	sp,sp,44
10011930:	f800283a 	ret
10011934:	a0800117 	ldw	r2,4(r20)
10011938:	80c00017 	ldw	r3,0(r16)
1001193c:	10bfffc4 	addi	r2,r2,-1
10011940:	15c01426 	beq	r2,r23,10011994 <__call_exitprocs+0x154>
10011944:	80000015 	stw	zero,0(r16)
10011948:	183fde26 	beq	r3,zero,100118c4 <__alt_data_end+0xf80118c4>
1001194c:	95c8983a 	sll	r4,r18,r23
10011950:	a0806217 	ldw	r2,392(r20)
10011954:	a5800117 	ldw	r22,4(r20)
10011958:	2084703a 	and	r2,r4,r2
1001195c:	10000b26 	beq	r2,zero,1001198c <__call_exitprocs+0x14c>
10011960:	a0806317 	ldw	r2,396(r20)
10011964:	2088703a 	and	r4,r4,r2
10011968:	20000c1e 	bne	r4,zero,1001199c <__call_exitprocs+0x15c>
1001196c:	89400017 	ldw	r5,0(r17)
10011970:	d9000017 	ldw	r4,0(sp)
10011974:	183ee83a 	callr	r3
10011978:	a0800117 	ldw	r2,4(r20)
1001197c:	15bfbf1e 	bne	r2,r22,1001187c <__alt_data_end+0xf801187c>
10011980:	98800017 	ldw	r2,0(r19)
10011984:	153fcf26 	beq	r2,r20,100118c4 <__alt_data_end+0xf80118c4>
10011988:	003fbc06 	br	1001187c <__alt_data_end+0xf801187c>
1001198c:	183ee83a 	callr	r3
10011990:	003ff906 	br	10011978 <__alt_data_end+0xf8011978>
10011994:	a5c00115 	stw	r23,4(r20)
10011998:	003feb06 	br	10011948 <__alt_data_end+0xf8011948>
1001199c:	89000017 	ldw	r4,0(r17)
100119a0:	183ee83a 	callr	r3
100119a4:	003ff406 	br	10011978 <__alt_data_end+0xf8011978>
100119a8:	a0800017 	ldw	r2,0(r20)
100119ac:	a027883a 	mov	r19,r20
100119b0:	1029883a 	mov	r20,r2
100119b4:	003fb606 	br	10011890 <__alt_data_end+0xf8011890>
100119b8:	0005883a 	mov	r2,zero
100119bc:	003ffb06 	br	100119ac <__alt_data_end+0xf80119ac>

100119c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100119c0:	defffd04 	addi	sp,sp,-12
100119c4:	df000215 	stw	fp,8(sp)
100119c8:	df000204 	addi	fp,sp,8
100119cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100119d0:	0001883a 	nop
100119d4:	e0bfff17 	ldw	r2,-4(fp)
100119d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100119dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100119e0:	10000226 	beq	r2,zero,100119ec <_exit+0x2c>
    ALT_SIM_FAIL();
100119e4:	002af070 	cmpltui	zero,zero,43969
100119e8:	00000106 	br	100119f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100119ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100119f0:	003fff06 	br	100119f0 <__alt_data_end+0xf80119f0>
